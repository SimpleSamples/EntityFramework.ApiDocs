### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  id: LocalView`1
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo(`0[],System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged(PropertyChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging(PropertyChangingEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList
  langs:
  - csharp
  - vb
  name: LocalView<TEntity>
  nameWithType: LocalView<TEntity>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LocalView
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    A collection that stays in sync with entities of a given type being tracked by\n    a <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref>. Call <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601.Local\" data-throw-if-not-resolved=\"false\"></xref> to obtain a\n    local view.\n</p>\n<p>\n    This local view will stay in sync as entities are added or removed from the context. Likewise, entities\n    added to or removed from the local view will automatically be added to or removed\n    from the context.\n</p>\n<p>\n    Adding an entity to this collection will cause it to be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref>\n    state by the context unless it is already being tracked.\n</p>\n<p>\n    Removing an entity from this collection will cause it to be marked as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>,\n    unless it was previously in the Added state, in which case it will be detached from the context.\n</p>\n<p>\n    The collection implements <see cref=\"!:INotifyCollectionChanged\"></see>,\n<see cref=\"!:INotifyPropertyChanging\"></see>, and <see cref=\"!:INotifyPropertyChanging\"></see> such that\nnotifications are generated when an entity starts being tracked by the context or is\nmarked as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Detached\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: 'public class LocalView<TEntity> : ICollection<TEntity>, IEnumerable<TEntity>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging where TEntity : class'
    content.vb: >-
      Public Class LocalView(Of TEntity As Class)
          Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging
    typeParameters:
    - id: TEntity
      description: The type of the entity in the local view.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}
  - System.Collections.Generic.IEnumerable{{TEntity}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{{TEntity},System.String})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Func{{TEntity},{TEntity},System.Boolean})
  - System.Collections.Generic.IEnumerable{System.Object}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.String)
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{{TEntity}})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{{TEntity}})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{{TEntity}})
  nameWithType.vb: LocalView(Of TEntity)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity)
  name.vb: LocalView(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})
  id: '#ctor(Microsoft.EntityFrameworkCore.DbSet{`0})'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: LocalView(DbSet<TEntity>)
  nameWithType: LocalView<TEntity>.LocalView(DbSet<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.LocalView(Microsoft.EntityFrameworkCore.DbSet<TEntity>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public LocalView(DbSet<TEntity> set)
    content.vb: Public Sub New(set As DbSet(Of TEntity))
    parameters:
    - id: set
      type: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor*
  nameWithType.vb: LocalView(Of TEntity).LocalView(DbSet(Of TEntity))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).LocalView(Microsoft.EntityFrameworkCore.DbSet(Of TEntity))
  name.vb: LocalView(DbSet(Of TEntity))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LocalView<TEntity>.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns an <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> for all tracked entities of type TEntity\nthat are not marked as deleted.\n"
  example: []
  syntax:
    content: public virtual IEnumerator<TEntity> GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator(Of TEntity)
    return:
      type: System.Collections.Generic.IEnumerator{{TEntity}}
      description: 'An enumerator for the collection. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TEntity}}.GetEnumerator
  nameWithType.vb: LocalView(Of TEntity).GetEnumerator()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).GetEnumerator()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: LocalView<TEntity>.IEnumerable.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 79
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns an <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> for all tracked entities of type TEntity\nthat are not marked as deleted.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: 'An enumerator for the collection. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: LocalView(Of TEntity).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add(`0)
  id: Add(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: Add(TEntity)
  nameWithType: LocalView<TEntity>.Add(TEntity)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Add(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Add
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 92
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Adds a new entity to the <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref>. If the entity is not being tracked or is currently\n    marked as deleted, then it becomes tracked as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Note that only the given entity is tracked. Any related entities discoverable from\n    the given entity are not automatically tracked.\n</p>\n"
  example: []
  syntax:
    content: public virtual void Add(TEntity item)
    content.vb: Public Overridable Sub Add(item As TEntity)
    parameters:
    - id: item
      type: '{TEntity}'
      description: 'The item to start tracking. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.Add({TEntity})
  nameWithType.vb: LocalView(Of TEntity).Add(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Add(TEntity)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear
  id: Clear
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: LocalView<TEntity>.Clear()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Clear
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Marks all entities of type TEntity being tracked by the <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref>\n    as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Entities that are currently marked as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> will be marked\n    as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Detached\" data-throw-if-not-resolved=\"false\"></xref> since the Added state indicates that the entity\n    has not been saved to the database and hence it does not make sense to attempt to\n    delete it from the database.\n</p>\n"
  example: []
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.Clear
  nameWithType.vb: LocalView(Of TEntity).Clear()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Clear()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains(`0)
  id: Contains(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: Contains(TEntity)
  nameWithType: LocalView<TEntity>.Contains(TEntity)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Contains(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Contains
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 141
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns true if the entity is being tracked by the context and has not been\nmarked as Deleted.\n"
  example: []
  syntax:
    content: public virtual bool Contains(TEntity item)
    content.vb: Public Overridable Function Contains(item As TEntity) As Boolean
    parameters:
    - id: item
      type: '{TEntity}'
      description: 'The entity to check. '
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.Contains({TEntity})
  nameWithType.vb: LocalView(Of TEntity).Contains(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Contains(TEntity)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: CopyTo(TEntity[], Int32)
  nameWithType: LocalView<TEntity>.CopyTo(TEntity[], Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.CopyTo(TEntity[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CopyTo
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 154
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCopies to an array all entities of type TEntity that are being tracked and are\nnot marked as Deleted.\n"
  example: []
  syntax:
    content: public virtual void CopyTo(TEntity[] array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As TEntity(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{TEntity}[]'
      description: 'The array into which to copy entities. '
    - id: arrayIndex
      type: System.Int32
      description: 'The index into the array to start copying. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.CopyTo({TEntity}[],System.Int32)
  nameWithType.vb: LocalView(Of TEntity).CopyTo(TEntity(), Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).CopyTo(TEntity(), System.Int32)
  name.vb: CopyTo(TEntity(), Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove(`0)
  id: Remove(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: Remove(TEntity)
  nameWithType: LocalView<TEntity>.Remove(TEntity)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Remove(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Remove
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 182
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Marks the given entity as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Entities that are currently marked as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> will be marked\n    as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Detached\" data-throw-if-not-resolved=\"false\"></xref> since the Added state indicates that the entity\n    has not been saved to the database and hence it does not make sense to attempt to\n    delete it from the database.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool Remove(TEntity item)
    content.vb: Public Overridable Function Remove(item As TEntity) As Boolean
    parameters:
    - id: item
      type: '{TEntity}'
      description: 'The entity to delete. '
    return:
      type: System.Boolean
      description: 'True if the entity was being tracked and was not already Deleted. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.Remove({TEntity})
  nameWithType.vb: LocalView(Of TEntity).Remove(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Remove(TEntity)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
  id: Count
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LocalView<TEntity>.Count
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Count
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 243
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThe number of entities of type TEntity that are being tracked and are not marked\nas Deleted.\n"
  example: []
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.Count
  nameWithType.vb: LocalView(Of TEntity).Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Count
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: LocalView<TEntity>.IsReadOnly
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsReadOnly
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 248
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nFalse, since the collection is not read-only.\n"
  example: []
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{TEntity}}.IsReadOnly
  nameWithType.vb: LocalView(Of TEntity).IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).IsReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged
  id: PropertyChanged
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: LocalView<TEntity>.PropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.PropertyChanged
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 253
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when a property of this collection (such as <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.LocalView%601.Count\" data-throw-if-not-resolved=\"false\"></xref>) changes.\n"
  example: []
  syntax:
    content: public virtual event PropertyChangedEventHandler PropertyChanged
    content.vb: Public Overridable Event PropertyChanged As PropertyChangedEventHandler
    return:
      type: PropertyChangedEventHandler
  nameWithType.vb: LocalView(Of TEntity).PropertyChanged
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).PropertyChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging
  id: PropertyChanging
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: PropertyChanging
  nameWithType: LocalView<TEntity>.PropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.PropertyChanging
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyChanging
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 258
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when a property of this collection (such as <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.LocalView%601.Count\" data-throw-if-not-resolved=\"false\"></xref>) is changing.\n"
  example: []
  syntax:
    content: public virtual event PropertyChangingEventHandler PropertyChanging
    content.vb: Public Overridable Event PropertyChanging As PropertyChangingEventHandler
    return:
      type: PropertyChangingEventHandler
  nameWithType.vb: LocalView(Of TEntity).PropertyChanging
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).PropertyChanging
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged
  id: CollectionChanged
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: LocalView<TEntity>.CollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.CollectionChanged
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CollectionChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 265
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when the contents of the collection changes, either because an entity\nhas been directly added or removed from the collection, or because an entity\nstarts being tracked, or because an entity is marked as Deleted.\n"
  example: []
  syntax:
    content: public virtual event NotifyCollectionChangedEventHandler CollectionChanged
    content.vb: Public Overridable Event CollectionChanged As NotifyCollectionChangedEventHandler
    return:
      type: NotifyCollectionChangedEventHandler
  nameWithType.vb: LocalView(Of TEntity).CollectionChanged
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).CollectionChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged(PropertyChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged(PropertyChangedEventArgs)
  id: OnPropertyChanged(PropertyChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(PropertyChangedEventArgs)
  nameWithType: LocalView<TEntity>.OnPropertyChanged(PropertyChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnPropertyChanged(PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnPropertyChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 271
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.LocalView%601.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
    content.vb: Protected Overridable Sub OnPropertyChanged(e As PropertyChangedEventArgs)
    parameters:
    - id: e
      type: PropertyChangedEventArgs
      description: 'Details of the property that changed. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged*
  nameWithType.vb: LocalView(Of TEntity).OnPropertyChanged(PropertyChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnPropertyChanged(PropertyChangedEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging(PropertyChangingEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging(PropertyChangingEventArgs)
  id: OnPropertyChanging(PropertyChangingEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanging(PropertyChangingEventArgs)
  nameWithType: LocalView<TEntity>.OnPropertyChanging(PropertyChangingEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnPropertyChanging(PropertyChangingEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnPropertyChanging
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 278
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.LocalView%601.PropertyChanging\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanging(PropertyChangingEventArgs e)
    content.vb: Protected Overridable Sub OnPropertyChanging(e As PropertyChangingEventArgs)
    parameters:
    - id: e
      type: PropertyChangingEventArgs
      description: 'Details of the property that is changing. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging*
  nameWithType.vb: LocalView(Of TEntity).OnPropertyChanging(PropertyChangingEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnPropertyChanging(PropertyChangingEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: LocalView<TEntity>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnCollectionChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 285
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.LocalView%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    content.vb: Protected Overridable Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
    parameters:
    - id: e
      type: NotifyCollectionChangedEventArgs
      description: 'Details of the change. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged*
  nameWithType.vb: LocalView(Of TEntity).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnCollectionChanged(NotifyCollectionChangedEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList
  id: ToBindingList
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1
  langs:
  - csharp
  - vb
  name: ToBindingList()
  nameWithType: LocalView<TEntity>.ToBindingList()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.ToBindingList()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToBindingList
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/LocalView.cs
    startLine: 300
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns an <see cref=\"!:BindingList&lt;T&gt;\"></see> implementation that stays in sync with this collection.\n"
  example: []
  syntax:
    content: public virtual BindingList<TEntity> ToBindingList()
    content.vb: Public Overridable Function ToBindingList As BindingList(Of TEntity)
    return:
      type: BindingList{{TEntity}}
      description: 'The binding list. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList*
  nameWithType.vb: LocalView(Of TEntity).ToBindingList()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).ToBindingList()
references:
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.DbSet`1.Local
  commentId: P:Microsoft.EntityFrameworkCore.DbSet`1.Local
  isExternal: false
  name: Local
  nameWithType: DbSet<TEntity>.Local
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>.Local
  nameWithType.vb: DbSet(Of TEntity).Local
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity).Local
- uid: Microsoft.EntityFrameworkCore.EntityState.Added
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Added
- uid: Microsoft.EntityFrameworkCore.EntityState.Deleted
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Deleted
- uid: Microsoft.EntityFrameworkCore.EntityState.Detached
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Detached
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{{TEntity}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TEntity>
  nameWithType: ICollection<TEntity>
  fullName: System.Collections.Generic.ICollection<TEntity>
  nameWithType.vb: ICollection(Of TEntity)
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity)
  name.vb: ICollection(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{{TEntity},System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  name: OrderByOrdinal<TEntity>(Func<TEntity, String>)
  nameWithType: EnumerableExtensions.OrderByOrdinal<TEntity>(Func<TEntity, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TEntity>(System.Func<TEntity, System.String>)
  nameWithType.vb: EnumerableExtensions.OrderByOrdinal(Of TEntity)(Func(Of TEntity, String))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TEntity)(System.Func(Of TEntity, System.String))
  name.vb: OrderByOrdinal(Of TEntity)(Func(Of TEntity, String))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{``0,System.String})
    name: OrderByOrdinal<TEntity>
    nameWithType: EnumerableExtensions.OrderByOrdinal<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{``0,System.String})
    name: OrderByOrdinal(Of TEntity)
    nameWithType: EnumerableExtensions.OrderByOrdinal(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Func{{TEntity},{TEntity},System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: Distinct<TEntity>(Func<TEntity, TEntity, Boolean>)
  nameWithType: EnumerableExtensions.Distinct<TEntity>(Func<TEntity, TEntity, Boolean>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct<TEntity>(System.Func<TEntity, TEntity, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.Distinct(Of TEntity)(Func(Of TEntity, TEntity, Boolean))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct(Of TEntity)(System.Func(Of TEntity, TEntity, System.Boolean))
  name.vb: Distinct(Of TEntity)(Func(Of TEntity, TEntity, Boolean))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Func{``0,``0,System.Boolean})
    name: Distinct<TEntity>
    nameWithType: EnumerableExtensions.Distinct<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Func{``0,``0,System.Boolean})
    name: Distinct(Of TEntity)
    nameWithType: EnumerableExtensions.Distinct(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
  name: Join(String)
  nameWithType: EnumerableExtensions.Join(String)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.String)
    name: Join
    nameWithType: EnumerableExtensions.Join
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.String)
    name: Join
    nameWithType: EnumerableExtensions.Join
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{{TEntity}})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: StructuralSequenceEqual<TEntity>(IEnumerable<TEntity>)
  nameWithType: EnumerableExtensions.StructuralSequenceEqual<TEntity>(IEnumerable<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  nameWithType.vb: EnumerableExtensions.StructuralSequenceEqual(Of TEntity)(IEnumerable(Of TEntity))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: StructuralSequenceEqual(Of TEntity)(IEnumerable(Of TEntity))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual<TEntity>
    nameWithType: EnumerableExtensions.StructuralSequenceEqual<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual(Of TEntity)
    nameWithType: EnumerableExtensions.StructuralSequenceEqual(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{{TEntity}})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: StartsWith<TEntity>(IEnumerable<TEntity>)
  nameWithType: EnumerableExtensions.StartsWith<TEntity>(IEnumerable<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TEntity>(System.Collections.Generic.IEnumerable<TEntity>)
  nameWithType.vb: EnumerableExtensions.StartsWith(Of TEntity)(IEnumerable(Of TEntity))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TEntity)(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: StartsWith(Of TEntity)(IEnumerable(Of TEntity))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0})
    name: StartsWith<TEntity>
    nameWithType: EnumerableExtensions.StartsWith<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0})
    name: StartsWith(Of TEntity)
    nameWithType: EnumerableExtensions.StartsWith(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  definition: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  name: NullChecked<TEntity>()
  nameWithType: Extensions.NullChecked<TEntity>()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<TEntity>()
  nameWithType.vb: Extensions.NullChecked(Of TEntity)()
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of TEntity)()
  name.vb: NullChecked(Of TEntity)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
    name: NullChecked<TEntity>
    nameWithType: Extensions.NullChecked<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
    name: NullChecked(Of TEntity)
    nameWithType: Extensions.NullChecked(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{{TEntity}})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  definition: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name: ForEach<TEntity>(Action<TEntity>)
  nameWithType: Extensions.ForEach<TEntity>(Action<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<TEntity>(System.Action<TEntity>)
  nameWithType.vb: Extensions.ForEach(Of TEntity)(Action(Of TEntity))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of TEntity)(System.Action(Of TEntity))
  name.vb: ForEach(Of TEntity)(Action(Of TEntity))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{``0})
    name: ForEach<TEntity>
    nameWithType: Extensions.ForEach<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{``0})
    name: ForEach(Of TEntity)
    nameWithType: Extensions.ForEach(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  isExternal: true
  name: OrderByOrdinal<TSource>(IEnumerable<TSource>, Func<TSource, String>)
  nameWithType: EnumerableExtensions.OrderByOrdinal<TSource>(IEnumerable<TSource>, Func<TSource, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.String>)
  nameWithType.vb: EnumerableExtensions.OrderByOrdinal(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.String))
  name.vb: OrderByOrdinal(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
    name: OrderByOrdinal<TSource>
    nameWithType: EnumerableExtensions.OrderByOrdinal<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
    name: OrderByOrdinal(Of TSource)
    nameWithType: EnumerableExtensions.OrderByOrdinal(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: Distinct<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: EnumerableExtensions.Distinct<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.Distinct(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: Distinct(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Distinct<T>
    nameWithType: EnumerableExtensions.Distinct<T>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: Distinct(Of T)
    nameWithType: EnumerableExtensions.Distinct(Of T)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Distinct(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
  isExternal: true
  name: Join(IEnumerable<Object>, String)
  nameWithType: EnumerableExtensions.Join(IEnumerable<Object>, String)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable<System.Object>, System.String)
  nameWithType.vb: EnumerableExtensions.Join(IEnumerable(Of Object), String)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable(Of System.Object), System.String)
  name.vb: Join(IEnumerable(Of Object), String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
    name: Join
    nameWithType: EnumerableExtensions.Join
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.Object},System.String)
    name: Join
    nameWithType: EnumerableExtensions.Join
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: StructuralSequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.StructuralSequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.StructuralSequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: StructuralSequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual<TSource>
    nameWithType: EnumerableExtensions.StructuralSequenceEqual<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual(Of TSource)
    nameWithType: EnumerableExtensions.StructuralSequenceEqual(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: StartsWith<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.StartsWith<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.StartsWith(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: StartsWith(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StartsWith<TSource>
    nameWithType: EnumerableExtensions.StartsWith<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StartsWith(Of TSource)
    nameWithType: EnumerableExtensions.StartsWith(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: NullChecked<T>(IEnumerable<T>)
  nameWithType: Extensions.NullChecked<T>(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Extensions.NullChecked(Of T)(IEnumerable(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: NullChecked(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
    name: NullChecked<T>
    nameWithType: Extensions.NullChecked<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
    name: NullChecked(Of T)
    nameWithType: Extensions.NullChecked(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  parent: Microsoft.EntityFrameworkCore.Specification.Tests
  isExternal: false
  name: Extensions
  nameWithType: Extensions
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType: Extensions.ForEach<T>(IEnumerable<T>, Action<T>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  nameWithType.vb: Extensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach<T>
    nameWithType: Extensions.ForEach<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach(Of T)
    nameWithType: Extensions.ForEach(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Specification.Tests
  commentId: N:Microsoft.EntityFrameworkCore.Specification.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Specification.Tests
  nameWithType: Microsoft.EntityFrameworkCore.Specification.Tests
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.#ctor
  isExternal: false
  name: LocalView
  nameWithType: LocalView<TEntity>.LocalView
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.LocalView
  nameWithType.vb: LocalView(Of TEntity).LocalView
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).LocalView
- uid: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.DbSet{``0}
  parent: Microsoft.EntityFrameworkCore
  definition: Microsoft.EntityFrameworkCore.DbSet`1
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbSet`1
  commentId: T:Microsoft.EntityFrameworkCore.DbSet`1
  isExternal: false
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: LocalView<TEntity>.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.GetEnumerator
  nameWithType.vb: LocalView(Of TEntity).GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TEntity}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TEntity}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TEntity>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TEntity).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of TEntity).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TEntity>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TEntity).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TEntity).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TEntity>
  nameWithType: IEnumerator<TEntity>
  fullName: System.Collections.Generic.IEnumerator<TEntity>
  nameWithType.vb: IEnumerator(Of TEntity)
  fullname.vb: System.Collections.Generic.IEnumerator(Of TEntity)
  name.vb: IEnumerator(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: LocalView<TEntity>.IEnumerable.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: LocalView(Of TEntity).System.Collections.IEnumerable.GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Add
  isExternal: false
  name: Add
  nameWithType: LocalView<TEntity>.Add
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Add
  nameWithType.vb: LocalView(Of TEntity).Add
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Add
- uid: System.Collections.Generic.ICollection{{TEntity}}.Add({TEntity})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(TEntity)
  nameWithType: ICollection<TEntity>.Add(TEntity)
  fullName: System.Collections.Generic.ICollection<TEntity>.Add(TEntity)
  nameWithType.vb: ICollection(Of TEntity).Add(TEntity)
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).Add(TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<TEntity>.Add
    fullName: System.Collections.Generic.ICollection<TEntity>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of TEntity).Add
    fullName: System.Collections.Generic.ICollection(Of TEntity).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  isExternal: false
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Clear
  isExternal: false
  name: Clear
  nameWithType: LocalView<TEntity>.Clear
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Clear
  nameWithType.vb: LocalView(Of TEntity).Clear
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Clear
- uid: System.Collections.Generic.ICollection{{TEntity}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<TEntity>.Clear()
  fullName: System.Collections.Generic.ICollection<TEntity>.Clear()
  nameWithType.vb: ICollection(Of TEntity).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<TEntity>.Clear
    fullName: System.Collections.Generic.ICollection<TEntity>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of TEntity).Clear
    fullName: System.Collections.Generic.ICollection(Of TEntity).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Contains
  isExternal: false
  name: Contains
  nameWithType: LocalView<TEntity>.Contains
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Contains
  nameWithType.vb: LocalView(Of TEntity).Contains
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Contains
- uid: System.Collections.Generic.ICollection{{TEntity}}.Contains({TEntity})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(TEntity)
  nameWithType: ICollection<TEntity>.Contains(TEntity)
  fullName: System.Collections.Generic.ICollection<TEntity>.Contains(TEntity)
  nameWithType.vb: ICollection(Of TEntity).Contains(TEntity)
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).Contains(TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<TEntity>.Contains
    fullName: System.Collections.Generic.ICollection<TEntity>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of TEntity).Contains
    fullName: System.Collections.Generic.ICollection(Of TEntity).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: LocalView<TEntity>.CopyTo
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.CopyTo
  nameWithType.vb: LocalView(Of TEntity).CopyTo
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).CopyTo
- uid: System.Collections.Generic.ICollection{{TEntity}}.CopyTo({TEntity}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TEntity[], Int32)
  nameWithType: ICollection<TEntity>.CopyTo(TEntity[], Int32)
  fullName: System.Collections.Generic.ICollection<TEntity>.CopyTo(TEntity[], System.Int32)
  nameWithType.vb: ICollection(Of TEntity).CopyTo(TEntity(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).CopyTo(TEntity(), System.Int32)
  name.vb: CopyTo(TEntity(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<TEntity>.CopyTo
    fullName: System.Collections.Generic.ICollection<TEntity>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of TEntity).CopyTo
    fullName: System.Collections.Generic.ICollection(Of TEntity).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEntity}[]'
  name: TEntity[]
  nameWithType: TEntity[]
  fullName: TEntity[]
  nameWithType.vb: TEntity()
  fullname.vb: TEntity()
  name.vb: TEntity()
  spec.csharp:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Remove
  isExternal: false
  name: Remove
  nameWithType: LocalView<TEntity>.Remove
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Remove
  nameWithType.vb: LocalView(Of TEntity).Remove
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Remove
- uid: System.Collections.Generic.ICollection{{TEntity}}.Remove({TEntity})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(TEntity)
  nameWithType: ICollection<TEntity>.Remove(TEntity)
  fullName: System.Collections.Generic.ICollection<TEntity>.Remove(TEntity)
  nameWithType.vb: ICollection(Of TEntity).Remove(TEntity)
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).Remove(TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<TEntity>.Remove
    fullName: System.Collections.Generic.ICollection<TEntity>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of TEntity).Remove
    fullName: System.Collections.Generic.ICollection(Of TEntity).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
  isExternal: false
  name: Count
  nameWithType: LocalView<TEntity>.Count
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.Count
  nameWithType.vb: LocalView(Of TEntity).Count
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).Count
- uid: System.Collections.Generic.ICollection{{TEntity}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<TEntity>.Count
  fullName: System.Collections.Generic.ICollection<TEntity>.Count
  nameWithType.vb: ICollection(Of TEntity).Count
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: LocalView<TEntity>.IsReadOnly
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.IsReadOnly
  nameWithType.vb: LocalView(Of TEntity).IsReadOnly
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).IsReadOnly
- uid: System.Collections.Generic.ICollection{{TEntity}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{TEntity}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<TEntity>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<TEntity>.IsReadOnly
  nameWithType.vb: ICollection(Of TEntity).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of TEntity).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.Count
- uid: PropertyChangedEventHandler
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: PropertyChangedEventHandler
- uid: PropertyChangingEventHandler
  isExternal: true
  name: PropertyChangingEventHandler
  nameWithType: PropertyChangingEventHandler
  fullName: PropertyChangingEventHandler
- uid: NotifyCollectionChangedEventHandler
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: NotifyCollectionChangedEventHandler
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanged
  isExternal: false
  name: OnPropertyChanged
  nameWithType: LocalView<TEntity>.OnPropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnPropertyChanged
  nameWithType.vb: LocalView(Of TEntity).OnPropertyChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnPropertyChanged
- uid: PropertyChangedEventArgs
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: PropertyChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.PropertyChanging
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnPropertyChanging
  isExternal: false
  name: OnPropertyChanging
  nameWithType: LocalView<TEntity>.OnPropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnPropertyChanging
  nameWithType.vb: LocalView(Of TEntity).OnPropertyChanging
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnPropertyChanging
- uid: PropertyChangingEventArgs
  isExternal: true
  name: PropertyChangingEventArgs
  nameWithType: PropertyChangingEventArgs
  fullName: PropertyChangingEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.CollectionChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.OnCollectionChanged
  isExternal: false
  name: OnCollectionChanged
  nameWithType: LocalView<TEntity>.OnCollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.OnCollectionChanged
  nameWithType.vb: LocalView(Of TEntity).OnCollectionChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).OnCollectionChanged
- uid: NotifyCollectionChangedEventArgs
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: NotifyCollectionChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1.ToBindingList
  isExternal: false
  name: ToBindingList
  nameWithType: LocalView<TEntity>.ToBindingList
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView<TEntity>.ToBindingList
  nameWithType.vb: LocalView(Of TEntity).ToBindingList
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.LocalView(Of TEntity).ToBindingList
- uid: BindingList{{TEntity}}
  commentId: '!:BindingList{`0}'
  definition: BindingList`1
  name: BindingList<TEntity>
  nameWithType: BindingList<TEntity>
  fullName: BindingList<TEntity>
  nameWithType.vb: BindingList(Of TEntity)
  fullname.vb: BindingList(Of TEntity)
  name.vb: BindingList(Of TEntity)
  spec.csharp:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: BindingList`1
  isExternal: true
  name: BindingList<>
  nameWithType: BindingList<>
  fullName: BindingList<>
  nameWithType.vb: BindingList(Of )
  fullname.vb: BindingList(Of )
  name.vb: BindingList(Of )
  spec.csharp:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
