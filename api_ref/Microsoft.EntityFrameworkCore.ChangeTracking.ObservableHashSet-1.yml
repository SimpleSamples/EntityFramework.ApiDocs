### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  id: ObservableHashSet`1
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[])
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged(PropertyChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging(PropertyChangingEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess
  - Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: ObservableHashSet<T>
  nameWithType: ObservableHashSet<T>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ObservableHashSet
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nA hash set that implements the interfaces required for Entity Framework to use notification based change tracking\nfor a collection navigation property.\n"
  example: []
  syntax:
    content: 'public class ObservableHashSet<T> : ISet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging'
    content.vb: >-
      Public Class ObservableHashSet(Of T)
          Inherits ISet(Of T)
          Implements IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, INotifyPropertyChanging
    typeParameters:
    - id: T
      description: 'The type of elements in the hash set. '
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  extensionMethods:
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{{T},System.String})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
  - System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{{T}})
  nameWithType.vb: ObservableHashSet(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T)
  name.vb: ObservableHashSet(Of T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ObservableHashSet()
  nameWithType: ObservableHashSet<T>.ObservableHashSet()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ObservableHashSet()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601\" data-throw-if-not-resolved=\"false\"></xref> class\nthat is empty and uses the default equality comparer for the set type.\n"
  example: []
  syntax:
    content: public ObservableHashSet()
    content.vb: Public Sub New
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor*
  nameWithType.vb: ObservableHashSet(Of T).ObservableHashSet()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ObservableHashSet()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ObservableHashSet(IEqualityComparer<T>)
  nameWithType: ObservableHashSet<T>.ObservableHashSet(IEqualityComparer<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ObservableHashSet(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601\" data-throw-if-not-resolved=\"false\"></xref> class\nthat is empty and uses the specified equality comparer for the set type.\n"
  example: []
  syntax:
    content: public ObservableHashSet(IEqualityComparer<T> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: "\nThe <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when\ncomparing values in the set, or null to use the default <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref>\nimplementation for the set type.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor*
  nameWithType.vb: ObservableHashSet(Of T).ObservableHashSet(IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ObservableHashSet(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: ObservableHashSet(IEqualityComparer(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ObservableHashSet(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.ObservableHashSet(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ObservableHashSet(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 57
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601\" data-throw-if-not-resolved=\"false\"></xref> class\nthat uses the default equality comparer for the set type, contains elements copied\nfrom the specified collection, and has sufficient capacity to accommodate the\nnumber of elements copied.\n"
  example: []
  syntax:
    content: public ObservableHashSet(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection whose elements are copied to the new set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor*
  nameWithType.vb: ObservableHashSet(Of T).ObservableHashSet(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ObservableHashSet(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ObservableHashSet(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ObservableHashSet(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableHashSet<T>.ObservableHashSet(IEnumerable<T>, IEqualityComparer<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ObservableHashSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 74
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601\" data-throw-if-not-resolved=\"false\"></xref> class\nthat uses the specified equality comparer for the set type, contains elements\ncopied from the specified collection, and has sufficient capacity to accommodate\nthe number of elements copied.\n"
  example: []
  syntax:
    content: public ObservableHashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection whose elements are copied to the new set. '
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: "\nThe <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when\ncomparing values in the set, or null to use the default <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref>\nimplementation for the set type.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor*
  nameWithType.vb: ObservableHashSet(Of T).ObservableHashSet(IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ObservableHashSet(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: ObservableHashSet(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged
  id: PropertyChanged
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ObservableHashSet<T>.PropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.PropertyChanged
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 82
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when a property of this hash set (such as <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601.Count\" data-throw-if-not-resolved=\"false\"></xref>) changes.\n"
  example: []
  syntax:
    content: public virtual event PropertyChangedEventHandler PropertyChanged
    content.vb: Public Overridable Event PropertyChanged As PropertyChangedEventHandler
    return:
      type: PropertyChangedEventHandler
  nameWithType.vb: ObservableHashSet(Of T).PropertyChanged
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).PropertyChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging
  id: PropertyChanging
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: PropertyChanging
  nameWithType: ObservableHashSet<T>.PropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.PropertyChanging
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyChanging
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 87
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when a property of this hash set (such as <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601.Count\" data-throw-if-not-resolved=\"false\"></xref>) is changing.\n"
  example: []
  syntax:
    content: public virtual event PropertyChangingEventHandler PropertyChanging
    content.vb: Public Overridable Event PropertyChanging As PropertyChangingEventHandler
    return:
      type: PropertyChangingEventHandler
  nameWithType.vb: ObservableHashSet(Of T).PropertyChanging
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).PropertyChanging
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged
  id: CollectionChanged
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ObservableHashSet<T>.CollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CollectionChanged
  type: Event
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CollectionChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 92
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nOccurs when the contents of the hash set changes.\n"
  example: []
  syntax:
    content: public virtual event NotifyCollectionChangedEventHandler CollectionChanged
    content.vb: Public Overridable Event CollectionChanged As NotifyCollectionChangedEventHandler
    return:
      type: NotifyCollectionChangedEventHandler
  nameWithType.vb: ObservableHashSet(Of T).CollectionChanged
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CollectionChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: ObservableHashSet<T>.ICollection<T>.Add(T)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add*
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear
  id: Clear
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ObservableHashSet<T>.Clear()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Clear
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 99
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRemoves all elements from the hash set.\n"
  example: []
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear*
  nameWithType.vb: ObservableHashSet(Of T).Clear()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Clear()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains(`0)
  id: Contains(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ObservableHashSet<T>.Contains(T)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Contains
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set object contains the\nspecified element.\n"
  example: []
  syntax:
    content: public virtual bool Contains(T item)
    content.vb: Public Overridable Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The element to locate in the hash set.
    return:
      type: System.Boolean
      description: "\nTrue if the hash set contains the specified element; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains*
  nameWithType.vb: ObservableHashSet(Of T).Contains(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Contains(T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: ObservableHashSet<T>.CopyTo(T[], Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CopyTo
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 135
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCopies the elements of the hash set to an array, starting at the specified array index.\n"
  example: []
  syntax:
    content: public virtual void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\nThe one-dimensional array that is the destination of the elements copied from\nthe hash set. The array must have zero-based indexing.\n"
    - id: arrayIndex
      type: System.Int32
      description: 'The zero-based index in array at which copying begins. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo*
  nameWithType.vb: ObservableHashSet(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove(`0)
  id: Remove(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ObservableHashSet<T>.Remove(T)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Remove
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 144
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRemoves the specified element from the hash set.\n"
  example: []
  syntax:
    content: public virtual bool Remove(T item)
    content.vb: Public Overridable Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: 'The element to remove. '
    return:
      type: System.Boolean
      description: "\nTrue if the element is successfully found and removed; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove*
  nameWithType.vb: ObservableHashSet(Of T).Remove(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Remove(T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  id: Count
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ObservableHashSet<T>.Count
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Count
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 165
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the number of elements that are contained in the hash set.\n"
  example: []
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count*
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  nameWithType.vb: ObservableHashSet(Of T).Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Count
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ObservableHashSet<T>.IsReadOnly
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsReadOnly
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 170
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets a value indicating whether the hash set is read-only.\n"
  example: []
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly*
  nameWithType.vb: ObservableHashSet(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ObservableHashSet<T>.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 178
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns an enumerator that iterates through the hash set.\n"
  example: []
  syntax:
    content: public virtual HashSet<T>.Enumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As HashSet(Of T).Enumerator
    return:
      type: System.Collections.Generic.HashSet{{T}}.Enumerator
      description: "\nAn enumerator for the hash set.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator*
  nameWithType.vb: ObservableHashSet(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).GetEnumerator()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ObservableHashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 180
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableHashSet<T>.IEnumerable.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 182
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add(`0)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add(`0)
  id: Add(`0)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ObservableHashSet<T>.Add(T)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Add
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 191
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nAdds the specified element to the hash set.\n"
  example: []
  syntax:
    content: public virtual bool Add(T item)
    content.vb: Public Overridable Function Add(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: 'The element to add to the set. '
    return:
      type: System.Boolean
      description: "\ntrue if the element is added to the hash set; false if the element is already present.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add*
  nameWithType.vb: ObservableHashSet(Of T).Add(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Add(T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: UnionWith(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.UnionWith(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UnionWith
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 213
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nModifies the hash set to contain all elements that are present in itself, the specified collection, or both.\n"
  example: []
  syntax:
    content: public virtual void UnionWith(IEnumerable<T> other)
    content.vb: Public Overridable Sub UnionWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith*
  nameWithType.vb: ObservableHashSet(Of T).UnionWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.IntersectWith(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IntersectWith
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 240
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nModifies the current hash set to contain only\nelements that are present in that object and in the specified collection.\n"
  example: []
  syntax:
    content: public virtual void IntersectWith(IEnumerable<T> other)
    content.vb: Public Overridable Sub IntersectWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith*
  nameWithType.vb: ObservableHashSet(Of T).IntersectWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.ExceptWith(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExceptWith
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 266
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRemoves all elements in the specified collection from the hash set.\n"
  example: []
  syntax:
    content: public virtual void ExceptWith(IEnumerable<T> other)
    content.vb: Public Overridable Sub ExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection of items to remove from the current hash set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith*
  nameWithType.vb: ObservableHashSet(Of T).ExceptWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SymmetricExceptWith
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 293
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nModifies the current hash set to contain only elements that are present either in that\nobject or in the specified collection, but not both.\n"
  example: []
  syntax:
    content: public virtual void SymmetricExceptWith(IEnumerable<T> other)
    content.vb: Public Overridable Sub SymmetricExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith*
  nameWithType.vb: ObservableHashSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsSubsetOf
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 324
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set is a subset of the specified collection.\n"
  example: []
  syntax:
    content: public virtual bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Overridable Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set is a subset of other; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf*
  nameWithType.vb: ObservableHashSet(Of T).IsSubsetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsProperSubsetOf
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 333
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set is a proper subset of the specified collection.\n"
  example: []
  syntax:
    content: public virtual bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Overridable Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set is a proper subset of other; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf*
  nameWithType.vb: ObservableHashSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsSupersetOf
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 342
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set is a superset of the specified collection.\n"
  example: []
  syntax:
    content: public virtual bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Overridable Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set is a superset of other; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf*
  nameWithType.vb: ObservableHashSet(Of T).IsSupersetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsProperSupersetOf
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 351
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set is a proper superset of the specified collection.\n"
  example: []
  syntax:
    content: public virtual bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Overridable Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set is a proper superset of other; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf*
  nameWithType.vb: ObservableHashSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Overlaps(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.Overlaps(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Overlaps
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 360
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the current System.Collections.Generic.HashSet`1 object and a specified collection share common elements.\n"
  example: []
  syntax:
    content: public virtual bool Overlaps(IEnumerable<T> other)
    content.vb: Public Overridable Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set and other share at least one common element; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps*
  nameWithType.vb: ObservableHashSet(Of T).Overlaps(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: SetEquals(IEnumerable<T>)
  nameWithType: ObservableHashSet<T>.SetEquals(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetEquals
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 369
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nDetermines whether the hash set and the specified collection contain the same elements.\n"
  example: []
  syntax:
    content: public virtual bool SetEquals(IEnumerable<T> other)
    content.vb: Public Overridable Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'The collection to compare to the current hash set. '
    return:
      type: System.Boolean
      description: "\nTrue if the hash set is equal to other; otherwise, false.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals*
  nameWithType.vb: ObservableHashSet(Of T).SetEquals(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[])
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  nameWithType: ObservableHashSet<T>.CopyTo(T[])
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CopyTo
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 378
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCopies the elements of the hash set to an array.\n"
  example: []
  syntax:
    content: public virtual void CopyTo(T[] array)
    content.vb: Public Overridable Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: "\nThe one-dimensional array that is the destination of the elements copied from\nthe hash set. The array must have zero-based indexing.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo*
  nameWithType.vb: ObservableHashSet(Of T).CopyTo(T())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32, Int32)
  nameWithType: ObservableHashSet<T>.CopyTo(T[], Int32, Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CopyTo
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 389
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCopies the specified number of elements of the hash set to an array, starting at the specified array index.\n"
  example: []
  syntax:
    content: public virtual void CopyTo(T[] array, int arrayIndex, int count)
    content.vb: Public Overridable Sub CopyTo(array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\nThe one-dimensional array that is the destination of the elements copied from\nthe hash set. The array must have zero-based indexing.\n"
    - id: arrayIndex
      type: System.Int32
      description: 'The zero-based index in array at which copying begins. '
    - id: count
      type: System.Int32
      description: 'The number of elements to copy to array. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo*
  nameWithType.vb: ObservableHashSet(Of T).CopyTo(T(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  name.vb: CopyTo(T(), Int32, Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: RemoveWhere(Predicate<T>)
  nameWithType: ObservableHashSet<T>.RemoveWhere(Predicate<T>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.RemoveWhere(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveWhere
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 399
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRemoves all elements that match the conditions defined by the specified predicate\nfrom the hash set.\n"
  example: []
  syntax:
    content: public virtual int RemoveWhere(Predicate<T> match)
    content.vb: Public Overridable Function RemoveWhere(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: "\nThe <xref href=\"System.Predicate%601\" data-throw-if-not-resolved=\"false\"></xref> delegate that defines the conditions of the elements to remove.\n"
    return:
      type: System.Int32
      description: 'The number of elements that were removed from the hash set. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere*
  nameWithType.vb: ObservableHashSet(Of T).RemoveWhere(Predicate(Of T))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).RemoveWhere(System.Predicate(Of T))
  name.vb: RemoveWhere(Predicate(Of T))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer
  id: Comparer
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: Comparer
  nameWithType: ObservableHashSet<T>.Comparer
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Comparer
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Comparer
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 426
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> object that is used to determine equality for the values in the set.\n"
  example: []
  syntax:
    content: public virtual IEqualityComparer<T> Comparer { get; }
    content.vb: Public Overridable ReadOnly Property Comparer As IEqualityComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{T}}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer*
  nameWithType.vb: ObservableHashSet(Of T).Comparer
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Comparer
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess
  id: TrimExcess
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  nameWithType: ObservableHashSet<T>.TrimExcess()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TrimExcess
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 432
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nSets the capacity of the hash set to the actual number of elements it contains, rounded up to a nearby,\nimplementation-specific value.\n"
  example: []
  syntax:
    content: public virtual void TrimExcess()
    content.vb: Public Overridable Sub TrimExcess
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess*
  nameWithType.vb: ObservableHashSet(Of T).TrimExcess()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).TrimExcess()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged(PropertyChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged(PropertyChangedEventArgs)
  id: OnPropertyChanged(PropertyChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(PropertyChangedEventArgs)
  nameWithType: ObservableHashSet<T>.OnPropertyChanged(PropertyChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnPropertyChanged(PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnPropertyChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 438
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
    content.vb: Protected Overridable Sub OnPropertyChanged(e As PropertyChangedEventArgs)
    parameters:
    - id: e
      type: PropertyChangedEventArgs
      description: 'Details of the property that changed. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged*
  nameWithType.vb: ObservableHashSet(Of T).OnPropertyChanged(PropertyChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnPropertyChanged(PropertyChangedEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging(PropertyChangingEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging(PropertyChangingEventArgs)
  id: OnPropertyChanging(PropertyChangingEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanging(PropertyChangingEventArgs)
  nameWithType: ObservableHashSet<T>.OnPropertyChanging(PropertyChangingEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnPropertyChanging(PropertyChangingEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnPropertyChanging
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 445
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601.PropertyChanging\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanging(PropertyChangingEventArgs e)
    content.vb: Protected Overridable Sub OnPropertyChanging(e As PropertyChangingEventArgs)
    parameters:
    - id: e
      type: PropertyChangingEventArgs
      description: 'Details of the property that is changing. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging*
  nameWithType.vb: ObservableHashSet(Of T).OnPropertyChanging(PropertyChangingEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnPropertyChanging(PropertyChangingEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableHashSet<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnCollectionChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 462
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nRaises the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet%601.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    content.vb: Protected Overridable Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
    parameters:
    - id: e
      type: NotifyCollectionChangedEventArgs
      description: 'Details of the change. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged*
  nameWithType.vb: ObservableHashSet(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList
  id: ToBindingList
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  langs:
  - csharp
  - vb
  name: ToBindingList()
  nameWithType: ObservableHashSet<T>.ToBindingList()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ToBindingList()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToBindingList
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/ObservableHashSet.cs
    startLine: 470
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nReturns an <see cref=\"!:BindingList&lt;T&gt;\"></see> implementation that stays in sync with this collection.\n"
  example: []
  syntax:
    content: public virtual BindingList<T> ToBindingList()
    content.vb: Public Overridable Function ToBindingList As BindingList(Of T)
    return:
      type: BindingList{{T}}
      description: 'The binding list. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList*
  nameWithType.vb: ObservableHashSet(Of T).ToBindingList()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ToBindingList()
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{{T},System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  name: OrderByOrdinal<T>(Func<T, String>)
  nameWithType: EnumerableExtensions.OrderByOrdinal<T>(Func<T, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<T>(System.Func<T, System.String>)
  nameWithType.vb: EnumerableExtensions.OrderByOrdinal(Of T)(Func(Of T, String))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of T)(System.Func(Of T, System.String))
  name.vb: OrderByOrdinal(Of T)(Func(Of T, String))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{``0,System.String})
    name: OrderByOrdinal<T>
    nameWithType: EnumerableExtensions.OrderByOrdinal<T>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Func{``0,System.String})
    name: OrderByOrdinal(Of T)
    nameWithType: EnumerableExtensions.OrderByOrdinal(Of T)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: StructuralSequenceEqual<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.StructuralSequenceEqual<T>(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.StructuralSequenceEqual(Of T)(IEnumerable(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: StructuralSequenceEqual(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual<T>
    nameWithType: EnumerableExtensions.StructuralSequenceEqual<T>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual(Of T)
    nameWithType: EnumerableExtensions.StructuralSequenceEqual(Of T)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  definition: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: StartsWith<T>(IEnumerable<T>)
  nameWithType: EnumerableExtensions.StartsWith<T>(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.StartsWith(Of T)(IEnumerable(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: StartsWith(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0})
    name: StartsWith<T>
    nameWithType: EnumerableExtensions.StartsWith<T>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0})
    name: StartsWith(Of T)
    nameWithType: EnumerableExtensions.StartsWith(Of T)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  definition: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  name: NullChecked<TEntity>()
  nameWithType: Extensions.NullChecked<TEntity>()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<TEntity>()
  nameWithType.vb: Extensions.NullChecked(Of TEntity)()
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of TEntity)()
  name.vb: NullChecked(Of TEntity)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
    name: NullChecked<TEntity>
    nameWithType: Extensions.NullChecked<TEntity>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1
    name: NullChecked(Of TEntity)
    nameWithType: Extensions.NullChecked(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{{T}})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  definition: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name: ForEach<T>(Action<T>)
  nameWithType: Extensions.ForEach<T>(Action<T>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>(System.Action<T>)
  nameWithType.vb: Extensions.ForEach(Of T)(Action(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)(System.Action(Of T))
  name.vb: ForEach(Of T)(Action(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{``0})
    name: ForEach<T>
    nameWithType: Extensions.ForEach<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Action{``0})
    name: ForEach(Of T)
    nameWithType: Extensions.ForEach(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  isExternal: true
  name: OrderByOrdinal<TSource>(IEnumerable<TSource>, Func<TSource, String>)
  nameWithType: EnumerableExtensions.OrderByOrdinal<TSource>(IEnumerable<TSource>, Func<TSource, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.String>)
  nameWithType.vb: EnumerableExtensions.OrderByOrdinal(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.String))
  name.vb: OrderByOrdinal(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, String))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
    name: OrderByOrdinal<TSource>
    nameWithType: EnumerableExtensions.OrderByOrdinal<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
    name: OrderByOrdinal(Of TSource)
    nameWithType: EnumerableExtensions.OrderByOrdinal(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.OrderByOrdinal(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: StructuralSequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.StructuralSequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.StructuralSequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: StructuralSequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual<TSource>
    nameWithType: EnumerableExtensions.StructuralSequenceEqual<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StructuralSequenceEqual(Of TSource)
    nameWithType: EnumerableExtensions.StructuralSequenceEqual(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StructuralSequenceEqual(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: StartsWith<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: EnumerableExtensions.StartsWith<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: EnumerableExtensions.StartsWith(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: StartsWith(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StartsWith<TSource>
    nameWithType: EnumerableExtensions.StartsWith<TSource>
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: StartsWith(Of TSource)
    nameWithType: EnumerableExtensions.StartsWith(Of TSource)
    fullName: Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions.StartsWith(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: NullChecked<T>(IEnumerable<T>)
  nameWithType: Extensions.NullChecked<T>(IEnumerable<T>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Extensions.NullChecked(Of T)(IEnumerable(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: NullChecked(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
    name: NullChecked<T>
    nameWithType: Extensions.NullChecked<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked``1(System.Collections.Generic.IEnumerable{``0})
    name: NullChecked(Of T)
    nameWithType: Extensions.NullChecked(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.NullChecked(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
  parent: Microsoft.EntityFrameworkCore.Specification.Tests
  isExternal: false
  name: Extensions
  nameWithType: Extensions
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType: Extensions.ForEach<T>(IEnumerable<T>, Action<T>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  nameWithType.vb: Extensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach<T>
    nameWithType: Extensions.ForEach<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
    name: ForEach(Of T)
    nameWithType: Extensions.ForEach(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.Extensions.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Specification.Tests
  commentId: N:Microsoft.EntityFrameworkCore.Specification.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Specification.Tests
  nameWithType: Microsoft.EntityFrameworkCore.Specification.Tests
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
  isExternal: false
  name: ObservableHashSet<T>
  nameWithType: ObservableHashSet<T>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>
  nameWithType.vb: ObservableHashSet(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T)
  name.vb: ObservableHashSet(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
    name: ObservableHashSet
    nameWithType: ObservableHashSet
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1
    name: ObservableHashSet
    nameWithType: ObservableHashSet
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.#ctor
  isExternal: false
  name: ObservableHashSet
  nameWithType: ObservableHashSet<T>.ObservableHashSet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ObservableHashSet
  nameWithType.vb: ObservableHashSet(Of T).ObservableHashSet
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ObservableHashSet
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  isExternal: false
  name: Count
  nameWithType: ObservableHashSet<T>.Count
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Count
  nameWithType.vb: ObservableHashSet(Of T).Count
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Count
- uid: PropertyChangedEventHandler
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: PropertyChangedEventHandler
- uid: PropertyChangingEventHandler
  isExternal: true
  name: PropertyChangingEventHandler
  nameWithType: PropertyChangingEventHandler
  fullName: PropertyChangingEventHandler
- uid: NotifyCollectionChangedEventHandler
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: NotifyCollectionChangedEventHandler
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add
  isExternal: false
  name: ICollection<T>.Add
  nameWithType: ObservableHashSet<T>.ICollection<T>.Add
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.Generic.ICollection<T>.Add
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Clear
  isExternal: false
  name: Clear
  nameWithType: ObservableHashSet<T>.Clear
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Clear
  nameWithType.vb: ObservableHashSet(Of T).Clear
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Clear
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Contains
  isExternal: false
  name: Contains
  nameWithType: ObservableHashSet<T>.Contains
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Contains
  nameWithType.vb: ObservableHashSet(Of T).Contains
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: ObservableHashSet<T>.CopyTo
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CopyTo
  nameWithType.vb: ObservableHashSet(Of T).CopyTo
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CopyTo
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Remove
  isExternal: false
  name: Remove
  nameWithType: ObservableHashSet<T>.Remove
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Remove
  nameWithType.vb: ObservableHashSet(Of T).Remove
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Remove
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Count
  isExternal: false
  name: Count
  nameWithType: ObservableHashSet<T>.Count
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Count
  nameWithType.vb: ObservableHashSet(Of T).Count
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: ObservableHashSet<T>.IsReadOnly
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsReadOnly
  nameWithType.vb: ObservableHashSet(Of T).IsReadOnly
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ObservableHashSet<T>.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.GetEnumerator
  nameWithType.vb: ObservableHashSet(Of T).GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).GetEnumerator
- uid: System.Collections.Generic.HashSet{{T}}.Enumerator
  commentId: T:System.Collections.Generic.HashSet{`0}.Enumerator
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1.Enumerator
  name: HashSet.Enumerator<>
  nameWithType: HashSet.Enumerator<>
  fullName: System.Collections.Generic.HashSet.Enumerator<>
  nameWithType.vb: HashSet.Enumerator(Of )
  fullname.vb: System.Collections.Generic.HashSet.Enumerator(Of )
  name.vb: HashSet.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    nameWithType: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    nameWithType: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Enumerator
  commentId: T:System.Collections.Generic.HashSet`1.Enumerator
  isExternal: true
  name: HashSet.Enumerator<>
  nameWithType: HashSet.Enumerator<>
  fullName: System.Collections.Generic.HashSet.Enumerator<>
  nameWithType.vb: HashSet.Enumerator(Of )
  fullname.vb: System.Collections.Generic.HashSet.Enumerator(Of )
  name.vb: HashSet.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    nameWithType: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    nameWithType: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: false
  name: IEnumerable<T>.GetEnumerator
  nameWithType: ObservableHashSet<T>.IEnumerable<T>.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: ObservableHashSet<T>.IEnumerable.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableHashSet(Of T).System.Collections.IEnumerable.GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Add
  isExternal: false
  name: Add
  nameWithType: ObservableHashSet<T>.Add
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Add
  nameWithType.vb: ObservableHashSet(Of T).Add
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Add
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.UnionWith
  isExternal: false
  name: UnionWith
  nameWithType: ObservableHashSet<T>.UnionWith
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.UnionWith
  nameWithType.vb: ObservableHashSet(Of T).UnionWith
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).UnionWith
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IntersectWith
  isExternal: false
  name: IntersectWith
  nameWithType: ObservableHashSet<T>.IntersectWith
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IntersectWith
  nameWithType.vb: ObservableHashSet(Of T).IntersectWith
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IntersectWith
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ExceptWith
  isExternal: false
  name: ExceptWith
  nameWithType: ObservableHashSet<T>.ExceptWith
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ExceptWith
  nameWithType.vb: ObservableHashSet(Of T).ExceptWith
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ExceptWith
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SymmetricExceptWith
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: ObservableHashSet<T>.SymmetricExceptWith
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.SymmetricExceptWith
  nameWithType.vb: ObservableHashSet(Of T).SymmetricExceptWith
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).SymmetricExceptWith
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSubsetOf
  isExternal: false
  name: IsSubsetOf
  nameWithType: ObservableHashSet<T>.IsSubsetOf
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsSubsetOf
  nameWithType.vb: ObservableHashSet(Of T).IsSubsetOf
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsSubsetOf
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSubsetOf
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: ObservableHashSet<T>.IsProperSubsetOf
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsProperSubsetOf
  nameWithType.vb: ObservableHashSet(Of T).IsProperSubsetOf
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsProperSubsetOf
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsSupersetOf
  isExternal: false
  name: IsSupersetOf
  nameWithType: ObservableHashSet<T>.IsSupersetOf
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsSupersetOf
  nameWithType.vb: ObservableHashSet(Of T).IsSupersetOf
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsSupersetOf
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.IsProperSupersetOf
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: ObservableHashSet<T>.IsProperSupersetOf
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.IsProperSupersetOf
  nameWithType.vb: ObservableHashSet(Of T).IsProperSupersetOf
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).IsProperSupersetOf
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Overlaps
  isExternal: false
  name: Overlaps
  nameWithType: ObservableHashSet<T>.Overlaps
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Overlaps
  nameWithType.vb: ObservableHashSet(Of T).Overlaps
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Overlaps
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.SetEquals
  isExternal: false
  name: SetEquals
  nameWithType: ObservableHashSet<T>.SetEquals
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.SetEquals
  nameWithType.vb: ObservableHashSet(Of T).SetEquals
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).SetEquals
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.RemoveWhere
  isExternal: false
  name: RemoveWhere
  nameWithType: ObservableHashSet<T>.RemoveWhere
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.RemoveWhere
  nameWithType.vb: ObservableHashSet(Of T).RemoveWhere
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).RemoveWhere
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{`0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.Comparer
  isExternal: false
  name: Comparer
  nameWithType: ObservableHashSet<T>.Comparer
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.Comparer
  nameWithType.vb: ObservableHashSet(Of T).Comparer
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).Comparer
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.TrimExcess
  isExternal: false
  name: TrimExcess
  nameWithType: ObservableHashSet<T>.TrimExcess
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.TrimExcess
  nameWithType.vb: ObservableHashSet(Of T).TrimExcess
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).TrimExcess
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanged
  isExternal: false
  name: PropertyChanged
  nameWithType: ObservableHashSet<T>.PropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.PropertyChanged
  nameWithType.vb: ObservableHashSet(Of T).PropertyChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).PropertyChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanged
  isExternal: false
  name: OnPropertyChanged
  nameWithType: ObservableHashSet<T>.OnPropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnPropertyChanged
  nameWithType.vb: ObservableHashSet(Of T).OnPropertyChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnPropertyChanged
- uid: PropertyChangedEventArgs
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: PropertyChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.PropertyChanging
  isExternal: false
  name: PropertyChanging
  nameWithType: ObservableHashSet<T>.PropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.PropertyChanging
  nameWithType.vb: ObservableHashSet(Of T).PropertyChanging
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).PropertyChanging
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnPropertyChanging
  isExternal: false
  name: OnPropertyChanging
  nameWithType: ObservableHashSet<T>.OnPropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnPropertyChanging
  nameWithType.vb: ObservableHashSet(Of T).OnPropertyChanging
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnPropertyChanging
- uid: PropertyChangingEventArgs
  isExternal: true
  name: PropertyChangingEventArgs
  nameWithType: PropertyChangingEventArgs
  fullName: PropertyChangingEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged
  commentId: E:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.CollectionChanged
  isExternal: false
  name: CollectionChanged
  nameWithType: ObservableHashSet<T>.CollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.CollectionChanged
  nameWithType.vb: ObservableHashSet(Of T).CollectionChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).CollectionChanged
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.OnCollectionChanged
  isExternal: false
  name: OnCollectionChanged
  nameWithType: ObservableHashSet<T>.OnCollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.OnCollectionChanged
  nameWithType.vb: ObservableHashSet(Of T).OnCollectionChanged
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).OnCollectionChanged
- uid: NotifyCollectionChangedEventArgs
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: NotifyCollectionChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1.ToBindingList
  isExternal: false
  name: ToBindingList
  nameWithType: ObservableHashSet<T>.ToBindingList
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet<T>.ToBindingList
  nameWithType.vb: ObservableHashSet(Of T).ToBindingList
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet(Of T).ToBindingList
- uid: BindingList{{T}}
  commentId: '!:BindingList{``0}'
  definition: BindingList`1
  name: BindingList<T>
  nameWithType: BindingList<T>
  fullName: BindingList<T>
  nameWithType.vb: BindingList(Of T)
  fullname.vb: BindingList(Of T)
  name.vb: BindingList(Of T)
  spec.csharp:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BindingList`1
  isExternal: true
  name: BindingList<>
  nameWithType: BindingList<>
  fullName: BindingList<>
  nameWithType.vb: BindingList(Of )
  fullname.vb: BindingList(Of )
  name.vb: BindingList(Of )
  spec.csharp:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: BindingList`1
    name: BindingList
    nameWithType: BindingList
    fullName: BindingList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
