### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  id: Snapshot
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders``1
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type[])
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Empty
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue``1(System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item(System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.MaxGenericTypes
  langs:
  - csharp
  - vb
  name: Snapshot
  nameWithType: Snapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Snapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public sealed class Snapshot : ISnapshot'
    content.vb: >-
      Public NotInheritable Class Snapshot
          Implements ISnapshot
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.MaxGenericTypes
  commentId: F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.MaxGenericTypes
  id: MaxGenericTypes
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: MaxGenericTypes
  nameWithType: Snapshot.MaxGenericTypes
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.MaxGenericTypes
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MaxGenericTypes
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const int MaxGenericTypes = 30
    content.vb: Public Const MaxGenericTypes As Integer = 30
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Empty
  commentId: F:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Empty
  id: Empty
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Snapshot.Empty
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Empty
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static ISnapshot Empty
    content.vb: Public Shared Empty As ISnapshot
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item(System.Int32)
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: Snapshot.Item[Int32]
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: this[]
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public object this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
  nameWithType.vb: Snapshot.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue``1(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue``1(System.Int32)
  id: GetValue``1(System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: GetValue<T>(Int32)
  nameWithType: Snapshot.GetValue<T>(Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public T GetValue<T>(int index)
    content.vb: Public Function GetValue(Of T)(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)
  nameWithType.vb: Snapshot.GetValue(Of T)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue(Of T)(System.Int32)
  name.vb: GetValue(Of T)(Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders``1
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders``1
  id: CreateReaders``1
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: CreateReaders<TSnapshot>()
  nameWithType: Snapshot.CreateReaders<TSnapshot>()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders<TSnapshot>()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateReaders
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Delegate[] CreateReaders<TSnapshot>()
    content.vb: 'Public Shared Function CreateReaders(Of TSnapshot) As '
    typeParameters:
    - id: TSnapshot
    return:
      type: System.Delegate[]
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders*
  nameWithType.vb: Snapshot.CreateReaders(Of TSnapshot)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders(Of TSnapshot)()
  name.vb: CreateReaders(Of TSnapshot)()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type[])
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type[])
  id: CreateSnapshotType(System.Type[])
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot
  langs:
  - csharp
  - vb
  name: CreateSnapshotType(Type[])
  nameWithType: Snapshot.CreateSnapshotType(Type[])
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateSnapshotType
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/Snapshot.cs
    startLine: 76
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Type CreateSnapshotType(Type[] types)
    content.vb: Public Shared Function CreateSnapshotType(types As Type()) As Type
    parameters:
    - id: types
      type: System.Type[]
    return:
      type: System.Type
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType*
  nameWithType.vb: Snapshot.CreateSnapshotType(Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType(System.Type())
  name.vb: CreateSnapshotType(Type())
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: ISnapshot
  nameWithType: ISnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item
  isExternal: false
  name: Item
  nameWithType: Snapshot.Item
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.Item
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  isExternal: true
  name: Item[Int32]
  nameWithType: ISnapshot.Item[Int32]
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item[System.Int32]
  nameWithType.vb: ISnapshot.Item(Int32)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
    name: Item
    nameWithType: ISnapshot.Item
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item(System.Int32)
    name: Item
    nameWithType: ISnapshot.Item
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue
  isExternal: false
  name: GetValue<T>
  nameWithType: Snapshot.GetValue<T>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue<T>
  nameWithType.vb: Snapshot.GetValue(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.GetValue(Of T)
  name.vb: GetValue(Of T)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  isExternal: true
  name: GetValue<T>(Int32)
  nameWithType: ISnapshot.GetValue<T>(Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue<T>(System.Int32)
  nameWithType.vb: ISnapshot.GetValue(Of T)(Int32)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue(Of T)(System.Int32)
  name.vb: GetValue(Of T)(Int32)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)
    name: GetValue<T>
    nameWithType: ISnapshot.GetValue<T>
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue``1(System.Int32)
    name: GetValue(Of T)
    nameWithType: ISnapshot.GetValue(Of T)
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot.GetValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders
  isExternal: false
  name: CreateReaders<TSnapshot>
  nameWithType: Snapshot.CreateReaders<TSnapshot>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders<TSnapshot>
  nameWithType.vb: Snapshot.CreateReaders(Of TSnapshot)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateReaders(Of TSnapshot)
  name.vb: CreateReaders(Of TSnapshot)
- uid: System.Delegate[]
  name: Delegate[]
  nameWithType: Delegate[]
  fullName: System.Delegate[]
  nameWithType.vb: Delegate()
  fullname.vb: System.Delegate()
  name.vb: Delegate()
  spec.csharp:
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType
  isExternal: false
  name: CreateSnapshotType
  nameWithType: Snapshot.CreateSnapshotType
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot.CreateSnapshotType
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
