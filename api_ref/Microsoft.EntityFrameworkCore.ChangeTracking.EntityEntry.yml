### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  id: EntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  langs:
  - csharp
  - vb
  name: EntityEntry
  nameWithType: EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Provides access to change tracking information and operations for a given entity.\n</p>\n<p>\n    Instances of this class are returned from methods when using the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker\" data-throw-if-not-resolved=\"false\"></xref> API and it is\n    not designed to be directly constructed in your application code.\n</p>\n"
  example: []
  syntax:
    content: 'public class EntityEntry : IInfrastructure<InternalEntityEntry>'
    content.vb: >-
      Public Class EntityEntry
          Implements IInfrastructure(Of InternalEntityEntry)
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
  id: InternalEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: InternalEntry
  nameWithType: EntityEntry.InternalEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InternalEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalEntityEntry InternalEntry { get; }
    content.vb: Protected Overridable ReadOnly Property InternalEntry As InternalEntityEntry
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  id: '#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: EntityEntry(InternalEntityEntry)
  nameWithType: EntityEntry.EntityEntry(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.EntityEntry(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public EntityEntry(InternalEntityEntry internalEntry)
    content.vb: Public Sub New(internalEntry As InternalEntityEntry)
    parameters:
    - id: internalEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
  id: Entity
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Entity
  nameWithType: EntityEntry.Entity
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Entity
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the entity being tracked by this entry.\n"
  example: []
  syntax:
    content: public virtual object Entity { get; }
    content.vb: Public Overridable ReadOnly Property Entity As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  id: State
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: State
  nameWithType: EntityEntry.State
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: State
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Gets or sets that state that this entity is being tracked in.\n</p>\n<p>\n    When setting the state, the entity will always end up in the specified state. For example, if you\n    change the state to <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> the entity will be marked for deletion regardless\n    of its current state. This is different than calling <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601.Remove(%600)\" data-throw-if-not-resolved=\"false\"></xref> where the entity\n    will be disconnected (rather than marked for deletion) if it is in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityState State { get; set; }
    content.vb: Public Overridable Property State As EntityState
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.EntityState
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance
  id: Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance
  isEii: true
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: IInfrastructure<InternalEntityEntry>.Instance
  nameWithType: EntityEntry.IInfrastructure<InternalEntityEntry>.Instance
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 87
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: InternalEntityEntry IInfrastructure<InternalEntityEntry>.Instance { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance As InternalEntityEntry Implements IInfrastructure(Of InternalEntityEntry).Instance
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}.Instance
  nameWithType.vb: EntityEntry.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
  id: Context
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: EntityEntry.Context
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Context
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 92
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the context that is tracking the entity.\n"
  example: []
  syntax:
    content: public virtual DbContext Context { get; }
    content.vb: Public Overridable ReadOnly Property Context As DbContext
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.DbContext
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
  id: Metadata
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: EntityEntry.Metadata
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Metadata
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 97
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the metadata about the shape of the entity, its relationships to other entities, and how it maps to the database.\n"
  example: []
  syntax:
    content: public virtual IEntityType Metadata { get; }
    content.vb: Public Overridable ReadOnly Property Metadata As IEntityType
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member(System.String)
  id: Member(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Member(String)
  nameWithType: EntityEntry.Member(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Member
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 105
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for a given\nproperty or navigation property of this entity.\n"
  example: []
  syntax:
    content: public virtual MemberEntry Member(string propertyName)
    content.vb: Public Overridable Function Member(propertyName As String) As MemberEntry
    parameters:
    - id: propertyName
      type: System.String
      description: 'The property to access information and operations for. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
      description: 'An object that exposes change tracking information and operations for the given property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
  id: Members
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Members
  nameWithType: EntityEntry.Members
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Members
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 131
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for all\nproperties and navigation properties of this entity.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<MemberEntry> Members { get; }
    content.vb: Public Overridable ReadOnly Property Members As IEnumerable(Of MemberEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation(System.String)
  id: Navigation(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Navigation(String)
  nameWithType: EntityEntry.Navigation(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Navigation
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 140
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for a given\nnavigation property of this entity.\n"
  example: []
  syntax:
    content: public virtual NavigationEntry Navigation(string propertyName)
    content.vb: Public Overridable Function Navigation(propertyName As String) As NavigationEntry
    parameters:
    - id: propertyName
      type: System.String
      description: 'The property to access information and operations for. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
      description: 'An object that exposes change tracking information and operations for the given property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
  id: Navigations
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Navigations
  nameWithType: EntityEntry.Navigations
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Navigations
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 167
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for all\nnavigation properties of this entity.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<NavigationEntry> Navigations { get; }
    content.vb: Public Overridable ReadOnly Property Navigations As IEnumerable(Of NavigationEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property(System.String)
  id: Property(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Property(String)
  nameWithType: EntityEntry.Property(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Property
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 178
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for a given\nproperty of this entity.\n"
  example: []
  syntax:
    content: public virtual PropertyEntry Property(string propertyName)
    content.vb: Public Overridable Function Property(propertyName As String) As PropertyEntry
    parameters:
    - id: propertyName
      type: System.String
      description: 'The property to access information and operations for. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
      description: 'An object that exposes change tracking information and operations for the given property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
  id: Properties
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: EntityEntry.Properties
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Properties
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 189
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and operations for all\nproperties of this entity.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<PropertyEntry> Properties { get; }
    content.vb: Public Overridable ReadOnly Property Properties As IEnumerable(Of PropertyEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference(System.String)
  id: Reference(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Reference(String)
  nameWithType: EntityEntry.Reference(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Reference
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 201
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking and loading information for a reference (i.e. non-collection)\nnavigation property that associates this entity to another entity.\n"
  example: []
  syntax:
    content: public virtual ReferenceEntry Reference(string navigationPropertyName)
    content.vb: Public Overridable Function Reference(navigationPropertyName As String) As ReferenceEntry
    parameters:
    - id: navigationPropertyName
      type: System.String
      description: 'The name of the navigation property. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
      description: "\nAn object that exposes change tracking information and operations for the\ngiven navigation property.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
  id: References
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: References
  nameWithType: EntityEntry.References
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: References
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 212
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and loading information for all\nreference (i.e. non-collection) navigation properties of this entity.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<ReferenceEntry> References { get; }
    content.vb: Public Overridable ReadOnly Property References As IEnumerable(Of ReferenceEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection(System.String)
  id: Collection(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Collection(String)
  nameWithType: EntityEntry.Collection(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Collection
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 225
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking and loading information for a collection\nnavigation property that associates this entity to a collection of another entities.\n"
  example: []
  syntax:
    content: public virtual CollectionEntry Collection(string navigationPropertyName)
    content.vb: Public Overridable Function Collection(navigationPropertyName As String) As CollectionEntry
    parameters:
    - id: navigationPropertyName
      type: System.String
      description: 'The name of the navigation property. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
      description: "\nAn object that exposes change tracking information and operations for the\ngiven navigation property.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
  id: Collections
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Collections
  nameWithType: EntityEntry.Collections
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Collections
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 236
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nProvides access to change tracking information and loading information for all\ncollection navigation properties of this entity.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<CollectionEntry> Collections { get; }
    content.vb: Public Overridable ReadOnly Property Collections As IEnumerable(Of CollectionEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
  id: IsKeySet
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: IsKeySet
  nameWithType: EntityEntry.IsKeySet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsKeySet
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 245
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets a value indicating if the key values of this entity have been assigned a value.\nFalse if one or more of the key properties is assigned null or the CLR default,\notherwise true.\n"
  example: []
  syntax:
    content: public virtual bool IsKeySet { get; }
    content.vb: Public Overridable ReadOnly Property IsKeySet As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  id: CurrentValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: CurrentValues
  nameWithType: EntityEntry.CurrentValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CurrentValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 251
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the current property values for this entity.\n"
  example: []
  syntax:
    content: public virtual PropertyValues CurrentValues { get; }
    content.vb: Public Overridable ReadOnly Property CurrentValues As PropertyValues
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
      description: 'The current values. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  id: OriginalValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: OriginalValues
  nameWithType: EntityEntry.OriginalValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OriginalValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 258
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the original property values for this entity. The original values are the property\nvalues as they were when the entity was retrieved from the database.\n"
  example: []
  syntax:
    content: public virtual PropertyValues OriginalValues { get; }
    content.vb: Public Overridable ReadOnly Property OriginalValues As PropertyValues
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
      description: 'The original values. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  id: GetDatabaseValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: GetDatabaseValues()
  nameWithType: EntityEntry.GetDatabaseValues()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDatabaseValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 271
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Queries the database for copies of the values of the tracked entity as they currently\n    exist in the database. If the entity is not found in the database, then null is returned.\n</p>\n<p>\n    Note that changing the values in the returned dictionary will not update the values\n    in the database.\n</p>\n"
  example: []
  syntax:
    content: public virtual PropertyValues GetDatabaseValues()
    content.vb: Public Overridable Function GetDatabaseValues As PropertyValues
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
      description: 'The store values, or null if the entity does not exist in the database. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  id: GetDatabaseValuesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: GetDatabaseValuesAsync(CancellationToken)
  nameWithType: EntityEntry.GetDatabaseValuesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDatabaseValuesAsync
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 299
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Queries the database for copies of the values of the tracked entity as they currently\n    exist in the database. If the entity is not found in the database, then null is returned.\n</p>\n<p>\n    Note that changing the values in the returned dictionary will not update the values\n    in the database.\n</p>\n<p>\n    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n    that any asynchronous operations have completed before calling another method on this context.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task<PropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetDatabaseValuesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of PropertyValues)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues}
      description: "\nA task that represents the asynchronous operation. The task result contains the store values,\nor null if the entity does not exist in the database.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload
  id: Reload
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: Reload()
  nameWithType: EntityEntry.Reload()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Reload
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 318
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Reloads the entity from the database overwriting any property values with values from the database.\n</p>\n<p>\n    The entity will be in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state after calling this method,\n    unless the entity does not exist in the database, in which case the entity will be\n<xref href=\"Microsoft.EntityFrameworkCore.EntityState.Detached\" data-throw-if-not-resolved=\"false\"></xref>. Finally, calling Reload on an <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref>\nentity that does not exist in the database is a no-op. Note, however, that an Added entity may\nnot yet have had its permanent key value created.\n</p>\n"
  example: []
  syntax:
    content: public virtual void Reload()
    content.vb: Public Overridable Sub Reload
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  id: ReloadAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  langs:
  - csharp
  - vb
  name: ReloadAsync(CancellationToken)
  nameWithType: EntityEntry.ReloadAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ReloadAsync
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/EntityEntry.cs
    startLine: 338
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Reloads the entity from the database overwriting any property values with values from the database.\n</p>\n<p>\n    The entity will be in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state after calling this method,\n    unless the entity does not exist in the database, in which case the entity will be\n<xref href=\"Microsoft.EntityFrameworkCore.EntityState.Detached\" data-throw-if-not-resolved=\"false\"></xref>. Finally, calling Reload on an <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref>\nentity that does not exist in the database is a no-op. Note, however, that an Added entity may\nnot yet have had its permanent key value created.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task ReloadAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ReloadAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation.\n"
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: ChangeTracker
  nameWithType: ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  name: IInfrastructure<InternalEntityEntry>
  nameWithType: IInfrastructure<InternalEntityEntry>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>
  nameWithType.vb: IInfrastructure(Of InternalEntityEntry)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  name.vb: IInfrastructure(Of InternalEntityEntry)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  parent: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  definition: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  name: GetInfrastructure<InternalEntityEntry>()
  nameWithType: AccessorExtensions.GetInfrastructure<InternalEntityEntry>()
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>()
  nameWithType.vb: AccessorExtensions.GetInfrastructure(Of InternalEntityEntry)()
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)()
  name.vb: GetInfrastructure(Of InternalEntityEntry)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
    name: GetInfrastructure<InternalEntityEntry>
    nameWithType: AccessorExtensions.GetInfrastructure<InternalEntityEntry>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
    name: GetInfrastructure(Of InternalEntityEntry)
    nameWithType: AccessorExtensions.GetInfrastructure(Of InternalEntityEntry)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  isExternal: false
  name: IInfrastructure<T>
  nameWithType: IInfrastructure<T>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>
  nameWithType.vb: IInfrastructure(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T)
  name.vb: IInfrastructure(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  isExternal: false
  name: GetInfrastructure<T>(IInfrastructure<T>)
  nameWithType: AccessorExtensions.GetInfrastructure<T>(IInfrastructure<T>)
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<T>(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>)
  nameWithType.vb: AccessorExtensions.GetInfrastructure(Of T)(IInfrastructure(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of T)(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T))
  name.vb: GetInfrastructure(Of T)(IInfrastructure(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
    name: GetInfrastructure<T>
    nameWithType: AccessorExtensions.GetInfrastructure<T>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
    name: GetInfrastructure(Of T)
    nameWithType: AccessorExtensions.GetInfrastructure(Of T)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: AccessorExtensions
  nameWithType: AccessorExtensions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
  isExternal: false
  name: InternalEntry
  nameWithType: EntityEntry.InternalEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.InternalEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.#ctor
  isExternal: false
  name: EntityEntry
  nameWithType: EntityEntry.EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.EntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
  isExternal: false
  name: Entity
  nameWithType: EntityEntry.Entity
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Entity
- uid: Microsoft.EntityFrameworkCore.EntityState.Deleted
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Deleted
- uid: Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)
  commentId: M:Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)
  isExternal: false
  name: Remove(TEntity)
  nameWithType: DbSet<TEntity>.Remove(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>.Remove(TEntity)
  nameWithType.vb: DbSet(Of TEntity).Remove(TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity).Remove(TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)
    name: Remove
    nameWithType: DbSet<TEntity>.Remove
    fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1.Remove(`0)
    name: Remove
    nameWithType: DbSet(Of TEntity).Remove
    fullName: Microsoft.EntityFrameworkCore.DbSet(Of TEntity).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityState.Added
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Added
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  isExternal: false
  name: State
  nameWithType: EntityEntry.State
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
- uid: Microsoft.EntityFrameworkCore.EntityState
  commentId: T:Microsoft.EntityFrameworkCore.EntityState
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: EntityState
  nameWithType: EntityState
  fullName: Microsoft.EntityFrameworkCore.EntityState
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#ChangeTracking#Internal#InternalEntityEntry}#Instance
  isExternal: false
  name: IInfrastructure<InternalEntityEntry>.Instance
  nameWithType: EntityEntry.IInfrastructure<InternalEntityEntry>.Instance
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
  nameWithType.vb: EntityEntry.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}.Instance
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  name: Instance
  nameWithType: IInfrastructure<InternalEntityEntry>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance
  nameWithType.vb: IInfrastructure(Of InternalEntityEntry).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry).Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  isExternal: false
  name: Instance
  nameWithType: IInfrastructure<T>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>.Instance
  nameWithType.vb: IInfrastructure(Of T).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T).Instance
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
  isExternal: false
  name: Context
  nameWithType: EntityEntry.Context
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Context
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
  isExternal: false
  name: Metadata
  nameWithType: EntityEntry.Metadata
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Metadata
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member
  isExternal: false
  name: Member
  nameWithType: EntityEntry.Member
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Member
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: MemberEntry
  nameWithType: MemberEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
  isExternal: false
  name: Members
  nameWithType: EntityEntry.Members
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Members
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MemberEntry>
  nameWithType: IEnumerable<MemberEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry>
  nameWithType.vb: IEnumerable(Of MemberEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry)
  name.vb: IEnumerable(Of MemberEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
    name: MemberEntry
    nameWithType: MemberEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
    name: MemberEntry
    nameWithType: MemberEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation
  isExternal: false
  name: Navigation
  nameWithType: EntityEntry.Navigation
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigation
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: NavigationEntry
  nameWithType: NavigationEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
  isExternal: false
  name: Navigations
  nameWithType: EntityEntry.Navigations
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Navigations
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<NavigationEntry>
  nameWithType: IEnumerable<NavigationEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry>
  nameWithType.vb: IEnumerable(Of NavigationEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry)
  name.vb: IEnumerable(Of NavigationEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
    name: NavigationEntry
    nameWithType: NavigationEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
    name: NavigationEntry
    nameWithType: NavigationEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property
  isExternal: false
  name: Property
  nameWithType: EntityEntry.Property
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Property
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: PropertyEntry
  nameWithType: PropertyEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
  isExternal: false
  name: Properties
  nameWithType: EntityEntry.Properties
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Properties
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyEntry>
  nameWithType: IEnumerable<PropertyEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry>
  nameWithType.vb: IEnumerable(Of PropertyEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry)
  name.vb: IEnumerable(Of PropertyEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
    name: PropertyEntry
    nameWithType: PropertyEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
    name: PropertyEntry
    nameWithType: PropertyEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference
  isExternal: false
  name: Reference
  nameWithType: EntityEntry.Reference
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reference
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: ReferenceEntry
  nameWithType: ReferenceEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
  isExternal: false
  name: References
  nameWithType: EntityEntry.References
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.References
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ReferenceEntry>
  nameWithType: IEnumerable<ReferenceEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry>
  nameWithType.vb: IEnumerable(Of ReferenceEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry)
  name.vb: IEnumerable(Of ReferenceEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
    name: ReferenceEntry
    nameWithType: ReferenceEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
    name: ReferenceEntry
    nameWithType: ReferenceEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection
  isExternal: false
  name: Collection
  nameWithType: EntityEntry.Collection
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collection
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: CollectionEntry
  nameWithType: CollectionEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
  isExternal: false
  name: Collections
  nameWithType: EntityEntry.Collections
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Collections
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CollectionEntry>
  nameWithType: IEnumerable<CollectionEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry>
  nameWithType.vb: IEnumerable(Of CollectionEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry)
  name.vb: IEnumerable(Of CollectionEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
    name: CollectionEntry
    nameWithType: CollectionEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
    name: CollectionEntry
    nameWithType: CollectionEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
  isExternal: false
  name: IsKeySet
  nameWithType: EntityEntry.IsKeySet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.IsKeySet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  isExternal: false
  name: CurrentValues
  nameWithType: EntityEntry.CurrentValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: PropertyValues
  nameWithType: PropertyValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  isExternal: false
  name: OriginalValues
  nameWithType: EntityEntry.OriginalValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  isExternal: false
  name: GetDatabaseValues
  nameWithType: EntityEntry.GetDatabaseValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync
  isExternal: false
  name: GetDatabaseValuesAsync
  nameWithType: EntityEntry.GetDatabaseValuesAsync
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PropertyValues>
  nameWithType: Task<PropertyValues>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues>
  nameWithType.vb: Task(Of PropertyValues)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  name.vb: Task(Of PropertyValues)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
    name: PropertyValues
    nameWithType: PropertyValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
    name: PropertyValues
    nameWithType: PropertyValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.EntityState.Unchanged
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Unchanged
- uid: Microsoft.EntityFrameworkCore.EntityState.Detached
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Detached
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload
  isExternal: false
  name: Reload
  nameWithType: EntityEntry.Reload
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.Reload
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync
  isExternal: false
  name: ReloadAsync
  nameWithType: EntityEntry.ReloadAsync
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.ReloadAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
