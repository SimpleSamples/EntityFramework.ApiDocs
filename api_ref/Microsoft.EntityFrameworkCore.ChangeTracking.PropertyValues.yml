### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  id: PropertyValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(System.String)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject
  langs:
  - csharp
  - vb
  name: PropertyValues
  nameWithType: PropertyValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    A collection of all property values for an entity.\n</p>\n<p>\n    Objects of this type can be obtained from <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues\" data-throw-if-not-resolved=\"false\"></xref>,  <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues\" data-throw-if-not-resolved=\"false\"></xref>,\nor <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\nOnce obtained, the objects are usually used in various combinations to resolve optimitisic\nconcurrency exceptions signalled by the throwing of a <xref href=\"Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public abstract class PropertyValues
    content.vb: Public MustInherit Class PropertyValues
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  id: '#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: PropertyValues(InternalEntityEntry)
  nameWithType: PropertyValues.PropertyValues(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.PropertyValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected PropertyValues(InternalEntityEntry internalEntry)
    content.vb: Protected Sub New(internalEntry As InternalEntityEntry)
    parameters:
    - id: internalEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
  id: InternalEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: InternalEntry
  nameWithType: PropertyValues.InternalEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InternalEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalEntityEntry InternalEntry { get; }
    content.vb: Protected Overridable ReadOnly Property InternalEntry As InternalEntityEntry
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject
  id: ToObject
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: ToObject()
  nameWithType: PropertyValues.ToObject()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToObject
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCreates an insatcne of the entity type and sets all its properties using the\nvalues from this object.\n"
  example: []
  syntax:
    content: public abstract object ToObject()
    content.vb: Public MustOverride Function ToObject As Object
    return:
      type: System.Object
      description: 'The values of this object copied into a new entity instance. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Object)
  id: SetValues(System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: SetValues(Object)
  nameWithType: PropertyValues.SetValues(Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 59
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Sets the values of this object by copying values from the given object.\n</p>\n<p>\n    The given object can be of any type.  Any property on the object with a name that\n    matches a property name in the entity type and can be read will be copied.  Other\n    properties will be ignored.  This allows, for example, copying of properties from\n    simple Data Transfer Objects (DTOs).\n</p>\n"
  example: []
  syntax:
    content: public abstract void SetValues(object obj)
    content.vb: Public MustOverride Sub SetValues(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to read values from. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone
  id: Clone
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: PropertyValues.Clone()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Clone
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nCreates a clone of the values in this object. Changes made to the new object will not be\nreflected in this object and vice versa.\n"
  example: []
  syntax:
    content: public abstract PropertyValues Clone()
    content.vb: Public MustOverride Function Clone As PropertyValues
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
      description: 'A clone of this object. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  id: SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: SetValues(PropertyValues)
  nameWithType: PropertyValues.SetValues(PropertyValues)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 79
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Sets the values of this object by reading values from another <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues\" data-throw-if-not-resolved=\"false\"></xref>\n    object.\n</p>\n<p>\n    The other object must be based on the same type as this object, or a type derived\n    from the type for this object.\n</p>\n"
  example: []
  syntax:
    content: public abstract void SetValues(PropertyValues propertyValues)
    content.vb: Public MustOverride Sub SetValues(propertyValues As PropertyValues)
    parameters:
    - id: propertyValues
      type: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
      description: 'The object from which values should be coiped. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: SetValues(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: SetValues(IDictionary<String, Object>)
  nameWithType: PropertyValues.SetValues(IDictionary<String, Object>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\n<p>\n    Sets the values of this object by copying values from the given dictionary.\n</p>\n<p>\n    The keys of the dictionary must match property names. Any key in the dictionary\n    that does not match the name of a property in the entity type will be ignored.\n</p>\n"
  example: []
  syntax:
    content: public virtual void SetValues(IDictionary<string, object> values)
    content.vb: Public Overridable Sub SetValues(values As IDictionary(Of String, Object))
    parameters:
    - id: values
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: 'The dictionary to read values from. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues*
  nameWithType.vb: PropertyValues.SetValues(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: SetValues(IDictionary(Of String, Object))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
  id: Properties
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: PropertyValues.Properties
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Properties
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the properties for which this object is storing values.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyList<IProperty> Properties { get; }
    content.vb: Public MustOverride ReadOnly Property Properties As IReadOnlyList(Of IProperty)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
      description: 'The properties. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
  id: EntityType
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: EntityType
  nameWithType: PropertyValues.EntityType
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityType
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 114
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the underlying entity type for which this object is storing values.\n"
  example: []
  syntax:
    content: public virtual IEntityType EntityType { get; }
    content.vb: Public Overridable ReadOnly Property EntityType As IEntityType
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(System.String)
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: PropertyValues.Item[String]
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: this[]
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 121
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets or sets the value of the property with the specified property name.\n"
  example: []
  syntax:
    content: public abstract object this[string propertyName] { get; set; }
    content.vb: Public MustOverride Property Item(propertyName As String) As Object
    parameters:
    - id: propertyName
      type: System.String
      description: 'The property name. '
    return:
      type: System.Object
      description: 'The value of the property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item*
  nameWithType.vb: PropertyValues.Item(String)
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: Item[IProperty]
  nameWithType: PropertyValues.Item[IProperty]
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item[Microsoft.EntityFrameworkCore.Metadata.IProperty]
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: this[]
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 128
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets or sets the value of the property.\n"
  example: []
  syntax:
    content: public abstract object this[IProperty property] { get; set; }
    content.vb: Public MustOverride Property Item(property As IProperty) As Object
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property. '
    return:
      type: System.Object
      description: 'The value of the property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item*
  nameWithType.vb: PropertyValues.Item(IProperty)
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: Item(IProperty)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(System.String)
  id: GetValue``1(System.String)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: GetValue<TValue>(String)
  nameWithType: PropertyValues.GetValue<TValue>(String)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue<TValue>(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 137
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the value of the property just like using the indexed property getter but\ntyped to the type of the generic parameter.\n"
  example: []
  syntax:
    content: public abstract TValue GetValue<TValue>(string propertyName)
    content.vb: Public MustOverride Function GetValue(Of TValue)(propertyName As String) As TValue
    parameters:
    - id: propertyName
      type: System.String
      description: 'The property name. '
    typeParameters:
    - id: TValue
      description: 'The type of the property. '
    return:
      type: '{TValue}'
      description: 'The value of the property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue*
  nameWithType.vb: PropertyValues.GetValue(Of TValue)(String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue(Of TValue)(System.String)
  name.vb: GetValue(Of TValue)(String)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  langs:
  - csharp
  - vb
  name: GetValue<TValue>(IProperty)
  nameWithType: PropertyValues.GetValue<TValue>(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue<TValue>(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/PropertyValues.cs
    startLine: 146
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking
  summary: "\nGets the value of the property just like using the indexed property getter but\ntyped to the type of the generic parameter.\n"
  example: []
  syntax:
    content: public abstract TValue GetValue<TValue>(IProperty property)
    content.vb: Public MustOverride Function GetValue(Of TValue)(property As IProperty) As TValue
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property. '
    typeParameters:
    - id: TValue
      description: 'The type of the property. '
    return:
      type: '{TValue}'
      description: 'The value of the property. '
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue*
  nameWithType.vb: PropertyValues.GetValue(Of TValue)(IProperty)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue(Of TValue)(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: GetValue(Of TValue)(IProperty)
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  isExternal: false
  name: CurrentValues
  nameWithType: EntityEntry.CurrentValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.CurrentValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  isExternal: false
  name: OriginalValues
  nameWithType: EntityEntry.OriginalValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.OriginalValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  isExternal: false
  name: GetDatabaseValues()
  nameWithType: EntityEntry.GetDatabaseValues()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
    name: GetDatabaseValues
    nameWithType: EntityEntry.GetDatabaseValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
    name: GetDatabaseValues
    nameWithType: EntityEntry.GetDatabaseValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  isExternal: true
  name: GetDatabaseValuesAsync(CancellationToken)
  nameWithType: EntityEntry.GetDatabaseValuesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
    name: GetDatabaseValuesAsync
    nameWithType: EntityEntry.GetDatabaseValuesAsync
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)
    name: GetDatabaseValuesAsync
    nameWithType: EntityEntry.GetDatabaseValuesAsync
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.GetDatabaseValuesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException
  commentId: T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException
  isExternal: false
  name: DbUpdateConcurrencyException
  nameWithType: DbUpdateConcurrencyException
  fullName: Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: EntityEntry
  nameWithType: EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.#ctor
  isExternal: false
  name: PropertyValues
  nameWithType: PropertyValues.PropertyValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.PropertyValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
  isExternal: false
  name: InternalEntry
  nameWithType: PropertyValues.InternalEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.InternalEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject
  isExternal: false
  name: ToObject
  nameWithType: PropertyValues.ToObject
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.ToObject
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues
  isExternal: false
  name: SetValues
  nameWithType: PropertyValues.SetValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.SetValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone
  isExternal: false
  name: Clone
  nameWithType: PropertyValues.Clone
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Clone
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: PropertyValues
  nameWithType: PropertyValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
  isExternal: false
  name: Properties
  nameWithType: PropertyValues.Properties
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Properties
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IProperty>
  nameWithType: IReadOnlyList<IProperty>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IProperty>
  nameWithType.vb: IReadOnlyList(Of IProperty)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: IReadOnlyList(Of IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
  isExternal: false
  name: EntityType
  nameWithType: PropertyValues.EntityType
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.EntityType
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item
  isExternal: false
  name: Item
  nameWithType: PropertyValues.Item
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue
  isExternal: false
  name: GetValue<TValue>
  nameWithType: PropertyValues.GetValue<TValue>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue<TValue>
  nameWithType.vb: PropertyValues.GetValue(Of TValue)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues.GetValue(Of TValue)
  name.vb: GetValue(Of TValue)
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
