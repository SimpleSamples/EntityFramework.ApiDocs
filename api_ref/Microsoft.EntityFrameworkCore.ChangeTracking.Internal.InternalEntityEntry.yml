### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  id: InternalEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object,NotifyCollectionChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object,PropertyChangedEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object,PropertyChangingEventArgs)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue``1(System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  langs:
  - csharp
  - vb
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StoreGeneratedValues.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InternalEntityEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StoreGeneratedValues.cs
    startLine: 11
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public abstract class InternalEntityEntry : IUpdateEntry'
    content.vb: >-
      Public MustInherit Class InternalEntityEntry
          Implements IUpdateEntry
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: '#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,Microsoft.EntityFrameworkCore.Metadata.IEntityType)'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: InternalEntityEntry(IStateManager, IEntityType)
  nameWithType: InternalEntityEntry.InternalEntityEntry(IStateManager, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.InternalEntityEntry(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected InternalEntityEntry(IStateManager stateManager, IEntityType entityType)
    content.vb: Protected Sub New(stateManager As IStateManager, entityType As IEntityType)
    parameters:
    - id: stateManager
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
  id: Entity
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: Entity
  nameWithType: InternalEntityEntry.Entity
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Entity
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract object Entity { get; }
    content.vb: Public MustOverride ReadOnly Property Entity As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
  id: EntityType
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: EntityType
  nameWithType: InternalEntityEntry.EntityType
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityType
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEntityType EntityType { get; }
    content.vb: Public Overridable ReadOnly Property EntityType As IEntityType
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
  id: StateManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: StateManager
  nameWithType: InternalEntityEntry.StateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StateManager
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 60
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IStateManager StateManager { get; }
    content.vb: Public Overridable ReadOnly Property StateManager As IStateManager
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean)
  id: SetEntityState(Microsoft.EntityFrameworkCore.EntityState,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetEntityState(EntityState, Boolean)
  nameWithType: InternalEntityEntry.SetEntityState(EntityState, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(Microsoft.EntityFrameworkCore.EntityState, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetEntityState
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetEntityState(EntityState entityState, bool acceptChanges = false)
    content.vb: Public Overridable Sub SetEntityState(entityState As EntityState, acceptChanges As Boolean = False)
    parameters:
    - id: entityState
      type: Microsoft.EntityFrameworkCore.EntityState
    - id: acceptChanges
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)
  id: SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetEntityStateAsync(EntityState, Boolean, CancellationToken)
  nameWithType: InternalEntityEntry.SetEntityStateAsync(EntityState, Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync(Microsoft.EntityFrameworkCore.EntityState, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetEntityStateAsync
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 82
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Task SetEntityStateAsync(EntityState entityState, bool acceptChanges, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetEntityStateAsync(entityState As EntityState, acceptChanges As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: entityState
      type: Microsoft.EntityFrameworkCore.EntityState
    - id: acceptChanges
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  id: MarkUnchangedFromQuery(ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: MarkUnchangedFromQuery(ISet<IForeignKey>)
  nameWithType: InternalEntityEntry.MarkUnchangedFromQuery(ISet<IForeignKey>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MarkUnchangedFromQuery
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 233
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void MarkUnchangedFromQuery(ISet<IForeignKey> handledForeignKeys)
    content.vb: Public Overridable Sub MarkUnchangedFromQuery(handledForeignKeys As ISet(Of IForeignKey))
    parameters:
    - id: handledForeignKeys
      type: ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery*
  nameWithType.vb: InternalEntityEntry.MarkUnchangedFromQuery(ISet(Of IForeignKey))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery(ISet(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey))
  name.vb: MarkUnchangedFromQuery(ISet(Of IForeignKey))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
  id: EntityState
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: EntityState
  nameWithType: InternalEntityEntry.EntityState
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityState
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 254
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual EntityState EntityState { get; }
    content.vb: Public Overridable ReadOnly Property EntityState As EntityState
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.EntityState
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: IsModified(IProperty)
  nameWithType: InternalEntityEntry.IsModified(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsModified
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 260
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsModified(IProperty property)
    content.vb: Public Overridable Function IsModified(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)
  id: SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetPropertyModified(IProperty, Boolean, Boolean, Boolean)
  nameWithType: InternalEntityEntry.SetPropertyModified(IProperty, Boolean, Boolean, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified(Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetPropertyModified
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 273
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetPropertyModified(IProperty property, bool changeState = true, bool isModified = true, bool isConceptualNull = false)
    content.vb: Public Overridable Sub SetPropertyModified(property As IProperty, changeState As Boolean = True, isModified As Boolean = True, isConceptualNull As Boolean = False)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    - id: changeState
      type: System.Boolean
    - id: isModified
      type: System.Boolean
    - id: isConceptualNull
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
  id: HasConceptualNull
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HasConceptualNull
  nameWithType: InternalEntityEntry.HasConceptualNull
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasConceptualNull
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 354
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool HasConceptualNull { get; }
    content.vb: Public Overridable ReadOnly Property HasConceptualNull As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: IsConceptualNull(IProperty)
  nameWithType: InternalEntityEntry.IsConceptualNull(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsConceptualNull
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 361
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsConceptualNull(IProperty property)
    content.vb: Public Overridable Function IsConceptualNull(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HasTemporaryValue(IProperty)
  nameWithType: InternalEntityEntry.HasTemporaryValue(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTemporaryValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 368
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool HasTemporaryValue(IProperty property)
    content.vb: Public Overridable Function HasTemporaryValue(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)
  id: MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: MarkAsTemporary(IProperty, Boolean)
  nameWithType: InternalEntityEntry.MarkAsTemporary(IProperty, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary(Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MarkAsTemporary
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 376
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void MarkAsTemporary(IProperty property, bool isTemporary = true)
    content.vb: Public Overridable Sub MarkAsTemporary(property As IProperty, isTemporary As Boolean = True)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    - id: isTemporary
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: MarkShadowPropertiesNotSet(IEntityType)
  nameWithType: InternalEntityEntry.MarkShadowPropertiesNotSet(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MarkShadowPropertiesNotSet
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 393
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual void MarkShadowPropertiesNotSet(IEntityType entityType)
    content.vb: Protected Overridable Sub MarkShadowPropertiesNotSet(entityType As IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue``1(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue``1(System.Int32)
  id: ReadShadowValue``1(System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: ReadShadowValue<T>(Int32)
  nameWithType: InternalEntityEntry.ReadShadowValue<T>(Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ReadShadowValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 411
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual T ReadShadowValue<T>(int shadowIndex)
    content.vb: Protected Overridable Function ReadShadowValue(Of T)(shadowIndex As Integer) As T
    parameters:
    - id: shadowIndex
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue*
  nameWithType.vb: InternalEntityEntry.ReadShadowValue(Of T)(Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue(Of T)(System.Int32)
  name.vb: ReadShadowValue(Of T)(Int32)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetCurrentValue<TProperty>(IPropertyBase)
  nameWithType: InternalEntityEntry.GetCurrentValue<TProperty>(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCurrentValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 442
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TProperty GetCurrentValue<TProperty>(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetCurrentValue(Of TProperty)(propertyBase As IPropertyBase) As TProperty
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    typeParameters:
    - id: TProperty
    return:
      type: '{TProperty}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  nameWithType.vb: InternalEntityEntry.GetCurrentValue(Of TProperty)(IPropertyBase)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  name.vb: GetCurrentValue(Of TProperty)(IPropertyBase)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetOriginalValue<TProperty>(IProperty)
  nameWithType: InternalEntityEntry.GetOriginalValue<TProperty>(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOriginalValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 449
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TProperty GetOriginalValue<TProperty>(IProperty property)
    content.vb: Public Overridable Function GetOriginalValue(Of TProperty)(property As IProperty) As TProperty
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    typeParameters:
    - id: TProperty
    return:
      type: '{TProperty}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  nameWithType.vb: InternalEntityEntry.GetOriginalValue(Of TProperty)(IProperty)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: GetOriginalValue(Of TProperty)(IProperty)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetRelationshipSnapshotValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetRelationshipSnapshotValue<TProperty>(IPropertyBase)
  nameWithType: InternalEntityEntry.GetRelationshipSnapshotValue<TProperty>(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRelationshipSnapshotValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 456
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TProperty GetRelationshipSnapshotValue<TProperty>(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetRelationshipSnapshotValue(Of TProperty)(propertyBase As IPropertyBase) As TProperty
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    typeParameters:
    - id: TProperty
    return:
      type: '{TProperty}'
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue*
  nameWithType.vb: InternalEntityEntry.GetRelationshipSnapshotValue(Of TProperty)(IPropertyBase)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  name.vb: GetRelationshipSnapshotValue(Of TProperty)(IPropertyBase)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: ReadPropertyValue(IPropertyBase)
  nameWithType: InternalEntityEntry.ReadPropertyValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ReadPropertyValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 463
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual object ReadPropertyValue(IPropertyBase propertyBase)
    content.vb: Protected Overridable Function ReadPropertyValue(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  id: WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: WritePropertyValue(IPropertyBase, Object)
  nameWithType: InternalEntityEntry.WritePropertyValue(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: WritePropertyValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 474
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual void WritePropertyValue(IPropertyBase propertyBase, object value)
    content.vb: Protected Overridable Sub WritePropertyValue(propertyBase As IPropertyBase, value As Object)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: value
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetCurrentValue(IPropertyBase)
  nameWithType: InternalEntityEntry.GetCurrentValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCurrentValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 485
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object GetCurrentValue(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetCurrentValue(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetPreStoreGeneratedCurrentValue(IPropertyBase)
  nameWithType: InternalEntityEntry.GetPreStoreGeneratedCurrentValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPreStoreGeneratedCurrentValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 497
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object GetPreStoreGeneratedCurrentValue(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetPreStoreGeneratedCurrentValue(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetOriginalValue(IPropertyBase)
  nameWithType: InternalEntityEntry.GetOriginalValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOriginalValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 509
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object GetOriginalValue(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetOriginalValue(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: GetRelationshipSnapshotValue(IPropertyBase)
  nameWithType: InternalEntityEntry.GetRelationshipSnapshotValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRelationshipSnapshotValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 516
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object GetRelationshipSnapshotValue(IPropertyBase propertyBase)
    content.vb: Public Overridable Function GetRelationshipSnapshotValue(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  id: SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetCurrentValue(IPropertyBase, Object)
  nameWithType: InternalEntityEntry.SetCurrentValue(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetCurrentValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 523
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetCurrentValue(IPropertyBase propertyBase, object value)
    content.vb: Public Overridable Sub SetCurrentValue(propertyBase As IPropertyBase, value As Object)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: value
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)
  id: SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Int32)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetOriginalValue(IPropertyBase, Object, Int32)
  nameWithType: InternalEntityEntry.SetOriginalValue(IPropertyBase, Object, Int32)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetOriginalValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 530
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetOriginalValue(IPropertyBase propertyBase, object value, int index = -1)
    content.vb: Public Overridable Sub SetOriginalValue(propertyBase As IPropertyBase, value As Object, index As Integer = -1)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: value
      type: System.Object
    - id: index
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  id: SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetRelationshipSnapshotValue(IPropertyBase, Object)
  nameWithType: InternalEntityEntry.SetRelationshipSnapshotValue(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetRelationshipSnapshotValue
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 556
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetRelationshipSnapshotValue(IPropertyBase propertyBase, object value)
    content.vb: Public Overridable Sub SetRelationshipSnapshotValue(propertyBase As IPropertyBase, value As Object)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: value
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues
  id: EnsureOriginalValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: EnsureOriginalValues()
  nameWithType: InternalEntityEntry.EnsureOriginalValues()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureOriginalValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 566
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void EnsureOriginalValues()
    content.vb: Public Overridable Sub EnsureOriginalValues
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot
  id: EnsureRelationshipSnapshot
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: EnsureRelationshipSnapshot()
  nameWithType: InternalEntityEntry.EnsureRelationshipSnapshot()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureRelationshipSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 578
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void EnsureRelationshipSnapshot()
    content.vb: Public Overridable Sub EnsureRelationshipSnapshot
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
  id: HasOriginalValuesSnapshot
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HasOriginalValuesSnapshot
  nameWithType: InternalEntityEntry.HasOriginalValuesSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasOriginalValuesSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 590
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool HasOriginalValuesSnapshot { get; }
    content.vb: Public Overridable ReadOnly Property HasOriginalValuesSnapshot As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
  id: HasRelationshipSnapshot
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HasRelationshipSnapshot
  nameWithType: InternalEntityEntry.HasRelationshipSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasRelationshipSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 596
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool HasRelationshipSnapshot { get; }
    content.vb: Public Overridable ReadOnly Property HasRelationshipSnapshot As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  id: RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: RemoveFromCollectionSnapshot(IPropertyBase, Object)
  nameWithType: InternalEntityEntry.RemoveFromCollectionSnapshot(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveFromCollectionSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 602
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void RemoveFromCollectionSnapshot(IPropertyBase propertyBase, object removedEntity)
    content.vb: Public Overridable Sub RemoveFromCollectionSnapshot(propertyBase As IPropertyBase, removedEntity As Object)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: removedEntity
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  id: AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: AddToCollectionSnapshot(IPropertyBase, Object)
  nameWithType: InternalEntityEntry.AddToCollectionSnapshot(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddToCollectionSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 612
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddToCollectionSnapshot(IPropertyBase propertyBase, object addedEntity)
    content.vb: Public Overridable Sub AddToCollectionSnapshot(propertyBase As IPropertyBase, addedEntity As Object)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: addedEntity
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})
  id: AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: AddRangeToCollectionSnapshot(IPropertyBase, IEnumerable<Object>)
  nameWithType: InternalEntityEntry.AddRangeToCollectionSnapshot(IPropertyBase, IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddRangeToCollectionSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 622
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddRangeToCollectionSnapshot(IPropertyBase propertyBase, IEnumerable<object> addedEntities)
    content.vb: Public Overridable Sub AddRangeToCollectionSnapshot(propertyBase As IPropertyBase, addedEntities As IEnumerable(Of Object))
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: addedEntities
      type: System.Collections.Generic.IEnumerable{System.Object}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot*
  nameWithType.vb: InternalEntityEntry.AddRangeToCollectionSnapshot(IPropertyBase, IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AddRangeToCollectionSnapshot(IPropertyBase, IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  id: Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: Item[IPropertyBase]
  nameWithType: InternalEntityEntry.Item[IPropertyBase]
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item[Microsoft.EntityFrameworkCore.Metadata.IPropertyBase]
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: this[]
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 632
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object this[IPropertyBase propertyBase] { get; set; }
    content.vb: Public Overridable Property Item(propertyBase As IPropertyBase) As Object
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    return:
      type: System.Object
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item*
  nameWithType.vb: InternalEntityEntry.Item(IPropertyBase)
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  name.vb: Item(IPropertyBase)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)
  id: SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetProperty(IPropertyBase, Object, Boolean)
  nameWithType: InternalEntityEntry.SetProperty(IPropertyBase, Object, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetProperty
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 648
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetProperty(IPropertyBase propertyBase, object value, bool setModified = true)
    content.vb: Public Overridable Sub SetProperty(propertyBase As IPropertyBase, value As Object, setModified As Boolean = True)
    parameters:
    - id: propertyBase
      type: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    - id: value
      type: System.Object
    - id: setModified
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges
  id: AcceptChanges
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: AcceptChanges()
  nameWithType: InternalEntityEntry.AcceptChanges()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AcceptChanges
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 718
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AcceptChanges()
    content.vb: Public Overridable Sub AcceptChanges
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave
  id: PrepareToSave
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: PrepareToSave()
  nameWithType: InternalEntityEntry.PrepareToSave()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PrepareToSave
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 759
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry PrepareToSave()
    content.vb: Public Overridable Function PrepareToSave As InternalEntityEntry
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls
  id: HandleConceptualNulls
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HandleConceptualNulls()
  nameWithType: InternalEntityEntry.HandleConceptualNulls()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HandleConceptualNulls
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 808
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void HandleConceptualNulls()
    content.vb: Public Overridable Sub HandleConceptualNulls
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete
  id: CascadeDelete
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: CascadeDelete()
  nameWithType: InternalEntityEntry.CascadeDelete()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CascadeDelete
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 872
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void CascadeDelete()
    content.vb: Public Overridable Sub CascadeDelete
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues
  id: DiscardStoreGeneratedValues
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: DiscardStoreGeneratedValues()
  nameWithType: InternalEntityEntry.DiscardStoreGeneratedValues()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DiscardStoreGeneratedValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 911
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void DiscardStoreGeneratedValues()
    content.vb: Public Overridable Sub DiscardStoreGeneratedValues
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: IsStoreGenerated(IProperty)
  nameWithType: InternalEntityEntry.IsStoreGenerated(IProperty)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsStoreGenerated
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 933
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsStoreGenerated(IProperty property)
    content.vb: Public Overridable Function IsStoreGenerated(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
  id: IsKeySet
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: IsKeySet
  nameWithType: InternalEntityEntry.IsKeySet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsKeySet
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 947
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsKeySet { get; }
    content.vb: Public Overridable ReadOnly Property IsKeySet As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry
  id: ToEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: ToEntityEntry()
  nameWithType: InternalEntityEntry.ToEntityEntry()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToEntityEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 953
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual EntityEntry ToEntityEntry()
    content.vb: Public Overridable Function ToEntityEntry As EntityEntry
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry*
  implements:
  - Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object,PropertyChangingEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object,PropertyChangingEventArgs)
  id: HandleINotifyPropertyChanging(System.Object,PropertyChangingEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HandleINotifyPropertyChanging(Object, PropertyChangingEventArgs)
  nameWithType: InternalEntityEntry.HandleINotifyPropertyChanging(Object, PropertyChangingEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging(System.Object, PropertyChangingEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HandleINotifyPropertyChanging
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 959
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void HandleINotifyPropertyChanging(object sender, PropertyChangingEventArgs eventArgs)
    content.vb: Public Overridable Sub HandleINotifyPropertyChanging(sender As Object, eventArgs As PropertyChangingEventArgs)
    parameters:
    - id: sender
      type: System.Object
    - id: eventArgs
      type: PropertyChangingEventArgs
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object,PropertyChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object,PropertyChangedEventArgs)
  id: HandleINotifyPropertyChanged(System.Object,PropertyChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HandleINotifyPropertyChanged(Object, PropertyChangedEventArgs)
  nameWithType: InternalEntityEntry.HandleINotifyPropertyChanged(Object, PropertyChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged(System.Object, PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HandleINotifyPropertyChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 971
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void HandleINotifyPropertyChanged(object sender, PropertyChangedEventArgs eventArgs)
    content.vb: Public Overridable Sub HandleINotifyPropertyChanged(sender As Object, eventArgs As PropertyChangedEventArgs)
    parameters:
    - id: sender
      type: System.Object
    - id: eventArgs
      type: PropertyChangedEventArgs
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object,NotifyCollectionChangedEventArgs)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object,NotifyCollectionChangedEventArgs)
  id: HandleINotifyCollectionChanged(System.Object,NotifyCollectionChangedEventArgs)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: HandleINotifyCollectionChanged(Object, NotifyCollectionChangedEventArgs)
  nameWithType: InternalEntityEntry.HandleINotifyCollectionChanged(Object, NotifyCollectionChangedEventArgs)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged(System.Object, NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HandleINotifyCollectionChanged
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 983
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void HandleINotifyCollectionChanged(object sender, NotifyCollectionChangedEventArgs eventArgs)
    content.vb: Public Overridable Sub HandleINotifyCollectionChanged(sender As Object, eventArgs As NotifyCollectionChangedEventArgs)
    parameters:
    - id: sender
      type: System.Object
    - id: eventArgs
      type: NotifyCollectionChangedEventArgs
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)
  id: SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: SetIsLoaded(INavigation, Boolean)
  nameWithType: InternalEntityEntry.SetIsLoaded(INavigation, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetIsLoaded
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 1022
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void SetIsLoaded(INavigation navigation, bool loaded = true)
    content.vb: Public Overridable Sub SetIsLoaded(navigation As INavigation, loaded As Boolean = True)
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
    - id: loaded
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  id: IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  langs:
  - csharp
  - vb
  name: IsLoaded(INavigation)
  nameWithType: InternalEntityEntry.IsLoaded(INavigation)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsLoaded
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/InternalEntityEntry.cs
    startLine: 1039
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsLoaded(INavigation navigation)
    content.vb: Public Overridable Function IsLoaded(navigation As INavigation) As Boolean
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  commentId: T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  parent: Microsoft.EntityFrameworkCore.Update
  isExternal: false
  name: IUpdateEntry
  nameWithType: IUpdateEntry
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Update
  commentId: N:Microsoft.EntityFrameworkCore.Update
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Update
  nameWithType: Microsoft.EntityFrameworkCore.Update
  fullName: Microsoft.EntityFrameworkCore.Update
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.#ctor
  isExternal: false
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry.InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.InternalEntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IStateManager
  nameWithType: IStateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
  isExternal: false
  name: Entity
  nameWithType: InternalEntityEntry.Entity
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Entity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
  isExternal: false
  name: EntityType
  nameWithType: InternalEntityEntry.EntityType
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityType
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType
  commentId: P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: EntityType
  nameWithType: IUpdateEntry.EntityType
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityType
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
  isExternal: false
  name: StateManager
  nameWithType: InternalEntityEntry.StateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.StateManager
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState
  isExternal: false
  name: SetEntityState
  nameWithType: InternalEntityEntry.SetEntityState
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState
- uid: Microsoft.EntityFrameworkCore.EntityState
  commentId: T:Microsoft.EntityFrameworkCore.EntityState
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: EntityState
  nameWithType: EntityState
  fullName: Microsoft.EntityFrameworkCore.EntityState
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync
  isExternal: false
  name: SetEntityStateAsync
  nameWithType: InternalEntityEntry.SetEntityStateAsync
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityStateAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery
  isExternal: false
  name: MarkUnchangedFromQuery
  nameWithType: InternalEntityEntry.MarkUnchangedFromQuery
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkUnchangedFromQuery
- uid: ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  commentId: '!:ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}'
  definition: ISet`1
  name: ISet<IForeignKey>
  nameWithType: ISet<IForeignKey>
  fullName: ISet<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>
  nameWithType.vb: ISet(Of IForeignKey)
  fullname.vb: ISet(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  name.vb: ISet(Of IForeignKey)
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ISet`1
  isExternal: true
  name: ISet<>
  nameWithType: ISet<>
  fullName: ISet<>
  nameWithType.vb: ISet(Of )
  fullname.vb: ISet(Of )
  name.vb: ISet(Of )
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
  isExternal: false
  name: EntityState
  nameWithType: InternalEntityEntry.EntityState
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EntityState
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState
  commentId: P:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: EntityState
  nameWithType: IUpdateEntry.EntityState
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified
  isExternal: false
  name: IsModified
  nameWithType: InternalEntityEntry.IsModified
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsModified
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: IsModified(IProperty)
  nameWithType: IUpdateEntry.IsModified(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: IsModified
    nameWithType: IUpdateEntry.IsModified
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: IsModified
    nameWithType: IUpdateEntry.IsModified
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsModified
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified
  isExternal: false
  name: SetPropertyModified
  nameWithType: InternalEntityEntry.SetPropertyModified
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetPropertyModified
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
  isExternal: false
  name: HasConceptualNull
  nameWithType: InternalEntityEntry.HasConceptualNull
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasConceptualNull
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull
  isExternal: false
  name: IsConceptualNull
  nameWithType: InternalEntityEntry.IsConceptualNull
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsConceptualNull
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue
  isExternal: false
  name: HasTemporaryValue
  nameWithType: InternalEntityEntry.HasTemporaryValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasTemporaryValue
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: HasTemporaryValue(IProperty)
  nameWithType: IUpdateEntry.HasTemporaryValue(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: HasTemporaryValue
    nameWithType: IUpdateEntry.HasTemporaryValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: HasTemporaryValue
    nameWithType: IUpdateEntry.HasTemporaryValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.HasTemporaryValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary
  isExternal: false
  name: MarkAsTemporary
  nameWithType: InternalEntityEntry.MarkAsTemporary
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkAsTemporary
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet
  isExternal: false
  name: MarkShadowPropertiesNotSet
  nameWithType: InternalEntityEntry.MarkShadowPropertiesNotSet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.MarkShadowPropertiesNotSet
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue
  isExternal: false
  name: ReadShadowValue<T>
  nameWithType: InternalEntityEntry.ReadShadowValue<T>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue<T>
  nameWithType.vb: InternalEntityEntry.ReadShadowValue(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadShadowValue(Of T)
  name.vb: ReadShadowValue(Of T)
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue
  isExternal: false
  name: GetCurrentValue<TProperty>
  nameWithType: InternalEntityEntry.GetCurrentValue<TProperty>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue<TProperty>
  nameWithType.vb: InternalEntityEntry.GetCurrentValue(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetCurrentValue(Of TProperty)
  name.vb: GetCurrentValue(Of TProperty)
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: GetCurrentValue<TProperty>(IPropertyBase)
  nameWithType: IUpdateEntry.GetCurrentValue<TProperty>(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  nameWithType.vb: IUpdateEntry.GetCurrentValue(Of TProperty)(IPropertyBase)
  fullname.vb: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  name.vb: GetCurrentValue(Of TProperty)(IPropertyBase)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetCurrentValue<TProperty>
    nameWithType: IUpdateEntry.GetCurrentValue<TProperty>
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue<TProperty>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue``1(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetCurrentValue(Of TProperty)
    nameWithType: IUpdateEntry.GetCurrentValue(Of TProperty)
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Of TProperty)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IPropertyBase
  nameWithType: IPropertyBase
  fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
- uid: '{TProperty}'
  commentId: '!:TProperty'
  definition: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: TProperty
  isExternal: false
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue
  isExternal: false
  name: GetOriginalValue<TProperty>
  nameWithType: InternalEntityEntry.GetOriginalValue<TProperty>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue<TProperty>
  nameWithType.vb: InternalEntityEntry.GetOriginalValue(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetOriginalValue(Of TProperty)
  name.vb: GetOriginalValue(Of TProperty)
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: GetOriginalValue<TProperty>(IProperty)
  nameWithType: IUpdateEntry.GetOriginalValue<TProperty>(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  nameWithType.vb: IUpdateEntry.GetOriginalValue(Of TProperty)(IProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: GetOriginalValue(Of TProperty)(IProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: GetOriginalValue<TProperty>
    nameWithType: IUpdateEntry.GetOriginalValue<TProperty>
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue<TProperty>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue``1(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: GetOriginalValue(Of TProperty)
    nameWithType: IUpdateEntry.GetOriginalValue(Of TProperty)
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Of TProperty)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue
  isExternal: false
  name: GetRelationshipSnapshotValue<TProperty>
  nameWithType: InternalEntityEntry.GetRelationshipSnapshotValue<TProperty>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue<TProperty>
  nameWithType.vb: InternalEntityEntry.GetRelationshipSnapshotValue(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetRelationshipSnapshotValue(Of TProperty)
  name.vb: GetRelationshipSnapshotValue(Of TProperty)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue
  isExternal: false
  name: ReadPropertyValue
  nameWithType: InternalEntityEntry.ReadPropertyValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ReadPropertyValue
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue
  isExternal: false
  name: WritePropertyValue
  nameWithType: InternalEntityEntry.WritePropertyValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.WritePropertyValue
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: GetCurrentValue(IPropertyBase)
  nameWithType: IUpdateEntry.GetCurrentValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetCurrentValue
    nameWithType: IUpdateEntry.GetCurrentValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetCurrentValue
    nameWithType: IUpdateEntry.GetCurrentValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue
  isExternal: false
  name: GetPreStoreGeneratedCurrentValue
  nameWithType: InternalEntityEntry.GetPreStoreGeneratedCurrentValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.GetPreStoreGeneratedCurrentValue
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: GetOriginalValue(IPropertyBase)
  nameWithType: IUpdateEntry.GetOriginalValue(IPropertyBase)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetOriginalValue
    nameWithType: IUpdateEntry.GetOriginalValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
    name: GetOriginalValue
    nameWithType: IUpdateEntry.GetOriginalValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.GetOriginalValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue
  isExternal: false
  name: SetCurrentValue
  nameWithType: InternalEntityEntry.SetCurrentValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetCurrentValue
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: true
  name: SetCurrentValue(IPropertyBase, Object)
  nameWithType: IUpdateEntry.SetCurrentValue(IPropertyBase, Object)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase, System.Object)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
    name: SetCurrentValue
    nameWithType: IUpdateEntry.SetCurrentValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue(Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)
    name: SetCurrentValue
    nameWithType: IUpdateEntry.SetCurrentValue
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetCurrentValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue
  isExternal: false
  name: SetOriginalValue
  nameWithType: InternalEntityEntry.SetOriginalValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetOriginalValue
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue
  isExternal: false
  name: SetRelationshipSnapshotValue
  nameWithType: InternalEntityEntry.SetRelationshipSnapshotValue
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetRelationshipSnapshotValue
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues
  isExternal: false
  name: EnsureOriginalValues
  nameWithType: InternalEntityEntry.EnsureOriginalValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureOriginalValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot
  isExternal: false
  name: EnsureRelationshipSnapshot
  nameWithType: InternalEntityEntry.EnsureRelationshipSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.EnsureRelationshipSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
  isExternal: false
  name: HasOriginalValuesSnapshot
  nameWithType: InternalEntityEntry.HasOriginalValuesSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasOriginalValuesSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
  isExternal: false
  name: HasRelationshipSnapshot
  nameWithType: InternalEntityEntry.HasRelationshipSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HasRelationshipSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot
  isExternal: false
  name: RemoveFromCollectionSnapshot
  nameWithType: InternalEntityEntry.RemoveFromCollectionSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.RemoveFromCollectionSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot
  isExternal: false
  name: AddToCollectionSnapshot
  nameWithType: InternalEntityEntry.AddToCollectionSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddToCollectionSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot
  isExternal: false
  name: AddRangeToCollectionSnapshot
  nameWithType: InternalEntityEntry.AddRangeToCollectionSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AddRangeToCollectionSnapshot
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item
  isExternal: false
  name: Item
  nameWithType: InternalEntityEntry.Item
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.Item
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty
  isExternal: false
  name: SetProperty
  nameWithType: InternalEntityEntry.SetProperty
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetProperty
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges
  isExternal: false
  name: AcceptChanges
  nameWithType: InternalEntityEntry.AcceptChanges
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.AcceptChanges
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave
  isExternal: false
  name: PrepareToSave
  nameWithType: InternalEntityEntry.PrepareToSave
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.PrepareToSave
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls
  isExternal: false
  name: HandleConceptualNulls
  nameWithType: InternalEntityEntry.HandleConceptualNulls
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleConceptualNulls
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete
  isExternal: false
  name: CascadeDelete
  nameWithType: InternalEntityEntry.CascadeDelete
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.CascadeDelete
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues
  isExternal: false
  name: DiscardStoreGeneratedValues
  nameWithType: InternalEntityEntry.DiscardStoreGeneratedValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.DiscardStoreGeneratedValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated
  isExternal: false
  name: IsStoreGenerated
  nameWithType: InternalEntityEntry.IsStoreGenerated
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsStoreGenerated
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: IsStoreGenerated(IProperty)
  nameWithType: IUpdateEntry.IsStoreGenerated(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: IsStoreGenerated
    nameWithType: IUpdateEntry.IsStoreGenerated
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
    name: IsStoreGenerated
    nameWithType: IUpdateEntry.IsStoreGenerated
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.IsStoreGenerated
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
  isExternal: false
  name: IsKeySet
  nameWithType: InternalEntityEntry.IsKeySet
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsKeySet
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry
  isExternal: false
  name: ToEntityEntry
  nameWithType: InternalEntityEntry.ToEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.ToEntityEntry
- uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
  commentId: M:Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
  parent: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  isExternal: false
  name: ToEntityEntry()
  nameWithType: IUpdateEntry.ToEntityEntry()
  fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
    name: ToEntityEntry
    nameWithType: IUpdateEntry.ToEntityEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
    name: ToEntityEntry
    nameWithType: IUpdateEntry.ToEntityEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry.ToEntityEntry
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: EntityEntry
  nameWithType: EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging
  isExternal: false
  name: HandleINotifyPropertyChanging
  nameWithType: InternalEntityEntry.HandleINotifyPropertyChanging
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanging
- uid: PropertyChangingEventArgs
  isExternal: true
  name: PropertyChangingEventArgs
  nameWithType: PropertyChangingEventArgs
  fullName: PropertyChangingEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged
  isExternal: false
  name: HandleINotifyPropertyChanged
  nameWithType: InternalEntityEntry.HandleINotifyPropertyChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyPropertyChanged
- uid: PropertyChangedEventArgs
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: PropertyChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged
  isExternal: false
  name: HandleINotifyCollectionChanged
  nameWithType: InternalEntityEntry.HandleINotifyCollectionChanged
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.HandleINotifyCollectionChanged
- uid: NotifyCollectionChangedEventArgs
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: NotifyCollectionChangedEventArgs
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded
  isExternal: false
  name: SetIsLoaded
  nameWithType: InternalEntityEntry.SetIsLoaded
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetIsLoaded
- uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.INavigation
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: INavigation
  nameWithType: INavigation
  fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded
  isExternal: false
  name: IsLoaded
  nameWithType: InternalEntityEntry.IsLoaded
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.IsLoaded
