### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  commentId: T:Microsoft.EntityFrameworkCore.EntityTypeExtensions
  id: EntityTypeExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  langs:
  - csharp
  - vb
  name: EntityTypeExtensions
  nameWithType: EntityTypeExtensions
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityTypeExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nExtension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.IEntityType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class EntityTypeExtensions
    content.vb: Public Module EntityTypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDerivedTypes(IEntityType)
  nameWithType: EntityTypeExtensions.GetDerivedTypes(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDerivedTypes
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all types in the model that derive from a given entity type.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetDerivedTypes(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDerivedTypes(entityType As IEntityType) As IEnumerable(Of IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The base type to find types that derive from. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
      description: 'The derived types. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: RootType(IEntityType)
  nameWithType: EntityTypeExtensions.RootType(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RootType
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the root base type for a given entity type.\n"
  example: []
  syntax:
    content: public static IEntityType RootType(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RootType(entityType As IEntityType) As IEntityType
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The type to find the root of. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: "\nThe root base type. If the given entity type is not a derived type, then the same entity type is returned.\n"
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(IEntityType, IEntityType)
  nameWithType: EntityTypeExtensions.IsAssignableFrom(IEntityType, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsAssignableFrom
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 62
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nDetermines if an entity type derives from (or is the same as) a given entity type.\n"
  example: []
  syntax:
    content: public static bool IsAssignableFrom(this IEntityType entityType, IEntityType derivedType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAssignableFrom(entityType As IEntityType, derivedType As IEntityType) As Boolean
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The base entity type. '
    - id: derivedType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to check if it derives from <em>entityType</em>. '
    return:
      type: System.Boolean
      description: "\nTrue if <em>derivedType</em> derives from (or is the same as) <em>entityType</em>, otherwise false.\n"
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: LeastDerivedType(IEntityType, IEntityType)
  nameWithType: EntityTypeExtensions.LeastDerivedType(IEntityType, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LeastDerivedType
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the least derived type between the specified two.\n"
  example: []
  syntax:
    content: public static IEntityType LeastDerivedType(this IEntityType entityType, IEntityType otherEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LeastDerivedType(entityType As IEntityType, otherEntityType As IEntityType) As IEntityType
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The type to compare. '
    - id: otherEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The other entity type to compare with. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: "\nThe least derived type between the specified two.\nIf the given entity types are not related, then <code>null</code> is returned.\n"
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindKey(IEntityType, IProperty)
  nameWithType: EntityTypeExtensions.FindKey(IEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 107
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the primary or alternate key that is defined on the given property. Returns null if no key is defined\nfor the given property.\n"
  example: []
  syntax:
    content: public static IKey FindKey(this IEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindKey(entityType As IEntityType, property As IProperty) As IKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the key on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property that the key is defined on. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
      description: 'The key, or null if none is defined. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKeys(IEntityType, IProperty)
  nameWithType: EntityTypeExtensions.FindForeignKeys(IEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 121
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified\nproperty are returned. Composite foreign keys that include the specified property are not returned.\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> FindForeignKeys(this IEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKeys(entityType As IEntityType, property As IProperty) As IEnumerable(Of IForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property to find the foreign keys on. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
      description: 'The foreign keys. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  id: FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKeys(IEntityType, IReadOnlyList<IProperty>)
  nameWithType: EntityTypeExtensions.FindForeignKeys(IEntityType, IReadOnlyList<IProperty>)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IProperty>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 131
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified\nset of properties are returned.\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> FindForeignKeys(this IEntityType entityType, IReadOnlyList<IProperty> properties)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKeys(entityType As IEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
      description: 'The properties to find the foreign keys on. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
      description: 'The foreign keys. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys*
  nameWithType.vb: EntityTypeExtensions.FindForeignKeys(IEntityType, IReadOnlyList(Of IProperty))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IProperty))
  name.vb: FindForeignKeys(IEntityType, IReadOnlyList(Of IProperty))
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKey(IEntityType, IProperty, IKey, IEntityType)
  nameWithType: EntityTypeExtensions.FindForeignKey(IEntityType, IProperty, IKey, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 155
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign key for the given properties that points to a given primary or alternate key. Returns null\nif no foreign key is found.\n"
  example: []
  syntax:
    content: public static IForeignKey FindForeignKey(this IEntityType entityType, IProperty property, IKey principalKey, IEntityType principalEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKey(entityType As IEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IForeignKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property that the foreign key is defined on. '
    - id: principalKey
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
      description: 'The primary or alternate key that is referenced. '
    - id: principalEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: "\nThe entity type that the relationship targets. This may be different from the type that <em>principalKey</em>\nis defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the\nbase type of the hierarchy).\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
      description: 'The foreign key, or null if none is defined. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetReferencingForeignKeys(IEntityType)
  nameWithType: EntityTypeExtensions.GetReferencingForeignKeys(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetReferencingForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 172
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type\nis the principal).\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> GetReferencingForeignKeys(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetReferencingForeignKeys(entityType As IEntityType) As IEnumerable(Of IForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the foreign keys for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
      description: 'The foreign keys that reference the given entity type. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  id: FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindNavigation(IEntityType, PropertyInfo)
  nameWithType: EntityTypeExtensions.FindNavigation(IEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindNavigation
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 181
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets a navigation property on the given entity type. Returns null if no navigation property is found.\n"
  example: []
  syntax:
    content: public static INavigation FindNavigation(this IEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindNavigation(entityType As IEntityType, propertyInfo As PropertyInfo) As INavigation
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the navigation property on. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The navigation property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindNavigation(IEntityType, String)
  nameWithType: EntityTypeExtensions.FindNavigation(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindNavigation
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 195
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets a navigation property on the given entity type. Returns null if no navigation property is found.\n"
  example: []
  syntax:
    content: public static INavigation FindNavigation(this IEntityType entityType, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindNavigation(entityType As IEntityType, name As String) As INavigation
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the navigation property on. '
    - id: name
      type: System.String
      description: 'The name of the navigation property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetNavigations(IEntityType)
  nameWithType: EntityTypeExtensions.GetNavigations(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetNavigations
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 208
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all navigation properties on the given entity type.\n"
  example: []
  syntax:
    content: public static IEnumerable<INavigation> GetNavigations(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNavigations(entityType As IEntityType) As IEnumerable(Of INavigation)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to get navigation properties for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
      description: 'All navigation properties on the given entity type. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  id: FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindProperty(IEntityType, PropertyInfo)
  nameWithType: EntityTypeExtensions.FindProperty(IEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindProperty
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 223
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Gets a property on the given entity type. Returns null if no property is found.\n</p>\n<p>\n    This API only finds scalar properties and does not find navigation properties. Use\n<xref href=\"Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType%2cSystem.Reflection.PropertyInfo)\" data-throw-if-not-resolved=\"false\"></xref> to find a navigation property.\n</p>\n"
  example: []
  syntax:
    content: public static IProperty FindProperty(this IEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindProperty(entityType As IEntityType, propertyInfo As PropertyInfo) As IProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the property on. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindIndex(IEntityType, IProperty)
  nameWithType: EntityTypeExtensions.FindIndex(IEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindIndex
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 237
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the index defined on the given property. Returns null if no index is defined.\n"
  example: []
  syntax:
    content: public static IIndex FindIndex(this IEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindIndex(entityType As IEntityType, property As IProperty) As IIndex
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to find the index on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property to find the index on. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IIndex
      description: 'The index, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetChangeTrackingStrategy(IEntityType)
  nameWithType: EntityTypeExtensions.GetChangeTrackingStrategy(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetChangeTrackingStrategy
    path: src/Microsoft.EntityFrameworkCore/Extensions/EntityTypeExtensions.cs
    startLine: 250
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the change tracking strategy being used for this entity type. This strategy indicates how the\ncontext detects changes to properties for an instance of the entity type.\n"
  example: []
  syntax:
    content: public static ChangeTrackingStrategy GetChangeTrackingStrategy(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetChangeTrackingStrategy(entityType As IEntityType) As ChangeTrackingStrategy
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type to get the change tracking strategy for. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
      description: 'The change tracking strategy. '
  overload: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes
  isExternal: false
  name: GetDerivedTypes
  nameWithType: EntityTypeExtensions.GetDerivedTypes
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetDerivedTypes
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEntityType>
  nameWithType: IEnumerable<IEntityType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>
  nameWithType.vb: IEnumerable(Of IEntityType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  name.vb: IEnumerable(Of IEntityType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType
  isExternal: false
  name: RootType
  nameWithType: EntityTypeExtensions.RootType
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.RootType
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom
  isExternal: false
  name: IsAssignableFrom
  nameWithType: EntityTypeExtensions.IsAssignableFrom
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.IsAssignableFrom
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType
  isExternal: false
  name: LeastDerivedType
  nameWithType: EntityTypeExtensions.LeastDerivedType
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.LeastDerivedType
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey
  isExternal: false
  name: FindKey
  nameWithType: EntityTypeExtensions.FindKey
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: Microsoft.EntityFrameworkCore.Metadata.IKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys
  isExternal: false
  name: FindForeignKeys
  nameWithType: EntityTypeExtensions.FindForeignKeys
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKeys
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IForeignKey>
  nameWithType: IEnumerable<IForeignKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>
  nameWithType.vb: IEnumerable(Of IForeignKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  name.vb: IEnumerable(Of IForeignKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IProperty>
  nameWithType: IReadOnlyList<IProperty>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IProperty>
  nameWithType.vb: IReadOnlyList(Of IProperty)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: IReadOnlyList(Of IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey
  isExternal: false
  name: FindForeignKey
  nameWithType: EntityTypeExtensions.FindForeignKey
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindForeignKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IForeignKey
  nameWithType: IForeignKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys
  isExternal: false
  name: GetReferencingForeignKeys
  nameWithType: EntityTypeExtensions.GetReferencingForeignKeys
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetReferencingForeignKeys
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation
  isExternal: false
  name: FindNavigation
  nameWithType: EntityTypeExtensions.FindNavigation
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.INavigation
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: INavigation
  nameWithType: INavigation
  fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations
  isExternal: false
  name: GetNavigations
  nameWithType: EntityTypeExtensions.GetNavigations
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetNavigations
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INavigation>
  nameWithType: IEnumerable<INavigation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.INavigation>
  nameWithType.vb: IEnumerable(Of INavigation)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.INavigation)
  name.vb: IEnumerable(Of INavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
  isExternal: true
  name: FindNavigation(IEntityType, PropertyInfo)
  nameWithType: EntityTypeExtensions.FindNavigation(IEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Reflection.PropertyInfo)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
    name: FindNavigation
    nameWithType: EntityTypeExtensions.FindNavigation
    fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Reflection.PropertyInfo)
    name: FindNavigation
    nameWithType: EntityTypeExtensions.FindNavigation
    fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty
  isExternal: false
  name: FindProperty
  nameWithType: EntityTypeExtensions.FindProperty
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindProperty
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex
  isExternal: false
  name: FindIndex
  nameWithType: EntityTypeExtensions.FindIndex
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.FindIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.IIndex
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IIndex
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IIndex
  nameWithType: IIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.IIndex
- uid: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy
  isExternal: false
  name: GetChangeTrackingStrategy
  nameWithType: EntityTypeExtensions.GetChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.EntityTypeExtensions.GetChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: ChangeTrackingStrategy
  nameWithType: ChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
