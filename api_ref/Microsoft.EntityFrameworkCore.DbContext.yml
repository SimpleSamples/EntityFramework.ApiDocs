### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  id: DbContext
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.DbContext.#ctor
  - Microsoft.EntityFrameworkCore.DbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)
  - Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)
  - Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)
  - Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  - Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
  - Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  - Microsoft.EntityFrameworkCore.DbContext.Database
  - Microsoft.EntityFrameworkCore.DbContext.Dispose
  - Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)
  - Microsoft.EntityFrameworkCore.DbContext.Entry``1(``0)
  - Microsoft.EntityFrameworkCore.DbContext.Find(System.Type,System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.Find``1(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[],System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance
  - Microsoft.EntityFrameworkCore.DbContext.Model
  - Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  - Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  - Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)
  - Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)
  - Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])
  - Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  - Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)
  - Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.DbContext.Set``1
  - Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)
  - Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)
  - Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])
  langs:
  - csharp
  - vb
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DbContext
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nA DbContext instance represents a session with the database and can be used to query and save\ninstances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.\n"
  remarks: "\n<p>\n    Typically you create a class that derives from DbContext and contains <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601\" data-throw-if-not-resolved=\"false\"></xref>\n    properties for each entity in the model. If the <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601\" data-throw-if-not-resolved=\"false\"></xref> properties have a public setter,\n    they are automatically initialized when the instance of the derived context is created.\n</p>\n<p>\n    Override the <xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref> method to configure the database (and\n    other options) to be used for the context. Alternatively, if you would rather perform configuration externally\n    instead of inline in your context, you can use <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder%601\" data-throw-if-not-resolved=\"false\"></xref>\n    (or <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder\" data-throw-if-not-resolved=\"false\"></xref>) to externally create an instance of <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptions%601\" data-throw-if-not-resolved=\"false\"></xref>\n    (or <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptions\" data-throw-if-not-resolved=\"false\"></xref>) and pass it to a base constructor of <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The model is discovered by running a set of conventions over the entity classes found in the\n<xref href=\"Microsoft.EntityFrameworkCore.DbSet%601\" data-throw-if-not-resolved=\"false\"></xref> properties on the derived context. To further configure the model that\nis discovered by convention, you can override the <xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)\" data-throw-if-not-resolved=\"false\"></xref> method.\n</p>\n"
  example: []
  syntax:
    content: 'public class DbContext : IDisposable, IInfrastructure<IServiceProvider>'
    content.vb: >-
      Public Class DbContext
          Implements IDisposable, IInfrastructure(Of IServiceProvider)
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.DbContext.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: DbContext()
  nameWithType: DbContext.DbContext()
  fullName: Microsoft.EntityFrameworkCore.DbContext.DbContext()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 73
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref> class. The\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref>\nmethod will be called to configure the database (and other options) to be used for this context.\n</p>\n"
  example: []
  syntax:
    content: protected DbContext()
    content.vb: Protected Sub New
  overload: Microsoft.EntityFrameworkCore.DbContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.DbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)'
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: DbContext(DbContextOptions)
  nameWithType: DbContext.DbContext(DbContextOptions)
  fullName: Microsoft.EntityFrameworkCore.DbContext.DbContext(Microsoft.EntityFrameworkCore.DbContextOptions)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 86
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref> class using the specified options.\n    The <xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref> method will still be called to allow further\n    configuration of the options.\n</p>\n"
  example: []
  syntax:
    content: public DbContext(DbContextOptions options)
    content.vb: Public Sub New(options As DbContextOptions)
    parameters:
    - id: options
      type: Microsoft.EntityFrameworkCore.DbContextOptions
      description: The options for this context.
  overload: Microsoft.EntityFrameworkCore.DbContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance
  commentId: P:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance
  id: Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance
  isEii: true
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: IInfrastructure<IServiceProvider>.Instance
  nameWithType: DbContext.IInfrastructure<IServiceProvider>.Instance
  fullName: Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 195
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Gets the scoped <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> being used to resolve services.\n</p>\n<p>\n    This property is intended for use by extension methods that need to make use of services\n    not directly exposed in the public API surface.\n</p>\n"
  example: []
  syntax:
    content: IServiceProvider IInfrastructure<IServiceProvider>.Instance { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance As IServiceProvider Implements IInfrastructure(Of IServiceProvider).Instance
    parameters: []
    return:
      type: System.IServiceProvider
  overload: Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Instance
  nameWithType.vb: DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
- uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  id: OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: OnConfiguring(DbContextOptionsBuilder)
  nameWithType: DbContext.OnConfiguring(DbContextOptionsBuilder)
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnConfiguring
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 213
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Override this method to configure the database (and other options) to be used for this context.\n    This method is called for each instance of the context that is created.\n</p>\n<p>\n    In situations where an instance of <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptions\" data-throw-if-not-resolved=\"false\"></xref> may or may not have been passed\n    to the constructor, you can use <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured\" data-throw-if-not-resolved=\"false\"></xref> to determine if\n    the options have already been set, and skip some or all of the logic in\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: protected virtual void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    content.vb: Protected Overridable Sub OnConfiguring(optionsBuilder As DbContextOptionsBuilder)
    parameters:
    - id: optionsBuilder
      type: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
      description: "\nA builder used to create or modify options for this context. Databases (and other extensions)\ntypically define extension methods on this object that allow you to configure the context.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  id: OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: OnModelCreating(ModelBuilder)
  nameWithType: DbContext.OnModelCreating(ModelBuilder)
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnModelCreating
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 231
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nOverride this method to further configure the model that was discovered by convention from the entity types\nexposed in <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601\" data-throw-if-not-resolved=\"false\"></xref> properties on your derived context. The resulting model may be cached\nand re-used for subsequent instances of your derived context.\n"
  remarks: "\nIf a model is explicitly set on the options for this context (via <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)\" data-throw-if-not-resolved=\"false\"></xref>)\nthen this method will not be run.\n"
  example: []
  syntax:
    content: protected virtual void OnModelCreating(ModelBuilder modelBuilder)
    content.vb: Protected Overridable Sub OnModelCreating(modelBuilder As ModelBuilder)
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: "\nThe builder being used to construct the model for this context. Databases (and other extensions) typically\ndefine extension methods on this object that allow you to configure aspects of the model that are specific\nto a given database.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  id: SaveChanges
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: SaveChanges()
  nameWithType: DbContext.SaveChanges()
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 246
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSaves all changes made in this context to the database.\n"
  remarks: "\nThis method will automatically call <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges\" data-throw-if-not-resolved=\"false\"></xref> to discover any\nchanges to entity instances before saving to the underlying database. This can be disabled via\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual int SaveChanges()
    content.vb: Public Overridable Function SaveChanges As Integer
    return:
      type: System.Int32
      description: "\nThe number of state entries written to the database.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.SaveChanges*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)
  id: SaveChanges(System.Boolean)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: SaveChanges(Boolean)
  nameWithType: DbContext.SaveChanges(Boolean)
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 264
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSaves all changes made in this context to the database.\n"
  remarks: "\nThis method will automatically call <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges\" data-throw-if-not-resolved=\"false\"></xref> to discover any\nchanges to entity instances before saving to the underlying database. This can be disabled via\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
    content.vb: Public Overridable Function SaveChanges(acceptAllChangesOnSuccess As Boolean) As Integer
    parameters:
    - id: acceptAllChangesOnSuccess
      type: System.Boolean
      description: "\nIndicates whether <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges\" data-throw-if-not-resolved=\"false\"></xref> is called after the changes have\nbeen sent successfully to the database.\n"
    return:
      type: System.Int32
      description: "\nThe number of state entries written to the database.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.SaveChanges*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(CancellationToken)
  nameWithType: DbContext.SaveChangesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 312
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously saves all changes made in this context to the database.\n"
  remarks: "\n<p>\n    This method will automatically call <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges\" data-throw-if-not-resolved=\"false\"></xref> to discover any\n    changes to entity instances before saving to the underlying database. This can be disabled via\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n    that any asynchronous operations have completed before calling another method on this context.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SaveChangesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous save operation. The task result contains the\nnumber of state entries written to the database.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(Boolean, CancellationToken)
  nameWithType: DbContext.SaveChangesAsync(Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 338
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously saves all changes made in this context to the database.\n"
  remarks: "\n<p>\n    This method will automatically call <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges\" data-throw-if-not-resolved=\"false\"></xref> to discover any\n    changes to entity instances before saving to the underlying database. This can be disabled via\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Multiple active operations on the same context instance are not supported.  Use 'await' to ensure\n    that any asynchronous operations have completed before calling another method on this context.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SaveChangesAsync(acceptAllChangesOnSuccess As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: acceptAllChangesOnSuccess
      type: System.Boolean
      description: "\nIndicates whether <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges\" data-throw-if-not-resolved=\"false\"></xref> is called after the changes have\nbeen sent successfully to the database.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous save operation. The task result contains the\nnumber of state entries written to the database.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Dispose
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Dispose
  id: Dispose
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DbContext.Dispose()
  fullName: Microsoft.EntityFrameworkCore.DbContext.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Dispose
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 362
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nReleases the allocated resources for this context.\n"
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: Microsoft.EntityFrameworkCore.DbContext.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Entry``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Entry``1(``0)
  id: Entry``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Entry<TEntity>(TEntity)
  nameWithType: DbContext.Entry<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Entry<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Entry
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 387
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets an <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the given entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  example: []
  syntax:
    content: 'public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity)where TEntity : class'
    content.vb: Public Overridable Function Entry(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to get the entry for. '
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: 'The entry for the given entity. '
  overload: Microsoft.EntityFrameworkCore.DbContext.Entry*
  nameWithType.vb: DbContext.Entry(Of TEntity)(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Entry(Of TEntity)(TEntity)
  name.vb: Entry(Of TEntity)(TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)
  id: Entry(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Entry(Object)
  nameWithType: DbContext.Entry(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Entry(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Entry
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 412
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Gets an <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the given entity. The entry provides\n    access to change tracking information and operations for the entity.\n</p>\n<p>\n    This method may be called on an entity that is not tracked. You can then\n    set the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State\" data-throw-if-not-resolved=\"false\"></xref> property on the returned entry\n    to have the context begin tracking the entity in the specified state.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityEntry Entry(object entity)
    content.vb: Public Overridable Function Entry(entity As Object) As EntityEntry
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to get the entry for. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
      description: 'The entry for the given entity. '
  overload: Microsoft.EntityFrameworkCore.DbContext.Entry*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Add``1(``0)
  id: Add``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Add<TEntity>(TEntity)
  nameWithType: DbContext.Add<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Add<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Add
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 449
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity, and any other reachable entities that are\nnot already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that\nthey will be inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: 'public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity)where TEntity : class'
    content.vb: Public Overridable Function Add(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to add. '
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Add*
  nameWithType.vb: DbContext.Add(Of TEntity)(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Add(Of TEntity)(TEntity)
  name.vb: Add(Of TEntity)(TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)
  id: AddAsync``1(``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddAsync<TEntity>(TEntity, CancellationToken)
  nameWithType: DbContext.AddAsync<TEntity>(TEntity, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddAsync<TEntity>(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 472
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity, and any other reachable entities that are\n    not already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    This method is async only to allow special value generators, such as the one used by\n    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',\n    to access the database asynchronously. For all other cases the non async method should be used.\n</p>\n"
  example: []
  syntax:
    content: 'public virtual Task<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = null)where TEntity : class'
    content.vb: Public Overridable Function AddAsync(Of TEntity As Class)(entity As TEntity, cancellationToken As CancellationToken = Nothing) As Task(Of EntityEntry(Of TEntity))
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to add. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}}
      description: "\nA task that represents the asynchronous Add operation. The task result contains the\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides access to change tracking\ninformation and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.AddAsync*
  nameWithType.vb: DbContext.AddAsync(Of TEntity)(TEntity, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AddAsync(Of TEntity)(TEntity, System.Threading.CancellationToken)
  name.vb: AddAsync(Of TEntity)(TEntity, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
  id: Attach``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Attach<TEntity>(TEntity)
  nameWithType: DbContext.Attach<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Attach<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Attach
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 509
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state \n    such that no operation will be performed when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> \n    is called.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: 'public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity)where TEntity : class'
    content.vb: Public Overridable Function Attach(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to attach. '
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Attach*
  nameWithType.vb: DbContext.Attach(Of TEntity)(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Attach(Of TEntity)(TEntity)
  name.vb: Attach(Of TEntity)(TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)
  id: Update``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Update<TEntity>(TEntity)
  nameWithType: DbContext.Update<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Update<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Update
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 538
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\n    be updated in the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    All properties of the entity will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> to begin tracking the entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref>\nstate and then use the returned <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> to mark the desired properties as modified.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: 'public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity)where TEntity : class'
    content.vb: Public Overridable Function Update(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to update. '
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Update*
  nameWithType.vb: DbContext.Update(Of TEntity)(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Update(Of TEntity)(TEntity)
  name.vb: Update(Of TEntity)(TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)
  id: Remove``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Remove<TEntity>(TEntity)
  nameWithType: DbContext.Remove<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Remove<TEntity>(TEntity)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Remove
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 563
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\nbe removed from the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  remarks: "\n<p>\n    If the entity is already tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state then the context will\n    stop tracking the entity (rather than marking it as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>) since the\n    entity was previously added to the context and does not exist in the database.\n</p>\n<p>\n    Any other reachable entities that are not already being tracked will be tracked in the same way that\n    they would be if <xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> was called before calling this method.\n    This allows any cascading actions to be applied when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n"
  example: []
  syntax:
    content: 'public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity)where TEntity : class'
    content.vb: Public Overridable Function Remove(Of TEntity As Class)(entity As TEntity) As EntityEntry(Of TEntity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: 'The entity to remove. '
    typeParameters:
    - id: TEntity
      description: 'The type of the entity. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry%601\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Remove*
  nameWithType.vb: DbContext.Remove(Of TEntity)(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Remove(Of TEntity)(TEntity)
  name.vb: Remove(Of TEntity)(TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)
  id: Add(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: DbContext.Add(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Add
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 606
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity, and any other reachable entities that are\nnot already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\nbe inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual EntityEntry Add(object entity)
    content.vb: Public Overridable Function Add(entity As Object) As EntityEntry
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to add. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Add*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object,System.Threading.CancellationToken)
  id: AddAsync(System.Object,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddAsync(Object, CancellationToken)
  nameWithType: DbContext.AddAsync(Object, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddAsync(System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 628
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity, and any other reachable entities that are\n    not already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    This method is async only to allow special value generators, such as the one used by\n    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',\n    to access the database asynchronously. For all other cases the non async method should be used.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddAsync(entity As Object, cancellationToken As CancellationToken = Nothing) As Task(Of EntityEntry)
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to add. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry}
      description: "\nA task that represents the asynchronous Add operation. The task result contains the\n<xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides access to change tracking\ninformation and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.AddAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  id: Attach(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Attach(Object)
  nameWithType: DbContext.Attach(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Attach
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 663
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state \n    such that no operation will be performed when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> \n    is called.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityEntry Attach(object entity)
    content.vb: Public Overridable Function Attach(entity As Object) As EntityEntry
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to attach. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Attach*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)
  id: Update(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Update(Object)
  nameWithType: DbContext.Update(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Update(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Update
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 691
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\n    be updated in the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    All properties of the entity will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to begin tracking the entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref>\nstate and then use the returned <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> to mark the desired properties as modified.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityEntry Update(object entity)
    content.vb: Public Overridable Function Update(entity As Object) As EntityEntry
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to update. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)
  id: Remove(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: DbContext.Remove(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Remove
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 715
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\nbe removed from the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  remarks: "\n<p>\n    If the entity is already tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state then the context will\n    stop tracking the entity (rather than marking it as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>) since the\n    entity was previously added to the context and does not exist in the database.\n</p>\n<p>\n    Any other reachable entities that are not already being tracked will be tracked in the same way that\n    they would be if <xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> was called before calling this method.\n    This allows any cascading actions to be applied when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityEntry Remove(object entity)
    content.vb: Public Overridable Function Remove(entity As Object) As EntityEntry
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity to remove. '
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> for the entity. The entry provides\naccess to change tracking information and operations for the entity.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.Remove*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])
  id: AddRange(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddRange(Object[])
  nameWithType: DbContext.AddRange(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 752
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entities, and any other reachable entities that are\nnot already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\nbe inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void AddRange(params object[] entities)
    content.vb: Public Overridable Sub AddRange(ParamArray entities As Object())
    parameters:
    - id: entities
      type: System.Object[]
      description: 'The entities to add. '
  overload: Microsoft.EntityFrameworkCore.DbContext.AddRange*
  nameWithType.vb: DbContext.AddRange(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Object())
  name.vb: AddRange(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])
  id: AddRangeAsync(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddRangeAsync(Object[])
  nameWithType: DbContext.AddRangeAsync(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddRangeAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 769
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity, and any other reachable entities that are\n    not already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    This method is async only to allow special value generators, such as the one used by\n    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',\n    to access the database asynchronously. For all other cases the non async method should be used.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task AddRangeAsync(params object[] entities)
    content.vb: Public Overridable Function AddRangeAsync(ParamArray entities As Object()) As Task
    parameters:
    - id: entities
      type: System.Object[]
      description: 'The entities to add. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the asynchronous operation. '
  overload: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync*
  nameWithType.vb: DbContext.AddRangeAsync(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Object())
  name.vb: AddRangeAsync(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  id: AttachRange(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AttachRange(Object[])
  nameWithType: DbContext.AttachRange(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AttachRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 789
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entities in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state \n    such that no operation will be performed when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> \n    is called.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual void AttachRange(params object[] entities)
    content.vb: Public Overridable Sub AttachRange(ParamArray entities As Object())
    parameters:
    - id: entities
      type: System.Object[]
      description: 'The entities to attach. '
  overload: Microsoft.EntityFrameworkCore.DbContext.AttachRange*
  nameWithType.vb: DbContext.AttachRange(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object())
  name.vb: AttachRange(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])
  id: UpdateRange(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: UpdateRange(Object[])
  nameWithType: DbContext.UpdateRange(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UpdateRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 813
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entities in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be updated in the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    All properties of each entity will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to begin tracking each entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref>\nstate and then use the returned <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> to mark the desired properties as modified.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual void UpdateRange(params object[] entities)
    content.vb: Public Overridable Sub UpdateRange(ParamArray entities As Object())
    parameters:
    - id: entities
      type: System.Object[]
      description: 'The entities to update. '
  overload: Microsoft.EntityFrameworkCore.DbContext.UpdateRange*
  nameWithType.vb: DbContext.UpdateRange(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Object())
  name.vb: UpdateRange(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])
  id: RemoveRange(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: RemoveRange(Object[])
  nameWithType: DbContext.RemoveRange(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 833
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\nbe removed from the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  remarks: "\n<p>\n    If any of the entities are already tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state then the context will\n    stop tracking those entities (rather than marking them as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>) since those\n    entities were previously added to the context and do not exist in the database.\n</p>\n<p>\n    Any other reachable entities that are not already being tracked will be tracked in the same way that\n    they would be if <xref href=\"Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> was called before calling this method.\n    This allows any cascading actions to be applied when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n"
  example: []
  syntax:
    content: public virtual void RemoveRange(params object[] entities)
    content.vb: Public Overridable Sub RemoveRange(ParamArray entities As Object())
    parameters:
    - id: entities
      type: System.Object[]
      description: 'The entities to remove. '
  overload: Microsoft.EntityFrameworkCore.DbContext.RemoveRange*
  nameWithType.vb: DbContext.RemoveRange(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Object())
  name.vb: RemoveRange(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable{System.Object})
  id: AddRange(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<Object>)
  nameWithType: DbContext.AddRange(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 852
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entities, and any other reachable entities that are\nnot already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\nbe inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void AddRange(IEnumerable<object> entities)
    content.vb: Public Overridable Sub AddRange(entities As IEnumerable(Of Object))
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: 'The entities to add. '
  overload: Microsoft.EntityFrameworkCore.DbContext.AddRange*
  nameWithType.vb: DbContext.AddRange(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AddRange(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AddRange(IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)
  id: AddRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AddRangeAsync(IEnumerable<Object>, CancellationToken)
  nameWithType: DbContext.AddRangeAsync(IEnumerable<Object>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable<System.Object>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddRangeAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 872
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entity, and any other reachable entities that are\n    not already being tracked, in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be inserted into the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    This method is async only to allow special value generators, such as the one used by\n    'Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo',\n    to access the database asynchronously. For all other cases the non async method should be used.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddRangeAsync(entities As IEnumerable(Of Object), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: 'The entities to add. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation.\n"
  overload: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync*
  nameWithType.vb: DbContext.AddRangeAsync(IEnumerable(Of Object), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(System.Collections.Generic.IEnumerable(Of System.Object), System.Threading.CancellationToken)
  name.vb: AddRangeAsync(IEnumerable(Of Object), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  id: AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: AttachRange(IEnumerable<Object>)
  nameWithType: DbContext.AttachRange(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AttachRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 904
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entities in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state \n    such that no operation will be performed when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> \n    is called.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual void AttachRange(IEnumerable<object> entities)
    content.vb: Public Overridable Sub AttachRange(entities As IEnumerable(Of Object))
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: 'The entities to attach. '
  overload: Microsoft.EntityFrameworkCore.DbContext.AttachRange*
  nameWithType.vb: DbContext.AttachRange(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AttachRange(IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable{System.Object})
  id: UpdateRange(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: UpdateRange(IEnumerable<Object>)
  nameWithType: DbContext.UpdateRange(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UpdateRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 928
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Begins tracking the given entities in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state such that they will\n    be updated in the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n<p>\n    All properties of each entity will be marked as modified. To mark only some properties as modified, use\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> to begin tracking each entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Unchanged\" data-throw-if-not-resolved=\"false\"></xref>\nstate and then use the returned <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry\" data-throw-if-not-resolved=\"false\"></xref> to mark the desired properties as modified.\n</p>\n<p>\n    A recursive search of the navigation properties will be performed to find reachable entities\n    that are not already being tracked by the context. These entities will also begin to be tracked \n    by the context. If a reachable entity has its primary key value set\n    then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Modified\" data-throw-if-not-resolved=\"false\"></xref> state. If the primary key\n    value is not set then it will be tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state. \n    An entity is considered to have its primary key value set if the primary key property is set \n    to anything other than the CLR default for the property type.\n</p>\n"
  example: []
  syntax:
    content: public virtual void UpdateRange(IEnumerable<object> entities)
    content.vb: Public Overridable Sub UpdateRange(entities As IEnumerable(Of Object))
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: 'The entities to update. '
  overload: Microsoft.EntityFrameworkCore.DbContext.UpdateRange*
  nameWithType.vb: DbContext.UpdateRange(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.UpdateRange(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: UpdateRange(IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable{System.Object})
  id: RemoveRange(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: RemoveRange(IEnumerable<Object>)
  nameWithType: DbContext.RemoveRange(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveRange
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 948
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nBegins tracking the given entity in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref> state such that it will\nbe removed from the database when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  remarks: "\n<p>\n    If any of the entities are already tracked in the <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Added\" data-throw-if-not-resolved=\"false\"></xref> state then the context will\n    stop tracking those entities (rather than marking them as <xref href=\"Microsoft.EntityFrameworkCore.EntityState.Deleted\" data-throw-if-not-resolved=\"false\"></xref>) since those\n    entities were previously added to the context and do not exist in the database.\n</p>\n<p>\n    Any other reachable entities that are not already being tracked will be tracked in the same way that\n    they would be if <xref href=\"Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable%7bSystem.Object%7d)\" data-throw-if-not-resolved=\"false\"></xref> was called before calling this method.\n    This allows any cascading actions to be applied when <xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> is called.\n</p>\n"
  example: []
  syntax:
    content: public virtual void RemoveRange(IEnumerable<object> entities)
    content.vb: Public Overridable Sub RemoveRange(entities As IEnumerable(Of Object))
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: 'The entities to remove. '
  overload: Microsoft.EntityFrameworkCore.DbContext.RemoveRange*
  nameWithType.vb: DbContext.RemoveRange(IEnumerable(Of Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.RemoveRange(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: RemoveRange(IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.DbContext.Database
  commentId: P:Microsoft.EntityFrameworkCore.DbContext.Database
  id: Database
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: DbContext.Database
  fullName: Microsoft.EntityFrameworkCore.DbContext.Database
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Database
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 975
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nProvides access to database related information and operations for this context.\n"
  example: []
  syntax:
    content: public virtual DatabaseFacade Database { get; }
    content.vb: Public Overridable ReadOnly Property Database As DatabaseFacade
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  overload: Microsoft.EntityFrameworkCore.DbContext.Database*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  commentId: P:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  id: ChangeTracker
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: ChangeTracker
  nameWithType: DbContext.ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ChangeTracker
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 980
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nProvides access to information and operations for entity instances this context is tracking.\n"
  example: []
  syntax:
    content: public virtual ChangeTracker ChangeTracker { get; }
    content.vb: Public Overridable ReadOnly Property ChangeTracker As ChangeTracker
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  overload: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.DbContext.Model
  commentId: P:Microsoft.EntityFrameworkCore.DbContext.Model
  id: Model
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: DbContext.Model
  fullName: Microsoft.EntityFrameworkCore.DbContext.Model
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Model
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 987
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nThe metadata about the shape of entities, the relationships between them, and how they map to the database.\n"
  example: []
  syntax:
    content: public virtual IModel Model { get; }
    content.vb: Public Overridable ReadOnly Property Model As IModel
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
  overload: Microsoft.EntityFrameworkCore.DbContext.Model*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.DbContext.Set``1
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Set``1
  id: Set``1
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Set<TEntity>()
  nameWithType: DbContext.Set<TEntity>()
  fullName: Microsoft.EntityFrameworkCore.DbContext.Set<TEntity>()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Set
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 996
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nCreates a <xref href=\"Microsoft.EntityFrameworkCore.DbSet%601\" data-throw-if-not-resolved=\"false\"></xref> that can be used to query and save instances of <em>TEntity</em>.\n"
  example: []
  syntax:
    content: 'public virtual DbSet<TEntity> Set<TEntity>()where TEntity : class'
    content.vb: Public Overridable Function Set(Of TEntity As Class) As DbSet(Of TEntity)
    typeParameters:
    - id: TEntity
      description: 'The type of entity for which a set should be returned. '
    return:
      type: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
      description: 'A set for the given entity type. '
  overload: Microsoft.EntityFrameworkCore.DbContext.Set*
  nameWithType.vb: DbContext.Set(Of TEntity)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Set(Of TEntity)()
  name.vb: Set(Of TEntity)()
- uid: Microsoft.EntityFrameworkCore.DbContext.Find(System.Type,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Find(System.Type,System.Object[])
  id: Find(System.Type,System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Find(Type, Object[])
  nameWithType: DbContext.Find(Type, Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.Find(System.Type, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Find
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1021
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: public virtual object Find(Type entityType, params object[] keyValues)
    content.vb: Public Overridable Function Find(entityType As Type, ParamArray keyValues As Object()) As Object
    parameters:
    - id: entityType
      type: System.Type
      description: 'The type of entity to find. '
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    return:
      type: System.Object
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.Find*
  nameWithType.vb: DbContext.Find(Type, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Find(System.Type, System.Object())
  name.vb: Find(Type, Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[])
  id: FindAsync(System.Type,System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: FindAsync(Type, Object[])
  nameWithType: DbContext.FindAsync(Type, Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1034
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: public virtual Task<object> FindAsync(Type entityType, params object[] keyValues)
    content.vb: Public Overridable Function FindAsync(entityType As Type, ParamArray keyValues As Object()) As Task(Of Object)
    parameters:
    - id: entityType
      type: System.Type
      description: 'The type of entity to find. '
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.FindAsync*
  nameWithType.vb: DbContext.FindAsync(Type, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type, System.Object())
  name.vb: FindAsync(Type, Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)
  id: FindAsync(System.Type,System.Object[],System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: FindAsync(Type, Object[], CancellationToken)
  nameWithType: DbContext.FindAsync(Type, Object[], CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type, System.Object[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1048
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: public virtual Task<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
    content.vb: Public Overridable Function FindAsync(entityType As Type, keyValues As Object(), cancellationToken As CancellationToken) As Task(Of Object)
    parameters:
    - id: entityType
      type: System.Type
      description: 'The type of entity to find. '
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.FindAsync*
  nameWithType.vb: DbContext.FindAsync(Type, Object(), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.FindAsync(System.Type, System.Object(), System.Threading.CancellationToken)
  name.vb: FindAsync(Type, Object(), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.DbContext.Find``1(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Find``1(System.Object[])
  id: Find``1(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: Find<TEntity>(Object[])
  nameWithType: DbContext.Find<TEntity>(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.Find<TEntity>(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Find
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1061
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: 'public virtual TEntity Find<TEntity>(params object[] keyValues)where TEntity : class'
    content.vb: Public Overridable Function Find(Of TEntity As Class)(ParamArray keyValues As Object()) As TEntity
    parameters:
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    typeParameters:
    - id: TEntity
      description: 'The type of entity to find. '
    return:
      type: '{TEntity}'
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.Find*
  nameWithType.vb: DbContext.Find(Of TEntity)(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.Find(Of TEntity)(System.Object())
  name.vb: Find(Of TEntity)(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[])
  id: FindAsync``1(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: FindAsync<TEntity>(Object[])
  nameWithType: DbContext.FindAsync<TEntity>(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.FindAsync<TEntity>(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1074
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: 'public virtual Task<TEntity> FindAsync<TEntity>(params object[] keyValues)where TEntity : class'
    content.vb: Public Overridable Function FindAsync(Of TEntity As Class)(ParamArray keyValues As Object()) As Task(Of TEntity)
    parameters:
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    typeParameters:
    - id: TEntity
      description: 'The type of entity to find. '
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.FindAsync*
  nameWithType.vb: DbContext.FindAsync(Of TEntity)(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.FindAsync(Of TEntity)(System.Object())
  name.vb: FindAsync(Of TEntity)(Object())
- uid: Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[],System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.FindAsync``1(System.Object[],System.Threading.CancellationToken)
  id: FindAsync``1(System.Object[],System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.DbContext
  langs:
  - csharp
  - vb
  name: FindAsync<TEntity>(Object[], CancellationToken)
  nameWithType: DbContext.FindAsync<TEntity>(Object[], CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.DbContext.FindAsync<TEntity>(System.Object[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindAsync
    path: src/Microsoft.EntityFrameworkCore/DbContext.cs
    startLine: 1088
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nFinds an entity with the given primary key values. If an entity with the given primary key values\nis being tracked by the context, then it is returned immediately without making a request to the\ndatabase. Otherwise, a query is made to the dataabse for an entity with the given primary key values\nand this entity, if found, is attached to the context and returned. If no entity is found, then\nnull is returned.\n"
  example: []
  syntax:
    content: 'public virtual Task<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken)where TEntity : class'
    content.vb: Public Overridable Function FindAsync(Of TEntity As Class)(keyValues As Object(), cancellationToken As CancellationToken) As Task(Of TEntity)
    parameters:
    - id: keyValues
      type: System.Object[]
      description: The values of the primary key for the entity to be found.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    typeParameters:
    - id: TEntity
      description: 'The type of entity to find. '
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
      description: The entity found, or null.
  overload: Microsoft.EntityFrameworkCore.DbContext.FindAsync*
  nameWithType.vb: DbContext.FindAsync(Of TEntity)(Object(), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContext.FindAsync(Of TEntity)(System.Object(), System.Threading.CancellationToken)
  name.vb: FindAsync(Of TEntity)(Object(), CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.DbSet`1
  commentId: T:Microsoft.EntityFrameworkCore.DbSet`1
  isExternal: false
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: false
  name: OnConfiguring(DbContextOptionsBuilder)
  nameWithType: DbContext.OnConfiguring(DbContextOptionsBuilder)
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
    name: OnConfiguring
    nameWithType: DbContext.OnConfiguring
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
    name: OnConfiguring
    nameWithType: DbContext.OnConfiguring
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContextOptionsBuilder<TContext>
  nameWithType: DbContextOptionsBuilder<TContext>
  fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder<TContext>
  nameWithType.vb: DbContextOptionsBuilder(Of TContext)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder(Of TContext)
  name.vb: DbContextOptionsBuilder(Of TContext)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContextOptionsBuilder
  nameWithType: DbContextOptionsBuilder
  fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
- uid: Microsoft.EntityFrameworkCore.DbContextOptions`1
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptions`1
  isExternal: false
  name: DbContextOptions<TContext>
  nameWithType: DbContextOptions<TContext>
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions<TContext>
  nameWithType.vb: DbContextOptions(Of TContext)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContextOptions(Of TContext)
  name.vb: DbContextOptions(Of TContext)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContextOptions`1
    name: DbContextOptions
    nameWithType: DbContextOptions
    fullName: Microsoft.EntityFrameworkCore.DbContextOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContextOptions`1
    name: DbContextOptions
    nameWithType: DbContextOptions
    fullName: Microsoft.EntityFrameworkCore.DbContextOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContextOptions
  nameWithType: DbContextOptions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: false
  name: OnModelCreating(ModelBuilder)
  nameWithType: DbContext.OnModelCreating(ModelBuilder)
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
    name: OnModelCreating
    nameWithType: DbContext.OnModelCreating
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ModelBuilder
    name: ModelBuilder
    nameWithType: ModelBuilder
    fullName: Microsoft.EntityFrameworkCore.ModelBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
    name: OnModelCreating
    nameWithType: DbContext.OnModelCreating
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ModelBuilder
    name: ModelBuilder
    nameWithType: ModelBuilder
    fullName: Microsoft.EntityFrameworkCore.ModelBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  name: IInfrastructure<IServiceProvider>
  nameWithType: IInfrastructure<IServiceProvider>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>
  nameWithType.vb: IInfrastructure(Of IServiceProvider)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of System.IServiceProvider)
  name.vb: IInfrastructure(Of IServiceProvider)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
  parent: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  definition: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
  name: GetService<TService>()
  nameWithType: AccessorExtensions.GetService<TService>()
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService<TService>()
  nameWithType.vb: AccessorExtensions.GetService(Of TService)()
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService(Of TService)()
  name.vb: GetService(Of TService)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1
    name: GetService<TService>
    nameWithType: AccessorExtensions.GetService<TService>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService<TService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1
    name: GetService(Of TService)
    nameWithType: AccessorExtensions.GetService(Of TService)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService(Of TService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  parent: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  definition: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  name: GetInfrastructure<IServiceProvider>()
  nameWithType: AccessorExtensions.GetInfrastructure<IServiceProvider>()
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<System.IServiceProvider>()
  nameWithType.vb: AccessorExtensions.GetInfrastructure(Of IServiceProvider)()
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of System.IServiceProvider)()
  name.vb: GetInfrastructure(Of IServiceProvider)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
    name: GetInfrastructure<IServiceProvider>
    nameWithType: AccessorExtensions.GetInfrastructure<IServiceProvider>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<System.IServiceProvider>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1
    name: GetInfrastructure(Of IServiceProvider)
    nameWithType: AccessorExtensions.GetInfrastructure(Of IServiceProvider)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of System.IServiceProvider)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  isExternal: false
  name: IInfrastructure<T>
  nameWithType: IInfrastructure<T>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>
  nameWithType.vb: IInfrastructure(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T)
  name.vb: IInfrastructure(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
  isExternal: true
  name: GetService<TService>(IInfrastructure<IServiceProvider>)
  nameWithType: AccessorExtensions.GetService<TService>(IInfrastructure<IServiceProvider>)
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService<TService>(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>)
  nameWithType.vb: AccessorExtensions.GetService(Of TService)(IInfrastructure(Of IServiceProvider))
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService(Of TService)(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of System.IServiceProvider))
  name.vb: GetService(Of TService)(IInfrastructure(Of IServiceProvider))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
    name: GetService<TService>
    nameWithType: AccessorExtensions.GetService<TService>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService<TService>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider})
    name: GetService(Of TService)
    nameWithType: AccessorExtensions.GetService(Of TService)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService(Of TService)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: AccessorExtensions
  nameWithType: AccessorExtensions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions
- uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
  isExternal: false
  name: GetInfrastructure<T>(IInfrastructure<T>)
  nameWithType: AccessorExtensions.GetInfrastructure<T>(IInfrastructure<T>)
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<T>(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>)
  nameWithType.vb: AccessorExtensions.GetInfrastructure(Of T)(IInfrastructure(Of T))
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of T)(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T))
  name.vb: GetInfrastructure(Of T)(IInfrastructure(Of T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
    name: GetInfrastructure<T>
    nameWithType: AccessorExtensions.GetInfrastructure<T>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure``1(Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{``0})
    name: GetInfrastructure(Of T)
    nameWithType: AccessorExtensions.GetInfrastructure(Of T)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetInfrastructure(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.#ctor
  isExternal: false
  name: DbContext
  nameWithType: DbContext.DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext.DbContext
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{System#IServiceProvider}#Instance
  isExternal: false
  name: IInfrastructure<IServiceProvider>.Instance
  nameWithType: DbContext.IInfrastructure<IServiceProvider>.Instance
  fullName: Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
  nameWithType.vb: DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}.Instance
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{System.IServiceProvider}
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  name: Instance
  nameWithType: IInfrastructure<IServiceProvider>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance
  nameWithType.vb: IInfrastructure(Of IServiceProvider).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of System.IServiceProvider).Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  isExternal: false
  name: Instance
  nameWithType: IInfrastructure<T>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>.Instance
  nameWithType.vb: IInfrastructure(Of T).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T).Instance
- uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured
  commentId: P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured
  parent: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  isExternal: false
  name: IsConfigured
  nameWithType: DbContextOptionsBuilder.IsConfigured
  fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured
- uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
  isExternal: false
  name: OnConfiguring
  nameWithType: DbContext.OnConfiguring
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
- uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)
  commentId: M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)
- uid: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating
  isExternal: false
  name: OnModelCreating
  nameWithType: DbContext.OnModelCreating
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnModelCreating
- uid: Microsoft.EntityFrameworkCore.ModelBuilder
  commentId: T:Microsoft.EntityFrameworkCore.ModelBuilder
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: ModelBuilder
  nameWithType: ModelBuilder
  fullName: Microsoft.EntityFrameworkCore.ModelBuilder
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  isExternal: false
  name: SaveChanges
  nameWithType: DbContext.SaveChanges
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync
  isExternal: false
  name: SaveChangesAsync
  nameWithType: DbContext.SaveChangesAsync
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.DbContext.Dispose*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Dispose
  isExternal: false
  name: Dispose
  nameWithType: DbContext.Dispose
  fullName: Microsoft.EntityFrameworkCore.DbContext.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  isExternal: false
  name: EntityEntry<TEntity>
  nameWithType: EntityEntry<TEntity>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>
  nameWithType.vb: EntityEntry(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity)
  name.vb: EntityEntry(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Entry*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Entry
  isExternal: false
  name: Entry<TEntity>
  nameWithType: DbContext.Entry<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Entry<TEntity>
  nameWithType.vb: DbContext.Entry(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Entry(Of TEntity)
  name.vb: Entry(Of TEntity)
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{``0}
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  definition: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  name: EntityEntry<TEntity>
  nameWithType: EntityEntry<TEntity>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>
  nameWithType.vb: EntityEntry(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity)
  name.vb: EntityEntry(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  isExternal: false
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: EntityEntry
  nameWithType: EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  isExternal: false
  name: State
  nameWithType: EntityEntry.State
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry.State
- uid: Microsoft.EntityFrameworkCore.EntityState.Added
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Added
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: false
  name: SaveChanges()
  nameWithType: DbContext.SaveChanges()
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    nameWithType: DbContext.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    nameWithType: DbContext.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Add*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Add
  isExternal: false
  name: Add<TEntity>
  nameWithType: DbContext.Add<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Add<TEntity>
  nameWithType.vb: DbContext.Add(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Add(Of TEntity)
  name.vb: Add(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext.AddAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.AddAsync
  isExternal: false
  name: AddAsync<TEntity>
  nameWithType: DbContext.AddAsync<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddAsync<TEntity>
  nameWithType.vb: DbContext.AddAsync(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.AddAsync(Of TEntity)
  name.vb: AddAsync(Of TEntity)
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EntityEntry<TEntity>>
  nameWithType: Task<EntityEntry<TEntity>>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>>
  nameWithType.vb: Task(Of EntityEntry(Of TEntity))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity))
  name.vb: Task(Of EntityEntry(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityState.Unchanged
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Unchanged
- uid: Microsoft.EntityFrameworkCore.DbContext.Attach*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Attach
  isExternal: false
  name: Attach<TEntity>
  nameWithType: DbContext.Attach<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Attach<TEntity>
  nameWithType.vb: DbContext.Attach(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Attach(Of TEntity)
  name.vb: Attach(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.EntityState.Modified
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Modified
- uid: Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
  isExternal: false
  name: Attach<TEntity>(TEntity)
  nameWithType: DbContext.Attach<TEntity>(TEntity)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Attach<TEntity>(TEntity)
  nameWithType.vb: DbContext.Attach(Of TEntity)(TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Attach(Of TEntity)(TEntity)
  name.vb: Attach(Of TEntity)(TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
    name: Attach<TEntity>
    nameWithType: DbContext.Attach<TEntity>
    fullName: Microsoft.EntityFrameworkCore.DbContext.Attach<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.Attach``1(``0)
    name: Attach(Of TEntity)
    nameWithType: DbContext.Attach(Of TEntity)
    fullName: Microsoft.EntityFrameworkCore.DbContext.Attach(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Update*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Update
  isExternal: false
  name: Update<TEntity>
  nameWithType: DbContext.Update<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Update<TEntity>
  nameWithType.vb: DbContext.Update(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Update(Of TEntity)
  name.vb: Update(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.EntityState.Deleted
  commentId: F:Microsoft.EntityFrameworkCore.EntityState.Deleted
- uid: Microsoft.EntityFrameworkCore.DbContext.Remove*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Remove
  isExternal: false
  name: Remove<TEntity>
  nameWithType: DbContext.Remove<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Remove<TEntity>
  nameWithType.vb: DbContext.Remove(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Remove(Of TEntity)
  name.vb: Remove(Of TEntity)
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EntityEntry>
  nameWithType: Task<EntityEntry>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry>
  nameWithType.vb: Task(Of EntityEntry)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  name.vb: Task(Of EntityEntry)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    name: EntityEntry
    nameWithType: EntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: true
  name: Attach(Object)
  nameWithType: DbContext.Attach(Object)
  fullName: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
    name: Attach
    nameWithType: DbContext.Attach
    fullName: Microsoft.EntityFrameworkCore.DbContext.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.Attach(System.Object)
    name: Attach
    nameWithType: DbContext.Attach
    fullName: Microsoft.EntityFrameworkCore.DbContext.Attach
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRange*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.AddRange
  isExternal: false
  name: AddRange
  nameWithType: DbContext.AddRange
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRange
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync
  isExternal: false
  name: AddRangeAsync
  nameWithType: DbContext.AddRangeAsync
  fullName: Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.AttachRange
  isExternal: false
  name: AttachRange
  nameWithType: DbContext.AttachRange
  fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange
- uid: Microsoft.EntityFrameworkCore.DbContext.UpdateRange*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.UpdateRange
  isExternal: false
  name: UpdateRange
  nameWithType: DbContext.UpdateRange
  fullName: Microsoft.EntityFrameworkCore.DbContext.UpdateRange
- uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: true
  name: AttachRange(Object[])
  nameWithType: DbContext.AttachRange(Object[])
  fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
  nameWithType.vb: DbContext.AttachRange(Object())
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object())
  name.vb: AttachRange(Object())
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
    name: AttachRange
    nameWithType: DbContext.AttachRange
    fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Object[])
    name: AttachRange
    nameWithType: DbContext.AttachRange
    fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.RemoveRange*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.RemoveRange
  isExternal: false
  name: RemoveRange
  nameWithType: DbContext.RemoveRange
  fullName: Microsoft.EntityFrameworkCore.DbContext.RemoveRange
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: true
  name: AttachRange(IEnumerable<Object>)
  nameWithType: DbContext.AttachRange(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable<System.Object>)
  nameWithType.vb: DbContext.AttachRange(IEnumerable(Of Object))
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AttachRange(IEnumerable(Of Object))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
    name: AttachRange
    nameWithType: DbContext.AttachRange
    fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.AttachRange(System.Collections.Generic.IEnumerable{System.Object})
    name: AttachRange
    nameWithType: DbContext.AttachRange
    fullName: Microsoft.EntityFrameworkCore.DbContext.AttachRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Database*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Database
  isExternal: false
  name: Database
  nameWithType: DbContext.Database
  fullName: Microsoft.EntityFrameworkCore.DbContext.Database
- uid: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: DatabaseFacade
  nameWithType: DatabaseFacade
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
- uid: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
  isExternal: false
  name: ChangeTracker
  nameWithType: DbContext.ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.DbContext.ChangeTracker
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: ChangeTracker
  nameWithType: ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
- uid: Microsoft.EntityFrameworkCore.DbContext.Model*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Model
  isExternal: false
  name: Model
  nameWithType: DbContext.Model
  fullName: Microsoft.EntityFrameworkCore.DbContext.Model
- uid: Microsoft.EntityFrameworkCore.Metadata.IModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IModel
  nameWithType: IModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IModel
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.DbContext.Set*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Set
  isExternal: false
  name: Set<TEntity>
  nameWithType: DbContext.Set<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbContext.Set<TEntity>
  nameWithType.vb: DbContext.Set(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContext.Set(Of TEntity)
  name.vb: Set(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.DbSet{``0}
  parent: Microsoft.EntityFrameworkCore
  definition: Microsoft.EntityFrameworkCore.DbSet`1
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContext.Find*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.Find
  isExternal: false
  name: Find
  nameWithType: DbContext.Find
  fullName: Microsoft.EntityFrameworkCore.DbContext.Find
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.DbContext.FindAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContext.FindAsync
  isExternal: false
  name: FindAsync
  nameWithType: DbContext.FindAsync
  fullName: Microsoft.EntityFrameworkCore.DbContext.FindAsync
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullname.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
