### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  commentId: T:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  id: EntityFrameworkQueryableExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: EntityFrameworkQueryableExtensions
  nameWithType: EntityFrameworkQueryableExtensions
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityFrameworkQueryableExtensions
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nEntity Framework LINQ related extension methods.\n"
  example: []
  syntax:
    content: public static class EntityFrameworkQueryableExtensions
    content.vb: Public Module EntityFrameworkQueryableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AnyAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AnyAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AnyAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously determines whether a sequence contains any elements.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AnyAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to check for being empty.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>true</code> if the source sequence contains any elements; otherwise, <code>false</code>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: AnyAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AnyAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 84
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously determines whether any element of a sequence satisfies a condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AnyAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> whose elements to test for a condition.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>true</code> if any elements in the source sequence pass the test in the specified\npredicate; otherwise, <code>false</code>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: AnyAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AllAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously determines whether all the elements of a sequence satisfy a condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AllAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> whose elements to test for a condition.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>true</code> if every element of the source sequence passes the test in the specified\npredicate; otherwise, <code>false</code>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AllAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: AllAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: CountAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.CountAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CountAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 156
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the number of elements in a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CountAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the number of elements in the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: CountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CountAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 189
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the number of elements in a sequence that satisfy a condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int> CountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CountAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the number of elements in the sequence that satisfy the condition in the predicate\nfunction.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: CountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LongCountAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 222
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents the total number of elements in a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCountAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the number of elements in the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: LongCountAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LongCountAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 256
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of elements in a sequence\nthat satisfy a condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCountAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to be counted.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the number of elements in the sequence that satisfy the condition in the predicate\nfunction.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: LongCountAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.FirstAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FirstAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 293
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the first element of a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the first element in <em>source</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: FirstAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FirstAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 326
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the first element of a sequence that satisfies a specified condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the first element in <em>source</em> that passes the test in\n<em>predicate</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: FirstAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FirstOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 360
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>default</code> ( <em>TSource</em> ) if\n<em>source</em> is empty; otherwise, the first element in <em>source</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FirstOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 395
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the first element of a sequence that satisfies a specified condition\nor a default value if no such element is found.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the first element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>default</code> ( <em>TSource</em> ) if <em>source</em>\nis empty or if no element passes the test specified by <em>predicate</em> ; otherwise, the first\nelement in <em>source</em> that passes the test specified by <em>predicate</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: FirstOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: LastAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LastAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LastAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LastAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 432
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the last element of a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> LastAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the last element in <em>source</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: LastAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LastAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LastAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LastAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 465
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the last element of a sequence that satisfies a specified condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> LastAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the last element in <em>source</em> that passes the test in\n<em>predicate</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: LastAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LastOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LastOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 499
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the last element of a sequence, or a default value if the sequence contains no elements.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> LastOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>default</code> ( <em>TSource</em> ) if\n<em>source</em> is empty; otherwise, the last element in <em>source</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LastOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LastOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 534
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the last element of a sequence that satisfies a specified condition\nor a default value if no such element is found.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> LastOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the last element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test each element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>default</code> ( <em>TSource</em> ) if <em>source</em>\nis empty or if no element passes the test specified by <em>predicate</em> ; otherwise, the last\nelement in <em>source</em> that passes the test specified by <em>predicate</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: LastOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SingleAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SingleAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 572
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the only element of a sequence, and throws an exception\nif there is not exactly one element in the sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: SingleAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 606
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the only element of a sequence that satisfies a specified condition,\nand throws an exception if more than one such element exists.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test an element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence that satisfies the condition in\n<em>predicate</em>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: SingleAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 642
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the only element of a sequence, or a default value if the sequence is empty;\nthis method throws an exception if there is more than one element in the sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence, or <code>default</code> (\n<em>TSource</em>)\nif the sequence contains no elements.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  id: SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleOrDefaultAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 677
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the only element of a sequence that satisfies a specified condition or\na default value if no such element exists; this method throws an exception if more than one element\nsatisfies the condition.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefaultAsync(Of TSource)(source As IQueryable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.\n"
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: 'A function to test an element for a condition. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the single element of the input sequence that satisfies the condition in\n<em>predicate</em>, or <code>default</code> ( <em>TSource</em> ) if no such element is found.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Threading.CancellationToken)
  name.vb: SingleOrDefaultAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Boolean)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.MinAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MinAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 714
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the minimum value of a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to determine the minimum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the minimum value in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.MinAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MinAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 749
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously invokes a projection function on each element of a sequence and returns the minimum resulting value.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MinAsync(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), cancellationToken As CancellationToken = Nothing) As Task(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to determine the minimum of.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TResult
      description: "\nThe type of the value returned by the function represented by <em>selector</em> .\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the minimum value in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MinAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.MaxAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MaxAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 786
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously returns the maximum value of a sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to determine the maximum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the maximum value in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.MaxAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  id: MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MaxAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 821
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously invokes a projection function on each element of a sequence and returns the maximum resulting value.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MaxAsync(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), cancellationToken As CancellationToken = Nothing) As Task(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> that contains the elements to determine the maximum of.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TResult
      description: "\nThe type of the value returned by the function represented by <em>selector</em> .\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the maximum value in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Threading.CancellationToken)
  name.vb: MaxAsync(Of TSource, TResult)(IQueryable(Of TSource), Expression(Of Func(Of TSource, TResult)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Decimal>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Decimal>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Decimal>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 855
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal> SumAsync(this IQueryable<decimal> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Decimal), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Decimal), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Decimal), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Decimal), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Nullable<Decimal>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Decimal>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 883
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal ? > SumAsync(this IQueryable<decimal ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Decimal?), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 913
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 945
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Int32>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Int32>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Int32>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 975
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int> SumAsync(this IQueryable<int> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Integer), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Int32), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Int32), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Int32), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Nullable<Int32>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Nullable<Int32>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Int32>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1003
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int ? > SumAsync(this IQueryable<int ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Integer?), cancellationToken As CancellationToken = Nothing) As Task(Of Integer?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int32}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1033
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1065
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<int ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int32}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Int64>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Int64>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Int64>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1095
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long> SumAsync(this IQueryable<long> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Long), cancellationToken As CancellationToken = Nothing) As Task(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Int64), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Int64), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Int64), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Nullable<Int64>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Nullable<Int64>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Int64>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1123
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long ? > SumAsync(this IQueryable<long ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Long?), cancellationToken As CancellationToken = Nothing) As Task(Of Long?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int64}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1153
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long)), cancellationToken As CancellationToken = Nothing) As Task(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1185
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<long ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?)), cancellationToken As CancellationToken = Nothing) As Task(Of Long?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Int64}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Double>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Double>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Double>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1215
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> SumAsync(this IQueryable<double> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Double), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Double), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Double), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Double), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Nullable<Double>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Nullable<Double>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Double>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1243
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > SumAsync(this IQueryable<double ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Double?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Double)), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1273
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1305
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Single>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Single>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Single>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1335
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float> SumAsync(this IQueryable<float> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Single), cancellationToken As CancellationToken = Nothing) As Task(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Single), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Single), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Single), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  id: SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync(IQueryable<Nullable<Single>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync(IQueryable<Nullable<Single>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable<System.Nullable<System.Single>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1363
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float ? > SumAsync(this IQueryable<float ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(source As IQueryable(Of Single?), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: "\nA sequence of values to calculate the sum of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Single}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the values in the sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Single)), System.Threading.CancellationToken)
  name.vb: SumAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1393
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float> SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single)), cancellationToken As CancellationToken = Nothing) As Task(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  id: SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SumAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1425
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the sum of the sequence of values that is obtained by invoking a projection function on\neach element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float ? > SumAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SumAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?)), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nA sequence of values of type <em>TSource</em>.\n"
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Single}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the sum of the projected values..\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))), System.Threading.CancellationToken)
  name.vb: SumAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Decimal>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Decimal>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Decimal>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1472
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal> AverageAsync(this IQueryable<decimal> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Decimal), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Decimal), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Decimal), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Decimal), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Nullable<Decimal>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Decimal>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1500
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal ? > AverageAsync(this IQueryable<decimal ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Decimal?), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Nullable(Of Decimal)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Decimal>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1531
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Decimal)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1564
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<decimal ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, decimal ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?)), cancellationToken As CancellationToken = Nothing) As Task(Of Decimal?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Int32>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Int32>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Int32>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1594
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync(this IQueryable<int> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Integer), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Int32), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Int32), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Int32), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Nullable<Int32>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Int32>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1622
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync(this IQueryable<int ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Integer?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Nullable(Of Int32)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int32>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1653
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int32)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int32>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1686
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, int ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Int64>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Int64>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Int64>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1716
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync(this IQueryable<long> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Long), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Int64), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Int64), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Int64), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Nullable<Int64>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Int64>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1744
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync(this IQueryable<long ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Long?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Nullable(Of Int64)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Int64>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1775
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Int64)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Int64>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1808
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, long ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Long?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Double>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Double>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Double>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1838
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync(this IQueryable<double> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Double), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Double), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Double), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Double), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Nullable<Double>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Nullable<Double>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Double>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1866
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync(this IQueryable<double ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Double?), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Double)), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Nullable(Of Double)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Double>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1897
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double)), cancellationToken As CancellationToken = Nothing) As Task(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Double)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Double>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1930
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<double ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, double ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Double?)), cancellationToken As CancellationToken = Nothing) As Task(Of Double?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Double}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Single>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Single>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Single>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1960
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float> AverageAsync(this IQueryable<float> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Single), cancellationToken As CancellationToken = Nothing) As Task(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Single), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Single), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Single), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  id: AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync(IQueryable<Nullable<Single>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable<Nullable<Single>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable<System.Nullable<System.Single>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 1988
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float ? > AverageAsync(this IQueryable<float ? > source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(source As IQueryable(Of Single?), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: "\nA sequence of values to calculate the average of.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Single}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the sequence of values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(System.Linq.IQueryable(Of System.Nullable(Of System.Single)), System.Threading.CancellationToken)
  name.vb: AverageAsync(IQueryable(Of Nullable(Of Single)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Single>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2019
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float>> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single)), cancellationToken As CancellationToken = Nothing) As Task(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Single}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Single)), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  id: AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Nullable<Single>>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AverageAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2052
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously computes the average of a sequence of values that is obtained\nby invoking a projection function on each element of the input sequence.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<float ? > AverageAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, float ? >> selector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AverageAsync(Of TSource)(source As IQueryable(Of TSource), selector As Expression(Of Func(Of TSource, Single?)), cancellationToken As CancellationToken = Nothing) As Task(Of Single?)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'A sequence of values of type <em>TSource</em>. '
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: 'A projection function to apply to each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.Single}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains the average of the projected values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))), System.Threading.CancellationToken)
  name.vb: AverageAsync(Of TSource)(IQueryable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)
  id: ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ContainsAsync<TSource>(IQueryable<TSource>, TSource, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ContainsAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2090
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously determines whether a sequence contains a specified element by using the default equality comparer.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<bool> ContainsAsync<TSource>(this IQueryable<TSource> source, TSource item, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsAsync(Of TSource)(source As IQueryable(Of TSource), item As TSource, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to return the single element of.\n"
    - id: item
      type: '{TSource}'
      description: 'The object to locate in the sequence. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains <code>true</code> if the input sequence contains the specified value; otherwise, <code>false</code>.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ContainsAsync(Of TSource)(IQueryable(Of TSource), TSource, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync(Of TSource)(System.Linq.IQueryable(Of TSource), TSource, System.Threading.CancellationToken)
  name.vb: ContainsAsync(Of TSource)(IQueryable(Of TSource), TSource, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToListAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToListAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToListAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2129
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously creates a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it\nasynchronously.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToListAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of List(Of TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create a list from.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TSource}}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> that contains elements from the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToListAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: ToListAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToArrayAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2168
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously creates an array from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it asynchronously.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArrayAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task(Of TSource())
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create an array from.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TSource}[]}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains an array that contains elements from the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToArrayAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: ToArrayAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: Include<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, TProperty>>)
  nameWithType: EntityFrameworkQueryableExtensions.Include<TEntity, TProperty>(IQueryable<TEntity>, Expression<Func<TEntity, TProperty>>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include<TEntity, TProperty>(System.Linq.IQueryable<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Include
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2227
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSpecifies related entities to include in the query results. The navigation property to be included is specified starting with the\ntype of entity being queried (<em>TEntity</em>). If you wish to include additional types based on the navigation\nproperties of the type being included, then chain a call to\n<xref href=\"Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude%60%603(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable%7b%60%600%2cSystem.Collections.Generic.IEnumerable%7b%60%601%7d%7d%2cSystem.Linq.Expressions.Expression%7bSystem.Func%7b%60%601%2c%60%602%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>\nafter this call.\n"
  example:
  - "\n<p>\n    The following query shows including a single level of related entities.\n<pre><code>    context.Blogs.Include(blog =&gt; blog.Posts);</code></pre>\n</p>\n<p>\n    The following query shows including two levels of entities on the same branch.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);</code></pre>\n</p>\n<p>\n    The following query shows including multiple levels and branches of related data.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n        .Include(blog =&gt; blog.Contributors);</code></pre>\n</p>\n"
  syntax:
    content: 'public static IIncludableQueryable<TEntity, TProperty> Include<TEntity, TProperty>(this IQueryable<TEntity> source, Expression<Func<TEntity, TProperty>> navigationPropertyPath)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Include(Of TEntity As Class, TProperty)(source As IQueryable(Of TEntity), navigationPropertyPath As Expression(Of Func(Of TEntity, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 'The source query. '
    - id: navigationPropertyPath
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TProperty}}}
      description: "\nA lambda expression representing the navigation property to be included (<code>t =&gt; t.Property1</code>).\n"
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    - id: TProperty
      description: 'The type of the related entity to be included. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TProperty}}
      description: "\nA new query with the related data included.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include*
  nameWithType.vb: EntityFrameworkQueryableExtensions.Include(Of TEntity, TProperty)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, TProperty)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include(Of TEntity, TProperty)(System.Linq.IQueryable(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)))
  name.vb: Include(Of TEntity, TProperty)(IQueryable(Of TEntity), Expression(Of Func(Of TEntity, TProperty)))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  id: ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>>, Expression<Func<TPreviousProperty, TProperty>>)
  nameWithType: EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>>, Expression<Func<TPreviousProperty, TProperty>>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, System.Collections.Generic.IEnumerable<TPreviousProperty>>, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ThenInclude
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2291
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSpecifies additional related data to be further included based on a related type that was just included.\n"
  example:
  - "\n<p>\n    The following query shows including a single level of related entities.\n<pre><code>    context.Blogs.Include(blog =&gt; blog.Posts);</code></pre>\n</p>\n<p>\n    The following query shows including two levels of entities on the same branch.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);</code></pre>\n</p>\n<p>\n    The following query shows including multiple levels and branches of related data.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n        .Include(blog =&gt; blog.Contributors);</code></pre>\n</p>\n"
  syntax:
    content: 'public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(this IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenInclude(Of TEntity As Class, TPreviousProperty, TProperty)(source As IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty)), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
    parameters:
    - id: source
      type: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},System.Collections.Generic.IEnumerable{{TPreviousProperty}}}
      description: 'The source query. '
    - id: navigationPropertyPath
      type: System.Linq.Expressions.Expression{System.Func{{TPreviousProperty},{TProperty}}}
      description: "\nA lambda expression representing the navigation property to be included (<code>t =&gt; t.Property1</code>).\n"
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    - id: TPreviousProperty
      description: 'The type of the entity that was just included. '
    - id: TProperty
      description: 'The type of the related entity to be included. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TProperty}}
      description: "\nA new query with the related data included.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty)), Expression(Of Func(Of TPreviousProperty, TProperty)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, System.Collections.Generic.IEnumerable(Of TPreviousProperty)), System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty)))
  name.vb: ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty)), Expression(Of Func(Of TPreviousProperty, TProperty)))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  id: ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, TProperty>>)
  nameWithType: EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(IIncludableQueryable<TEntity, TPreviousProperty>, Expression<Func<TPreviousProperty, TProperty>>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, TPreviousProperty>, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ThenInclude
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2340
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSpecifies additional related data to be further included based on a related type that was just included.\n"
  example:
  - "\n<p>\n    The following query shows including a single level of related entities.\n<pre><code>    context.Blogs.Include(blog =&gt; blog.Posts);</code></pre>\n</p>\n<p>\n    The following query shows including two levels of entities on the same branch.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags);</code></pre>\n</p>\n<p>\n    The following query shows including multiple levels and branches of related data.\n<pre><code>    context.Blogs\n        .Include(blog =&gt; blog.Posts).ThenInclude(post =&gt; post.Tags).ThenInclude(tag =&gt; tag.TagInfo)\n        .Include(blog =&gt; blog.Contributors);</code></pre>\n</p>\n"
  syntax:
    content: 'public static IIncludableQueryable<TEntity, TProperty> ThenInclude<TEntity, TPreviousProperty, TProperty>(this IIncludableQueryable<TEntity, TPreviousProperty> source, Expression<Func<TPreviousProperty, TProperty>> navigationPropertyPath)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenInclude(Of TEntity As Class, TPreviousProperty, TProperty)(source As IIncludableQueryable(Of TEntity, TPreviousProperty), navigationPropertyPath As Expression(Of Func(Of TPreviousProperty, TProperty))) As IIncludableQueryable(Of TEntity, TProperty)
    parameters:
    - id: source
      type: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TPreviousProperty}}
      description: 'The source query. '
    - id: navigationPropertyPath
      type: System.Linq.Expressions.Expression{System.Func{{TPreviousProperty},{TProperty}}}
      description: "\nA lambda expression representing the navigation property to be included (<code>t =&gt; t.Property1</code>).\n"
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    - id: TPreviousProperty
      description: 'The type of the entity that was just included. '
    - id: TProperty
      description: 'The type of the related entity to be included. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TProperty}}
      description: "\nA new query with the related data included.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, TPreviousProperty), Expression(Of Func(Of TPreviousProperty, TProperty)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, TPreviousProperty), System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty)))
  name.vb: ThenInclude(Of TEntity, TPreviousProperty, TProperty)(IIncludableQueryable(Of TEntity, TPreviousProperty), Expression(Of Func(Of TPreviousProperty, TProperty)))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)
  id: Include``1(System.Linq.IQueryable{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: Include<TEntity>(IQueryable<TEntity>, String)
  nameWithType: EntityFrameworkQueryableExtensions.Include<TEntity>(IQueryable<TEntity>, String)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include<TEntity>(System.Linq.IQueryable<TEntity>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Include
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2411
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSpecifies related entities to include in the query results. The navigation property to be included is\nspecified starting with the type of entity being queried (<em>TEntity</em>). Further\nnavigation properties to be included can be appended, separated by the '.' character.\n"
  example:
  - "\n<p>\n    The following query shows including a single level of related entities.\n<pre><code>    context.Blogs.Include(\"Posts\");</code></pre>\n</p>\n<p>\n    The following query shows including two levels of entities on the same branch.\n<pre><code>    context.Blogs.Include(\"Posts.Tags\");</code></pre>\n</p>\n<p>\n    The following query shows including multiple levels and branches of related data.\n<pre><code>    context.Blogs\n        .Include(\"Posts.Tags.TagInfo')\n        .Include(\"Contributors\");</code></pre>\n</p>\n"
  syntax:
    content: 'public static IQueryable<TEntity> Include<TEntity>(this IQueryable<TEntity> source, string navigationPropertyPath)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Include(Of TEntity As Class)(source As IQueryable(Of TEntity), navigationPropertyPath As String) As IQueryable(Of TEntity)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 'The source query. '
    - id: navigationPropertyPath
      type: System.String
      description: 'A string of ''.'' separated navigation property names to be included.  '
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: 'A new query with the related data included. '
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include*
  nameWithType.vb: EntityFrameworkQueryableExtensions.Include(Of TEntity)(IQueryable(Of TEntity), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include(Of TEntity)(System.Linq.IQueryable(Of TEntity), System.String)
  name.vb: Include(Of TEntity)(IQueryable(Of TEntity), String)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})
  id: AsNoTracking``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AsNoTracking<TEntity>(IQueryable<TEntity>)
  nameWithType: EntityFrameworkQueryableExtensions.AsNoTracking<TEntity>(IQueryable<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AsNoTracking
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2463
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Returns a new query where the change tracker will not track any of the entities that are returned.\n    If the entity instances are modified, this will not be detected by the change tracker and\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref> will not persist those changes to the database.\n</p>\n<p>\n    Disabling change tracking is useful for read-only scenarios because it avoids the overhead of setting\n    up change tracking for each entity instance. You should not disable change tracking if you want to\n    manipulate entity instances and persist those changes to the database using\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Identity resolution will still be performed to ensure that all occurrences of an entity with a given key\n    in the result set are represented by the same entity instance.\n</p>\n<p>\n    The default tracking behavior for queries can be controlled by <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: 'public static IQueryable<TEntity> AsNoTracking<TEntity>(this IQueryable<TEntity> source)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsNoTracking(Of TEntity As Class)(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 'The source query. '
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: "\nA new query where the result set will not be tracked by the context.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AsNoTracking(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: AsNoTracking(Of TEntity)(IQueryable(Of TEntity))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking``1(System.Linq.IQueryable{``0})
  id: AsTracking``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: AsTracking<TEntity>(IQueryable<TEntity>)
  nameWithType: EntityFrameworkQueryableExtensions.AsTracking<TEntity>(IQueryable<TEntity>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking<TEntity>(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AsTracking
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2491
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Returns a new query where the change tracker will keep track of changes for all entities that are returned.\n    Any modification to the entity instances will be detected and persisted to the database during\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.SaveChanges\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The default tracking behavior for queries can be controlled by <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: 'public static IQueryable<TEntity> AsTracking<TEntity>(this IQueryable<TEntity> source)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsTracking(Of TEntity As Class)(source As IQueryable(Of TEntity)) As IQueryable(Of TEntity)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
      description: 'The source query. '
    typeParameters:
    - id: TEntity
      description: 'The type of entity being queried. '
    return:
      type: System.Linq.IQueryable{{TEntity}}
      description: "\nA new query where the result set will not be tracked by the context.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking*
  nameWithType.vb: EntityFrameworkQueryableExtensions.AsTracking(Of TEntity)(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking(Of TEntity)(System.Linq.IQueryable(Of TEntity))
  name.vb: AsTracking(Of TEntity)(IQueryable(Of TEntity))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load``1(System.Linq.IQueryable{``0})
  id: Load``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: Load<TSource>(IQueryable<TSource>)
  nameWithType: EntityFrameworkQueryableExtensions.Load<TSource>(IQueryable<TSource>)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Load
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2510
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nEnumerates the query. When using Entity Framework, this causes the results of the query to\nbe loaded into the associated context. This is equivalent to calling ToList\nand then throwing away the list (without the overhead of actually creating the list).\n"
  example: []
  syntax:
    content: public static void Load<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Load(Of TSource)(source As IQueryable(Of TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'The source query. '
    typeParameters:
    - id: TSource
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load*
  nameWithType.vb: EntityFrameworkQueryableExtensions.Load(Of TSource)(IQueryable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Load(Of TSource)(IQueryable(Of TSource))
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  id: LoadAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: LoadAsync<TSource>(IQueryable<TSource>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.LoadAsync<TSource>(IQueryable<TSource>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync<TSource>(System.Linq.IQueryable<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LoadAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2532
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously enumerates the query. When using Entity Framework, this causes the results of the query to\nbe loaded into the associated context. This is equivalent to calling ToList\nand then throwing away the list (without the overhead of actually creating the list).\n"
  example: []
  syntax:
    content: public static Task LoadAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LoadAsync(Of TSource)(source As IQueryable(Of TSource), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: 'The source query. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the asynchronous operation. '
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.LoadAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync(Of TSource)(System.Linq.IQueryable(Of TSource), System.Threading.CancellationToken)
  name.vb: LoadAsync(Of TSource)(IQueryable(Of TSource), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)
  id: ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDictionaryAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2577
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionaryAsync(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from.\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: 'A function to extract a key from each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TKey
      description: "\nThe type of the key returned by <em>keySelector</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TSource}}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that contains selected keys and values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Threading.CancellationToken)
  name.vb: ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  id: ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDictionaryAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2617
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function and a comparer.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionaryAsync(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from.\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: 'A function to extract a key from each element. '
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TKey
      description: "\nThe type of the key returned by <em>keySelector</em> .\n"
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TSource}}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that contains selected keys and values.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey), System.Threading.CancellationToken)
  name.vb: ToDictionaryAsync(Of TSource, TKey)(IQueryable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)
  id: ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDictionaryAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2661
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector and an element selector function.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionaryAsync(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from.\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: 'A function to extract a key from each element. '
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: 'A transform function to produce a result element value from each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TKey
      description: "\nThe type of the key returned by <em>keySelector</em> .\n"
    - id: TElement
      description: "\nThe type of the value returned by <em>elementSelector</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TElement}}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type\n<em>TElement</em> selected from the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Threading.CancellationToken)
  name.vb: ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  id: ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDictionaryAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2708
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nCreates a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> by enumerating it\nasynchronously\naccording to a specified key selector function, a comparer, and an element selector function.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionaryAsync(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey), cancellationToken As CancellationToken = Nothing) As Task(Of Dictionary(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to create a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> from.\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: 'A function to extract a key from each element. '
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: 'A transform function to produce a result element value from each element. '
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEqualityComparer%601\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: TSource
      description: "\nThe type of the elements of <em>source</em>.\n"
    - id: TKey
      description: "\nThe type of the key returned by <em>keySelector</em> .\n"
    - id: TElement
      description: "\nThe type of the value returned by <em>elementSelector</em>.\n"
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TElement}}}
      description: "\nA task that represents the asynchronous operation.\nThe task result contains a <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type\n<em>TElement</em> selected from the input sequence.\n"
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey), System.Threading.CancellationToken)
  name.vb: ToDictionaryAsync(Of TSource, TKey, TElement)(IQueryable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)
  id: ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IQueryable<T>, Action<T>, CancellationToken)
  nameWithType: EntityFrameworkQueryableExtensions.ForEachAsync<T>(IQueryable<T>, Action<T>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync<T>(System.Linq.IQueryable<T>, System.Action<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForEachAsync
    path: src/Microsoft.EntityFrameworkCore/EntityFrameworkQueryableExtensions.cs
    startLine: 2745
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAsynchronously enumerates the query results and performs the specified action on each element.\n"
  remarks: "\nMultiple active operations on the same context instance are not supported.  Use 'await' to ensure\nthat any asynchronous operations have completed before calling another method on this context.\n"
  example: []
  syntax:
    content: public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IQueryable(Of T), action As Action(Of T), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: source
      type: System.Linq.IQueryable{{T}}
      description: "\nAn <xref href=\"System.Linq.IQueryable%601\" data-throw-if-not-resolved=\"false\"></xref> to enumerate.\n"
    - id: action
      type: System.Action{{T}}
      description: 'The action to perform on each element. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    typeParameters:
    - id: T
      description: "\nThe type of the elements of <em>source</em>.\n"
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the asynchronous operation. '
  overload: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync*
  nameWithType.vb: EntityFrameworkQueryableExtensions.ForEachAsync(Of T)(IQueryable(Of T), Action(Of T), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync(Of T)(System.Linq.IQueryable(Of T), System.Action(Of T), System.Threading.CancellationToken)
  name.vb: ForEachAsync(Of T)(IQueryable(Of T), Action(Of T), CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync
  isExternal: false
  name: AnyAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.AnyAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync(Of TSource)
  name.vb: AnyAsync(Of TSource)
- uid: System.Linq.IQueryable{{TSource}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TSource>
  nameWithType: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  nameWithType.vb: IQueryable(Of TSource)
  fullname.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Boolean>>
  nameWithType: Expression<Func<TSource, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TSource, Boolean))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))
  name.vb: Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync
  isExternal: false
  name: AllAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.AllAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.AllAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AllAsync(Of TSource)
  name.vb: AllAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync
  isExternal: false
  name: CountAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.CountAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.CountAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync(Of TSource)
  name.vb: CountAsync(Of TSource)
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync
  isExternal: false
  name: LongCountAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.LongCountAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LongCountAsync(Of TSource)
  name.vb: LongCountAsync(Of TSource)
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync
  isExternal: false
  name: FirstAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.FirstAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstAsync(Of TSource)
  name.vb: FirstAsync(Of TSource)
- uid: System.Threading.Tasks.Task{{TSource}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TSource>
  nameWithType: Task<TSource>
  fullName: System.Threading.Tasks.Task<TSource>
  nameWithType.vb: Task(Of TSource)
  fullname.vb: System.Threading.Tasks.Task(Of TSource)
  name.vb: Task(Of TSource)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync
  isExternal: false
  name: FirstOrDefaultAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync(Of TSource)
  name.vb: FirstOrDefaultAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync
  isExternal: false
  name: LastAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.LastAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastAsync(Of TSource)
  name.vb: LastAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync
  isExternal: false
  name: LastOrDefaultAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync(Of TSource)
  name.vb: LastOrDefaultAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync
  isExternal: false
  name: SingleAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.SingleAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleAsync(Of TSource)
  name.vb: SingleAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync
  isExternal: false
  name: SingleOrDefaultAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync(Of TSource)
  name.vb: SingleOrDefaultAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync
  isExternal: false
  name: MinAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.MinAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.MinAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MinAsync(Of TSource)
  name.vb: MinAsync(Of TSource)
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TResult>>
  nameWithType: Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync
  isExternal: false
  name: MaxAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.MaxAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.MaxAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.MaxAsync(Of TSource)
  name.vb: MaxAsync(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync
  isExternal: false
  name: SumAsync
  nameWithType: EntityFrameworkQueryableExtensions.SumAsync
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SumAsync
- uid: System.Linq.IQueryable{System.Decimal}
  commentId: T:System.Linq.IQueryable{System.Decimal}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Decimal>
  nameWithType: IQueryable<Decimal>
  fullName: System.Linq.IQueryable<System.Decimal>
  nameWithType.vb: IQueryable(Of Decimal)
  fullname.vb: System.Linq.IQueryable(Of System.Decimal)
  name.vb: IQueryable(Of Decimal)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Decimal}
  commentId: T:System.Threading.Tasks.Task{System.Decimal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Decimal>
  nameWithType: Task<Decimal>
  fullName: System.Threading.Tasks.Task<System.Decimal>
  nameWithType.vb: Task(Of Decimal)
  fullname.vb: System.Threading.Tasks.Task(Of System.Decimal)
  name.vb: Task(Of Decimal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}
  commentId: T:System.Linq.IQueryable{System.Nullable{System.Decimal}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Decimal>>
  nameWithType: IQueryable<Nullable<Decimal>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>
  nameWithType.vb: IQueryable(Of Nullable(Of Decimal))
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))
  name.vb: IQueryable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Decimal}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Decimal>>
  nameWithType: Task<Nullable<Decimal>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Decimal>>
  nameWithType.vb: Task(Of Nullable(Of Decimal))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Decimal))
  name.vb: Task(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Decimal>>
  nameWithType: Expression<Func<TSource, Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>
  nameWithType.vb: Expression(Of Func(Of TSource, Decimal))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))
  name.vb: Expression(Of Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Decimal>>>
  nameWithType: Expression<Func<TSource, Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Int32}
  commentId: T:System.Linq.IQueryable{System.Int32}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int32>
  nameWithType: IQueryable<Int32>
  fullName: System.Linq.IQueryable<System.Int32>
  nameWithType.vb: IQueryable(Of Int32)
  fullname.vb: System.Linq.IQueryable(Of System.Int32)
  name.vb: IQueryable(Of Int32)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}
  commentId: T:System.Linq.IQueryable{System.Nullable{System.Int32}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int32>>
  nameWithType: IQueryable<Nullable<Int32>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>
  nameWithType.vb: IQueryable(Of Nullable(Of Int32))
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int32))
  name.vb: IQueryable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Int32>>
  nameWithType: Task<Nullable<Int32>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Int32>>
  nameWithType.vb: Task(Of Nullable(Of Int32))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Int32))
  name.vb: Task(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Int32>>
  nameWithType: Expression<Func<TSource, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of TSource, Int32))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))
  name.vb: Expression(Of Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Int32>>>
  nameWithType: Expression<Func<TSource, Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Int32)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Int64}
  commentId: T:System.Linq.IQueryable{System.Int64}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int64>
  nameWithType: IQueryable<Int64>
  fullName: System.Linq.IQueryable<System.Int64>
  nameWithType.vb: IQueryable(Of Int64)
  fullname.vb: System.Linq.IQueryable(Of System.Int64)
  name.vb: IQueryable(Of Int64)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}
  commentId: T:System.Linq.IQueryable{System.Nullable{System.Int64}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int64>>
  nameWithType: IQueryable<Nullable<Int64>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>
  nameWithType.vb: IQueryable(Of Nullable(Of Int64))
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int64))
  name.vb: IQueryable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.Int64}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Int64}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Int64>>
  nameWithType: Task<Nullable<Int64>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Int64>>
  nameWithType.vb: Task(Of Nullable(Of Int64))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Int64))
  name.vb: Task(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Int64>>
  nameWithType: Expression<Func<TSource, Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>
  nameWithType.vb: Expression(Of Func(Of TSource, Int64))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))
  name.vb: Expression(Of Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Int64>>>
  nameWithType: Expression<Func<TSource, Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Int64)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Double}
  commentId: T:System.Linq.IQueryable{System.Double}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Double>
  nameWithType: IQueryable<Double>
  fullName: System.Linq.IQueryable<System.Double>
  nameWithType.vb: IQueryable(Of Double)
  fullname.vb: System.Linq.IQueryable(Of System.Double)
  name.vb: IQueryable(Of Double)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Double}
  commentId: T:System.Threading.Tasks.Task{System.Double}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Double>
  nameWithType: Task<Double>
  fullName: System.Threading.Tasks.Task<System.Double>
  nameWithType.vb: Task(Of Double)
  fullname.vb: System.Threading.Tasks.Task(Of System.Double)
  name.vb: Task(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Double}}
  commentId: T:System.Linq.IQueryable{System.Nullable{System.Double}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Double>>
  nameWithType: IQueryable<Nullable<Double>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>
  nameWithType.vb: IQueryable(Of Nullable(Of Double))
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Double))
  name.vb: IQueryable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.Double}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Double}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Double>>
  nameWithType: Task<Nullable<Double>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Double>>
  nameWithType.vb: Task(Of Nullable(Of Double))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Double))
  name.vb: Task(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Double}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Double>>
  nameWithType: Expression<Func<TSource, Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>
  nameWithType.vb: Expression(Of Func(Of TSource, Double))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))
  name.vb: Expression(Of Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Double>>>
  nameWithType: Expression<Func<TSource, Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Double)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Single}
  commentId: T:System.Linq.IQueryable{System.Single}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Single>
  nameWithType: IQueryable<Single>
  fullName: System.Linq.IQueryable<System.Single>
  nameWithType.vb: IQueryable(Of Single)
  fullname.vb: System.Linq.IQueryable(Of System.Single)
  name.vb: IQueryable(Of Single)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Single}
  commentId: T:System.Threading.Tasks.Task{System.Single}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Single>
  nameWithType: Task<Single>
  fullName: System.Threading.Tasks.Task<System.Single>
  nameWithType.vb: Task(Of Single)
  fullname.vb: System.Threading.Tasks.Task(Of System.Single)
  name.vb: Task(Of Single)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Single}}
  commentId: T:System.Linq.IQueryable{System.Nullable{System.Single}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Single>>
  nameWithType: IQueryable<Nullable<Single>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>
  nameWithType.vb: IQueryable(Of Nullable(Of Single))
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Single))
  name.vb: IQueryable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.Single}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.Single}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<Single>>
  nameWithType: Task<Nullable<Single>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.Single>>
  nameWithType.vb: Task(Of Nullable(Of Single))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.Single))
  name.vb: Task(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Single}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Single>>
  nameWithType: Expression<Func<TSource, Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>
  nameWithType.vb: Expression(Of Func(Of TSource, Single))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))
  name.vb: Expression(Of Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Single>>>
  nameWithType: Expression<Func<TSource, Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Single)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync
  isExternal: false
  name: AverageAsync
  nameWithType: EntityFrameworkQueryableExtensions.AverageAsync
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AverageAsync
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync
  isExternal: false
  name: ContainsAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.ContainsAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ContainsAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ContainsAsync(Of TSource)
  name.vb: ContainsAsync(Of TSource)
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  commentId: '!:TSource'
  isExternal: false
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync
  isExternal: false
  name: ToListAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.ToListAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToListAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync(Of TSource)
  name.vb: ToListAsync(Of TSource)
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TSource}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TSource>>
  nameWithType: Task<List<TSource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>>
  nameWithType.vb: Task(Of List(Of TSource))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TSource))
  name.vb: Task(Of List(Of TSource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync
  isExternal: false
  name: ToArrayAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.ToArrayAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToArrayAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToArrayAsync(Of TSource)
  name.vb: ToArrayAsync(Of TSource)
- uid: System.Threading.Tasks.Task{{TSource}[]}
  commentId: T:System.Threading.Tasks.Task{``0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TSource[]>
  nameWithType: Task<TSource[]>
  fullName: System.Threading.Tasks.Task<TSource[]>
  nameWithType.vb: Task(Of TSource())
  fullname.vb: System.Threading.Tasks.Task(Of TSource())
  name.vb: Task(Of TSource())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  commentId: M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude``3(Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include
  isExternal: false
  name: Include<TEntity, TProperty>
  nameWithType: EntityFrameworkQueryableExtensions.Include<TEntity, TProperty>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include<TEntity, TProperty>
  nameWithType.vb: EntityFrameworkQueryableExtensions.Include(Of TEntity, TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Include(Of TEntity, TProperty)
  name.vb: Include(Of TEntity, TProperty)
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullname.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TProperty>>
  nameWithType: Expression<Func<TEntity, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TProperty))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty))
  name.vb: Expression(Of Func(Of TEntity, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TProperty}}
  commentId: T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1}
  parent: Microsoft.EntityFrameworkCore.Query
  definition: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
  name: IIncludableQueryable<TEntity, TProperty>
  nameWithType: IIncludableQueryable<TEntity, TProperty>
  fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, TProperty>
  nameWithType.vb: IIncludableQueryable(Of TEntity, TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, TProperty)
  name.vb: IIncludableQueryable(Of TEntity, TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
  commentId: T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
  isExternal: false
  name: IIncludableQueryable<TEntity, TProperty>
  nameWithType: IIncludableQueryable<TEntity, TProperty>
  fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, TProperty>
  nameWithType.vb: IIncludableQueryable(Of TEntity, TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, TProperty)
  name.vb: IIncludableQueryable(Of TEntity, TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude
  isExternal: false
  name: ThenInclude<TEntity, TPreviousProperty, TProperty>
  nameWithType: EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude<TEntity, TPreviousProperty, TProperty>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ThenInclude(Of TEntity, TPreviousProperty, TProperty)
  name.vb: ThenInclude(Of TEntity, TPreviousProperty, TProperty)
- uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},System.Collections.Generic.IEnumerable{{TPreviousProperty}}}
  commentId: T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Collections.Generic.IEnumerable{``1}}
  parent: Microsoft.EntityFrameworkCore.Query
  definition: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
  name: IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>>
  nameWithType: IIncludableQueryable<TEntity, IEnumerable<TPreviousProperty>>
  fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, System.Collections.Generic.IEnumerable<TPreviousProperty>>
  nameWithType.vb: IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty))
  fullname.vb: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, System.Collections.Generic.IEnumerable(Of TPreviousProperty))
  name.vb: IIncludableQueryable(Of TEntity, IEnumerable(Of TPreviousProperty))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TPreviousProperty},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TPreviousProperty, TProperty>>
  nameWithType: Expression<Func<TPreviousProperty, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty>>
  nameWithType.vb: Expression(Of Func(Of TPreviousProperty, TProperty))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TPreviousProperty, TProperty))
  name.vb: Expression(Of Func(Of TPreviousProperty, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{{TEntity},{TPreviousProperty}}
  commentId: T:Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,``1}
  parent: Microsoft.EntityFrameworkCore.Query
  definition: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
  name: IIncludableQueryable<TEntity, TPreviousProperty>
  nameWithType: IIncludableQueryable<TEntity, TPreviousProperty>
  fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<TEntity, TPreviousProperty>
  nameWithType.vb: IIncludableQueryable(Of TEntity, TPreviousProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable(Of TEntity, TPreviousProperty)
  name.vb: IIncludableQueryable(Of TEntity, TPreviousProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2
    name: IIncludableQueryable
    nameWithType: IIncludableQueryable
    fullName: Microsoft.EntityFrameworkCore.Query.IIncludableQueryable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPreviousProperty
    nameWithType: TPreviousProperty
    fullName: TPreviousProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: false
  name: SaveChanges()
  nameWithType: DbContext.SaveChanges()
  fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    nameWithType: DbContext.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
    name: SaveChanges
    nameWithType: DbContext.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.DbContext.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.QueryTrackingBehavior
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking
  isExternal: false
  name: AsNoTracking<TEntity>
  nameWithType: EntityFrameworkQueryableExtensions.AsNoTracking<TEntity>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking<TEntity>
  nameWithType.vb: EntityFrameworkQueryableExtensions.AsNoTracking(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsNoTracking(Of TEntity)
  name.vb: AsNoTracking(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking
  isExternal: false
  name: AsTracking<TEntity>
  nameWithType: EntityFrameworkQueryableExtensions.AsTracking<TEntity>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking<TEntity>
  nameWithType.vb: EntityFrameworkQueryableExtensions.AsTracking(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AsTracking(Of TEntity)
  name.vb: AsTracking(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load
  isExternal: false
  name: Load<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.Load<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.Load(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.Load(Of TSource)
  name.vb: Load(Of TSource)
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync
  isExternal: false
  name: LoadAsync<TSource>
  nameWithType: EntityFrameworkQueryableExtensions.LoadAsync<TSource>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync<TSource>
  nameWithType.vb: EntityFrameworkQueryableExtensions.LoadAsync(Of TSource)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LoadAsync(Of TSource)
  name.vb: LoadAsync(Of TSource)
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync
  isExternal: false
  name: ToDictionaryAsync<TSource, TKey>
  nameWithType: EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync<TSource, TKey>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToDictionaryAsync(Of TSource, TKey)
  name.vb: ToDictionaryAsync(Of TSource, TKey)
- uid: System.Func{{TSource},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TSource}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{``1,``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<TKey, TSource>>
  nameWithType: Task<Dictionary<TKey, TSource>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>>
  nameWithType.vb: Task(Of Dictionary(Of TKey, TSource))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TSource))
  name.vb: Task(Of Dictionary(Of TKey, TSource))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{{TSource},{TElement}}
  commentId: T:System.Func{``0,``2}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TElement>
  nameWithType: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  nameWithType.vb: Func(Of TSource, TElement)
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{{TKey},{TElement}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{``1,``2}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<TKey, TElement>>
  nameWithType: Task<Dictionary<TKey, TElement>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>>
  nameWithType.vb: Task(Of Dictionary(Of TKey, TElement))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of TKey, TElement))
  name.vb: Task(Of Dictionary(Of TKey, TElement))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync
  isExternal: false
  name: ForEachAsync<T>
  nameWithType: EntityFrameworkQueryableExtensions.ForEachAsync<T>
  fullName: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync<T>
  nameWithType.vb: EntityFrameworkQueryableExtensions.ForEachAsync(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ForEachAsync(Of T)
  name.vb: ForEachAsync(Of T)
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
