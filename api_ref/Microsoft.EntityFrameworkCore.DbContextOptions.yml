### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.DbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptions
  id: DbContextOptions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.DbContextOptions.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})
  - Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
  - Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
  - Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension``1
  - Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension``1
  - Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension``1(``0)
  langs:
  - csharp
  - vb
  name: DbContextOptions
  nameWithType: DbContextOptions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DbContextOptions
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nThe options to be used by a <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref>. You normally override\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref> or use a <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder\" data-throw-if-not-resolved=\"false\"></xref>\nto create instances of this class and it is not designed to be directly constructed in your application code.\n"
  example: []
  syntax:
    content: 'public abstract class DbContextOptions : IDbContextOptions'
    content.vb: >-
      Public MustInherit Class DbContextOptions
          Implements IDbContextOptions
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})
  commentId: M:Microsoft.EntityFrameworkCore.DbContextOptions.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})
  id: '#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension})'
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: DbContextOptions(IReadOnlyDictionary<Type, IDbContextOptionsExtension>)
  nameWithType: DbContextOptions.DbContextOptions(IReadOnlyDictionary<Type, IDbContextOptionsExtension>)
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.DbContextOptions(System.Collections.Generic.IReadOnlyDictionary<System.Type, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptions\" data-throw-if-not-resolved=\"false\"></xref> class. You normally override\n<xref href=\"Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)\" data-throw-if-not-resolved=\"false\"></xref> or use a <xref href=\"Microsoft.EntityFrameworkCore.DbContextOptionsBuilder\" data-throw-if-not-resolved=\"false\"></xref>\nto create instances of this class and it is not designed to be directly constructed in your application code.\n"
  example: []
  syntax:
    content: protected DbContextOptions(IReadOnlyDictionary<Type, IDbContextOptionsExtension> extensions)
    content.vb: Protected Sub New(extensions As IReadOnlyDictionary(Of Type, IDbContextOptionsExtension))
    parameters:
    - id: extensions
      type: System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
      description: 'The extensions that store the configured options. '
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.#ctor*
  nameWithType.vb: DbContextOptions.DbContextOptions(IReadOnlyDictionary(Of Type, IDbContextOptionsExtension))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.DbContextOptions.DbContextOptions(System.Collections.Generic.IReadOnlyDictionary(Of System.Type, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension))
  name.vb: DbContextOptions(IReadOnlyDictionary(Of Type, IDbContextOptionsExtension))
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
  commentId: P:Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
  id: Extensions
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: DbContextOptions.Extensions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Extensions
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the extensions that store the configured options.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<IDbContextOptionsExtension> Extensions { get; }
    content.vb: Public Overridable ReadOnly Property Extensions As IEnumerable(Of IDbContextOptionsExtension)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.Extensions*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.Extensions
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension``1
  commentId: M:Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension``1
  id: FindExtension``1
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: FindExtension<TExtension>()
  nameWithType: DbContextOptions.FindExtension<TExtension>()
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension<TExtension>()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindExtension
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 43
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the extension of the specified type. Returns null if no extension of the specified type is configured.\n"
  example: []
  syntax:
    content: 'public virtual TExtension FindExtension<TExtension>()where TExtension : class, IDbContextOptionsExtension'
    content.vb: Public Overridable Function FindExtension(Of TExtension As {Class, IDbContextOptionsExtension}) As TExtension
    typeParameters:
    - id: TExtension
      description: 'The type of the extension to get. '
    return:
      type: '{TExtension}'
      description: 'The extension, or null if none was found. '
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1
  nameWithType.vb: DbContextOptions.FindExtension(Of TExtension)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension(Of TExtension)()
  name.vb: FindExtension(Of TExtension)()
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension``1
  commentId: M:Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension``1
  id: GetExtension``1
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: GetExtension<TExtension>()
  nameWithType: DbContextOptions.GetExtension<TExtension>()
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension<TExtension>()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetExtension
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the extension of the specified type. Throws if no extension of the specified type is configured.\n"
  example: []
  syntax:
    content: 'public virtual TExtension GetExtension<TExtension>()where TExtension : class, IDbContextOptionsExtension'
    content.vb: Public Overridable Function GetExtension(Of TExtension As {Class, IDbContextOptionsExtension}) As TExtension
    typeParameters:
    - id: TExtension
      description: 'The type of the extension to get. '
    return:
      type: '{TExtension}'
      description: 'The extension. '
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension*
  nameWithType.vb: DbContextOptions.GetExtension(Of TExtension)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension(Of TExtension)()
  name.vb: GetExtension(Of TExtension)()
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension``1(``0)
  id: WithExtension``1(``0)
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: WithExtension<TExtension>(TExtension)
  nameWithType: DbContextOptions.WithExtension<TExtension>(TExtension)
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension<TExtension>(TExtension)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: WithExtension
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAdds the given extension to the options.\n"
  example: []
  syntax:
    content: 'public abstract DbContextOptions WithExtension<TExtension>(TExtension extension)where TExtension : class, IDbContextOptionsExtension'
    content.vb: Public MustOverride Function WithExtension(Of TExtension As {Class, IDbContextOptionsExtension})(extension As TExtension) As DbContextOptions
    parameters:
    - id: extension
      type: '{TExtension}'
      description: 'The extension to be added. '
    typeParameters:
    - id: TExtension
      description: 'The type of extension to be added. '
    return:
      type: Microsoft.EntityFrameworkCore.DbContextOptions
      description: 'The same options instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension*
  nameWithType.vb: DbContextOptions.WithExtension(Of TExtension)(TExtension)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension(Of TExtension)(TExtension)
  name.vb: WithExtension(Of TExtension)(TExtension)
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
  commentId: P:Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
  id: ContextType
  parent: Microsoft.EntityFrameworkCore.DbContextOptions
  langs:
  - csharp
  - vb
  name: ContextType
  nameWithType: DbContextOptions.ContextType
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ContextType
    path: src/Microsoft.EntityFrameworkCore/DbContextOptions.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nThe type of context that these options are for. Will return <xref href=\"Microsoft.EntityFrameworkCore.DbContext\" data-throw-if-not-resolved=\"false\"></xref> if the\noptions are not built for a specific derived context.\n"
  example: []
  syntax:
    content: public abstract Type ContextType { get; }
    content.vb: Public MustOverride ReadOnly Property ContextType As Type
    parameters: []
    return:
      type: System.Type
  overload: Microsoft.EntityFrameworkCore.DbContextOptions.ContextType*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  parent: Microsoft.EntityFrameworkCore.DbContext
  isExternal: false
  name: OnConfiguring(DbContextOptionsBuilder)
  nameWithType: DbContext.OnConfiguring(DbContextOptionsBuilder)
  fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
    name: OnConfiguring
    nameWithType: DbContext.OnConfiguring
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)
    name: OnConfiguring
    nameWithType: DbContext.OnConfiguring
    fullName: Microsoft.EntityFrameworkCore.DbContext.OnConfiguring
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
    name: DbContextOptionsBuilder
    nameWithType: DbContextOptionsBuilder
    fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContextOptionsBuilder
  nameWithType: DbContextOptionsBuilder
  fullName: Microsoft.EntityFrameworkCore.DbContextOptionsBuilder
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: IDbContextOptions
  nameWithType: IDbContextOptions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.DbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.DbContextOptions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContextOptions
  nameWithType: DbContextOptions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.#ctor
  isExternal: false
  name: DbContextOptions
  nameWithType: DbContextOptions.DbContextOptions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.DbContextOptions
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Type,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Type, IDbContextOptionsExtension>
  nameWithType: IReadOnlyDictionary<Type, IDbContextOptionsExtension>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Type, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension>
  nameWithType.vb: IReadOnlyDictionary(Of Type, IDbContextOptionsExtension)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Type, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension)
  name.vb: IReadOnlyDictionary(Of Type, IDbContextOptionsExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
    name: IDbContextOptionsExtension
    nameWithType: IDbContextOptionsExtension
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
    name: IDbContextOptionsExtension
    nameWithType: IDbContextOptionsExtension
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.Extensions*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
  isExternal: false
  name: Extensions
  nameWithType: DbContextOptions.Extensions
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.Extensions
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.Extensions
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.Extensions
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  isExternal: false
  name: Extensions
  nameWithType: IDbContextOptions.Extensions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.Extensions
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDbContextOptionsExtension>
  nameWithType: IEnumerable<IDbContextOptionsExtension>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension>
  nameWithType.vb: IEnumerable(Of IDbContextOptionsExtension)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension)
  name.vb: IEnumerable(Of IDbContextOptionsExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
    name: IDbContextOptionsExtension
    nameWithType: IDbContextOptionsExtension
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
    name: IDbContextOptionsExtension
    nameWithType: IDbContextOptionsExtension
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension
  isExternal: false
  name: FindExtension<TExtension>
  nameWithType: DbContextOptions.FindExtension<TExtension>
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension<TExtension>
  nameWithType.vb: DbContextOptions.FindExtension(Of TExtension)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContextOptions.FindExtension(Of TExtension)
  name.vb: FindExtension(Of TExtension)
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1
  commentId: M:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  isExternal: false
  name: FindExtension<TExtension>()
  nameWithType: IDbContextOptions.FindExtension<TExtension>()
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension<TExtension>()
  nameWithType.vb: IDbContextOptions.FindExtension(Of TExtension)()
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension(Of TExtension)()
  name.vb: FindExtension(Of TExtension)()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1
    name: FindExtension<TExtension>
    nameWithType: IDbContextOptions.FindExtension<TExtension>
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension<TExtension>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension``1
    name: FindExtension(Of TExtension)
    nameWithType: IDbContextOptions.FindExtension(Of TExtension)
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions.FindExtension(Of TExtension)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TExtension}'
  commentId: '!:TExtension'
  definition: TExtension
  name: TExtension
  nameWithType: TExtension
  fullName: TExtension
- uid: TExtension
  isExternal: false
  name: TExtension
  nameWithType: TExtension
  fullName: TExtension
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension
  isExternal: false
  name: GetExtension<TExtension>
  nameWithType: DbContextOptions.GetExtension<TExtension>
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension<TExtension>
  nameWithType.vb: DbContextOptions.GetExtension(Of TExtension)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContextOptions.GetExtension(Of TExtension)
  name.vb: GetExtension(Of TExtension)
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension
  isExternal: false
  name: WithExtension<TExtension>
  nameWithType: DbContextOptions.WithExtension<TExtension>
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension<TExtension>
  nameWithType.vb: DbContextOptions.WithExtension(Of TExtension)
  fullname.vb: Microsoft.EntityFrameworkCore.DbContextOptions.WithExtension(Of TExtension)
  name.vb: WithExtension(Of TExtension)
- uid: Microsoft.EntityFrameworkCore.DbContextOptions.ContextType*
  commentId: Overload:Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
  isExternal: false
  name: ContextType
  nameWithType: DbContextOptions.ContextType
  fullName: Microsoft.EntityFrameworkCore.DbContextOptions.ContextType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
