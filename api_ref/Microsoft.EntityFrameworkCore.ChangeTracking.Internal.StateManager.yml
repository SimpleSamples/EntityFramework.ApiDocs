### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  id: StateManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  children:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers(System.Object,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry})
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
  langs:
  - csharp
  - vb
  name: StateManager
  nameWithType: StateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StateManager
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class StateManager : IStateManager'
    content.vb: >-
      Public Class StateManager
          Implements IStateManager
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)'
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: StateManager(IInternalEntityEntryFactory, IInternalEntityEntrySubscriber, IInternalEntityEntryNotifier, IValueGenerationManager, IModel, IDatabase, IConcurrencyDetector, ICurrentDbContext)
  nameWithType: StateManager.StateManager(IInternalEntityEntryFactory, IInternalEntityEntrySubscriber, IInternalEntityEntryNotifier, IValueGenerationManager, IModel, IDatabase, IConcurrencyDetector, ICurrentDbContext)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StateManager(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager, Microsoft.EntityFrameworkCore.Metadata.IModel, Microsoft.EntityFrameworkCore.Storage.IDatabase, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public StateManager(IInternalEntityEntryFactory factory, IInternalEntityEntrySubscriber subscriber, IInternalEntityEntryNotifier notifier, IValueGenerationManager valueGeneration, IModel model, IDatabase database, IConcurrencyDetector concurrencyDetector, ICurrentDbContext currentContext)
    content.vb: Public Sub New(factory As IInternalEntityEntryFactory, subscriber As IInternalEntityEntrySubscriber, notifier As IInternalEntityEntryNotifier, valueGeneration As IValueGenerationManager, model As IModel, database As IDatabase, concurrencyDetector As IConcurrencyDetector, currentContext As ICurrentDbContext)
    parameters:
    - id: factory
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory
    - id: subscriber
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber
    - id: notifier
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier
    - id: valueGeneration
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
    - id: database
      type: Microsoft.EntityFrameworkCore.Storage.IDatabase
    - id: concurrencyDetector
      type: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
    - id: currentContext
      type: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetTrackingQueryMode(IEntityType)
  nameWithType: StateManager.GetTrackingQueryMode(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetTrackingQueryMode
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TrackingQueryMode GetTrackingQueryMode(IEntityType entityType)
    content.vb: Public Overridable Function GetTrackingQueryMode(entityType As IEntityType) As TrackingQueryMode
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode
  id: EndSingleQueryMode
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: EndSingleQueryMode()
  nameWithType: StateManager.EndSingleQueryMode()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EndSingleQueryMode
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void EndSingleQueryMode()
    content.vb: Public Overridable Sub
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
  id: Notify
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: Notify
  nameWithType: StateManager.Notify
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Notify
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 100
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IInternalEntityEntryNotifier Notify { get; }
    content.vb: Public Overridable ReadOnly Property Notify As IInternalEntityEntryNotifier
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Notify
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
  id: ValueGeneration
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: ValueGeneration
  nameWithType: StateManager.ValueGeneration
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueGeneration
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 106
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IValueGenerationManager ValueGeneration { get; }
    content.vb: Public Overridable ReadOnly Property ValueGeneration As IValueGenerationManager
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ValueGeneration
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object)
  id: GetOrCreateEntry(System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetOrCreateEntry(Object)
  nameWithType: StateManager.GetOrCreateEntry(Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrCreateEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 112
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry GetOrCreateEntry(object entity)
    content.vb: Public Overridable Function GetOrCreateEntry(entity As Object) As InternalEntityEntry
    parameters:
    - id: entity
      type: System.Object
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery
  id: BeginTrackingQuery
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: BeginTrackingQuery()
  nameWithType: StateManager.BeginTrackingQuery()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BeginTrackingQuery
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 137
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void BeginTrackingQuery()
    content.vb: Public Overridable Sub BeginTrackingQuery
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  id: StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet<IForeignKey>)
  nameWithType: StateManager.StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet<IForeignKey>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Object, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, ISet<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StartTrackingFromQuery
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 153
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, object entity, ValueBuffer valueBuffer, ISet<IForeignKey> handledForeignKeys)
    content.vb: Public Overridable Function StartTrackingFromQuery(baseEntityType As IEntityType, entity As Object, valueBuffer As ValueBuffer, handledForeignKeys As ISet(Of IForeignKey)) As InternalEntityEntry
    parameters:
    - id: baseEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: entity
      type: System.Object
    - id: valueBuffer
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    - id: handledForeignKeys
      type: ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  nameWithType.vb: StateManager.StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet(Of IForeignKey))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Object, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, ISet(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey))
  name.vb: StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet(Of IForeignKey))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  id: TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: TryGetEntry(IKey, Object[])
  nameWithType: StateManager.TryGetEntry(IKey, Object[])
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGetEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 194
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry TryGetEntry(IKey key, object[] keyValues)
    content.vb: Public Overridable Function TryGetEntry(key As IKey, keyValues As Object()) As InternalEntityEntry
    parameters:
    - id: key
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
    - id: keyValues
      type: System.Object[]
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  nameWithType.vb: StateManager.TryGetEntry(IKey, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, System.Object())
  name.vb: TryGetEntry(IKey, Object())
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  id: TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: TryGetEntry(IKey, ValueBuffer, Boolean)
  nameWithType: StateManager.TryGetEntry(IKey, ValueBuffer, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGetEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 201
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry TryGetEntry(IKey key, ValueBuffer valueBuffer, bool throwOnNullKey)
    content.vb: Public Overridable Function TryGetEntry(key As IKey, valueBuffer As ValueBuffer, throwOnNullKey As Boolean) As InternalEntityEntry
    parameters:
    - id: key
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
    - id: valueBuffer
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    - id: throwOnNullKey
      type: System.Boolean
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object)
  id: TryGetEntry(System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: TryGetEntry(Object)
  nameWithType: StateManager.TryGetEntry(Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGetEntry
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 208
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry TryGetEntry(object entity)
    content.vb: Public Overridable Function TryGetEntry(entity As Object) As InternalEntityEntry
    parameters:
    - id: entity
      type: System.Object
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
  id: Entries
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: Entries
  nameWithType: StateManager.Entries
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Entries
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 287
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<InternalEntityEntry> Entries { get; }
    content.vb: Public Overridable ReadOnly Property Entries As IEnumerable(Of InternalEntityEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Entries
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  id: StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: StartTracking(InternalEntityEntry)
  nameWithType: StateManager.StartTracking(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StartTracking
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 293
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry StartTracking(InternalEntityEntry entry)
    content.vb: Public Overridable Function StartTracking(entry As InternalEntityEntry) As InternalEntityEntry
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  id: StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: StopTracking(InternalEntityEntry)
  nameWithType: StateManager.StopTracking(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StopTracking
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 332
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void StopTracking(InternalEntityEntry entry)
    content.vb: Public Overridable Sub StopTracking(entry As InternalEntityEntry)
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe
  id: Unsubscribe
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: Unsubscribe()
  nameWithType: StateManager.Unsubscribe()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Unsubscribe
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 374
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void Unsubscribe()
    content.vb: Public Overridable Sub Unsubscribe
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  id: RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: RecordReferencedUntrackedEntity(Object, INavigation, InternalEntityEntry)
  nameWithType: StateManager.RecordReferencedUntrackedEntity(Object, INavigation, InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity(System.Object, Microsoft.EntityFrameworkCore.Metadata.INavigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RecordReferencedUntrackedEntity
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 389
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void RecordReferencedUntrackedEntity(object referencedEntity, INavigation navigation, InternalEntityEntry referencedFromEntry)
    content.vb: Public Overridable Sub RecordReferencedUntrackedEntity(referencedEntity As Object, navigation As INavigation, referencedFromEntry As InternalEntityEntry)
    parameters:
    - id: referencedEntity
      type: System.Object
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
    - id: referencedFromEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers(System.Object,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers(System.Object,System.Boolean)
  id: GetRecordedReferers(System.Object,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetRecordedReferers(Object, Boolean)
  nameWithType: StateManager.GetRecordedReferers(Object, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRecordedReferers
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 405
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<Tuple<INavigation, InternalEntityEntry>> GetRecordedReferers(object referencedEntity, bool clear)
    content.vb: Public Overridable Function GetRecordedReferers(referencedEntity As Object, clear As Boolean) As IEnumerable(Of Tuple(Of INavigation, InternalEntityEntry))
    parameters:
    - id: referencedEntity
      type: System.Object
    - id: clear
      type: System.Boolean
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetPrincipal(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetPrincipal(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPrincipal
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 425
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry GetPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetPrincipal(dependentEntry As InternalEntityEntry, foreignKey As IForeignKey) As InternalEntityEntry
    parameters:
    - id: dependentEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPrincipalUsingPreStoreGeneratedValues
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 432
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry GetPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetPrincipalUsingPreStoreGeneratedValues(dependentEntry As InternalEntityEntry, foreignKey As IForeignKey) As InternalEntityEntry
    parameters:
    - id: dependentEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetPrincipalUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetPrincipalUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPrincipalUsingRelationshipSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 439
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual InternalEntityEntry GetPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetPrincipalUsingRelationshipSnapshot(dependentEntry As InternalEntityEntry, foreignKey As IForeignKey) As InternalEntityEntry
    parameters:
    - id: dependentEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  id: UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: UpdateIdentityMap(InternalEntityEntry, IKey)
  nameWithType: StateManager.UpdateIdentityMap(InternalEntityEntry, IKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UpdateIdentityMap
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 446
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void UpdateIdentityMap(InternalEntityEntry entry, IKey key)
    content.vb: Public Overridable Sub UpdateIdentityMap(entry As InternalEntityEntry, key As IKey)
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: key
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: UpdateDependentMap(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.UpdateDependentMap(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UpdateDependentMap
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 467
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey)
    content.vb: Public Overridable Sub UpdateDependentMap(entry As InternalEntityEntry, foreignKey As IForeignKey)
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetDependents(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetDependents(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDependents
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 483
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<InternalEntityEntry> GetDependents(InternalEntityEntry principalEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetDependents(principalEntry As InternalEntityEntry, foreignKey As IForeignKey) As IEnumerable(Of InternalEntityEntry)
    parameters:
    - id: principalEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetDependentsUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetDependentsUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDependentsUsingRelationshipSnapshot
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 496
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<InternalEntityEntry> GetDependentsUsingRelationshipSnapshot(InternalEntityEntry principalEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetDependentsUsingRelationshipSnapshot(principalEntry As InternalEntityEntry, foreignKey As IForeignKey) As IEnumerable(Of InternalEntityEntry)
    parameters:
    - id: principalEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  id: GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: GetDependentsFromNavigation(InternalEntityEntry, IForeignKey)
  nameWithType: StateManager.GetDependentsFromNavigation(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDependentsFromNavigation
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 509
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<InternalEntityEntry> GetDependentsFromNavigation(InternalEntityEntry principalEntry, IForeignKey foreignKey)
    content.vb: Public Overridable Function GetDependentsFromNavigation(principalEntry As InternalEntityEntry, foreignKey As IForeignKey) As IEnumerable(Of InternalEntityEntry)
    parameters:
    - id: principalEntry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    - id: foreignKey
      type: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
  id: ChangedCount
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: ChangedCount
  nameWithType: StateManager.ChangedCount
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ChangedCount
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 539
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int ChangedCount { get; set; }
    content.vb: Public Overridable Property ChangedCount As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ChangedCount
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Boolean)
  id: SaveChanges(System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: SaveChanges(Boolean)
  nameWithType: StateManager.SaveChanges(Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 545
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
    content.vb: Public Overridable Function SaveChanges(acceptAllChangesOnSuccess As Boolean) As Integer
    parameters:
    - id: acceptAllChangesOnSuccess
      type: System.Boolean
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(Boolean, CancellationToken)
  nameWithType: StateManager.SaveChangesAsync(Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 606
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SaveChangesAsync(acceptAllChangesOnSuccess As Boolean, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: acceptAllChangesOnSuccess
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry})
  id: SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: SaveChanges(IReadOnlyList<InternalEntityEntry>)
  nameWithType: StateManager.SaveChanges(IReadOnlyList<InternalEntityEntry>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 645
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual int SaveChanges(IReadOnlyList<InternalEntityEntry> entriesToSave)
    content.vb: Protected Overridable Function SaveChanges(entriesToSave As IReadOnlyList(Of InternalEntityEntry)) As Integer
    parameters:
    - id: entriesToSave
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges*
  nameWithType.vb: StateManager.SaveChanges(IReadOnlyList(Of InternalEntityEntry))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry))
  name.vb: SaveChanges(IReadOnlyList(Of InternalEntityEntry))
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry},System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(IReadOnlyList<InternalEntityEntry>, CancellationToken)
  nameWithType: StateManager.SaveChangesAsync(IReadOnlyList<InternalEntityEntry>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 658
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual Task<int> SaveChangesAsync(IReadOnlyList<InternalEntityEntry> entriesToSave, CancellationToken cancellationToken = null)
    content.vb: Protected Overridable Function SaveChangesAsync(entriesToSave As IReadOnlyList(Of InternalEntityEntry), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: entriesToSave
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync*
  nameWithType.vb: StateManager.SaveChangesAsync(IReadOnlyList(Of InternalEntityEntry), CancellationToken)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry), System.Threading.CancellationToken)
  name.vb: SaveChangesAsync(IReadOnlyList(Of InternalEntityEntry), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges
  id: AcceptAllChanges
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: AcceptAllChanges()
  nameWithType: StateManager.AcceptAllChanges()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AcceptAllChanges
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 672
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AcceptAllChanges()
    content.vb: Public Overridable Sub AcceptAllChanges
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
  id: Context
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: StateManager.Context
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Context
    path: src/Microsoft.EntityFrameworkCore/ChangeTracking/Internal/StateManager.cs
    startLine: 695
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual DbContext Context { get; }
    content.vb: Public Overridable ReadOnly Property Context As DbContext
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.DbContext
  overload: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context*
  implements:
  - Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Context
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IStateManager
  nameWithType: IStateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.#ctor
  isExternal: false
  name: StateManager
  nameWithType: StateManager.StateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StateManager
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IInternalEntityEntryFactory
  nameWithType: IInternalEntityEntryFactory
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IInternalEntityEntrySubscriber
  nameWithType: IInternalEntityEntrySubscriber
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IInternalEntityEntryNotifier
  nameWithType: IInternalEntityEntryNotifier
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IValueGenerationManager
  nameWithType: IValueGenerationManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager
- uid: Microsoft.EntityFrameworkCore.Metadata.IModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IModel
  nameWithType: IModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IModel
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabase
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabase
  nameWithType: IDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: IConcurrencyDetector
  nameWithType: IConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
- uid: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  commentId: T:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: ICurrentDbContext
  nameWithType: ICurrentDbContext
  fullName: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode
  isExternal: false
  name: GetTrackingQueryMode
  nameWithType: StateManager.GetTrackingQueryMode
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetTrackingQueryMode
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetTrackingQueryMode(IEntityType)
  nameWithType: IStateManager.GetTrackingQueryMode(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
    name: GetTrackingQueryMode
    nameWithType: IStateManager.GetTrackingQueryMode
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
    name: GetTrackingQueryMode
    nameWithType: IStateManager.GetTrackingQueryMode
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetTrackingQueryMode
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: TrackingQueryMode
  nameWithType: TrackingQueryMode
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TrackingQueryMode
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode
  isExternal: false
  name: EndSingleQueryMode
  nameWithType: StateManager.EndSingleQueryMode
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.EndSingleQueryMode
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: EndSingleQueryMode()
  nameWithType: IStateManager.EndSingleQueryMode()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
    name: EndSingleQueryMode
    nameWithType: IStateManager.EndSingleQueryMode
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
    name: EndSingleQueryMode
    nameWithType: IStateManager.EndSingleQueryMode
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.EndSingleQueryMode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
  isExternal: false
  name: Notify
  nameWithType: StateManager.Notify
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Notify
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Notify
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Notify
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: Notify
  nameWithType: IStateManager.Notify
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Notify
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
  isExternal: false
  name: ValueGeneration
  nameWithType: StateManager.ValueGeneration
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ValueGeneration
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ValueGeneration
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ValueGeneration
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: ValueGeneration
  nameWithType: IStateManager.ValueGeneration
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ValueGeneration
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry
  isExternal: false
  name: GetOrCreateEntry
  nameWithType: StateManager.GetOrCreateEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetOrCreateEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: GetOrCreateEntry(Object)
  nameWithType: IStateManager.GetOrCreateEntry(Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
    name: GetOrCreateEntry
    nameWithType: IStateManager.GetOrCreateEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry(System.Object)
    name: GetOrCreateEntry
    nameWithType: IStateManager.GetOrCreateEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetOrCreateEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: InternalEntityEntry
  nameWithType: InternalEntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery
  isExternal: false
  name: BeginTrackingQuery
  nameWithType: StateManager.BeginTrackingQuery
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.BeginTrackingQuery
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: BeginTrackingQuery()
  nameWithType: IStateManager.BeginTrackingQuery()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
    name: BeginTrackingQuery
    nameWithType: IStateManager.BeginTrackingQuery
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
    name: BeginTrackingQuery
    nameWithType: IStateManager.BeginTrackingQuery
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.BeginTrackingQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery
  isExternal: false
  name: StartTrackingFromQuery
  nameWithType: StateManager.StartTrackingFromQuery
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTrackingFromQuery
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet<IForeignKey>)
  nameWithType: IStateManager.StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet<IForeignKey>)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Object, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, ISet<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>)
  nameWithType.vb: IStateManager.StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet(Of IForeignKey))
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Object, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, ISet(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey))
  name.vb: StartTrackingFromQuery(IEntityType, Object, ValueBuffer, ISet(Of IForeignKey))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
    name: StartTrackingFromQuery
    nameWithType: IStateManager.StartTrackingFromQuery
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey})
    name: StartTrackingFromQuery
    nameWithType: IStateManager.StartTrackingFromQuery
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTrackingFromQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ValueBuffer
  nameWithType: ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
- uid: ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  commentId: '!:ISet{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}'
  definition: ISet`1
  name: ISet<IForeignKey>
  nameWithType: ISet<IForeignKey>
  fullName: ISet<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>
  nameWithType.vb: ISet(Of IForeignKey)
  fullname.vb: ISet(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  name.vb: ISet(Of IForeignKey)
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ISet`1
  isExternal: true
  name: ISet<>
  nameWithType: ISet<>
  fullName: ISet<>
  nameWithType.vb: ISet(Of )
  fullname.vb: ISet(Of )
  name.vb: ISet(Of )
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry
  isExternal: false
  name: TryGetEntry
  nameWithType: StateManager.TryGetEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.TryGetEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: TryGetEntry(IKey, Object[])
  nameWithType: IStateManager.TryGetEntry(IKey, Object[])
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, System.Object[])
  nameWithType.vb: IStateManager.TryGetEntry(IKey, Object())
  fullname.vb: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, System.Object())
  name.vb: TryGetEntry(IKey, Object())
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Object[])
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.IKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: TryGetEntry(IKey, ValueBuffer, Boolean)
  nameWithType: IStateManager.TryGetEntry(IKey, ValueBuffer, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey, Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Boolean)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Boolean)
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: TryGetEntry(Object)
  nameWithType: IStateManager.TryGetEntry(Object)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry(System.Object)
    name: TryGetEntry
    nameWithType: IStateManager.TryGetEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.TryGetEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
  isExternal: false
  name: Entries
  nameWithType: StateManager.Entries
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Entries
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Entries
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Entries
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: Entries
  nameWithType: IStateManager.Entries
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Entries
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<InternalEntityEntry>
  nameWithType: IEnumerable<InternalEntityEntry>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>
  nameWithType.vb: IEnumerable(Of InternalEntityEntry)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  name.vb: IEnumerable(Of InternalEntityEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking
  isExternal: false
  name: StartTracking
  nameWithType: StateManager.StartTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: StartTracking(InternalEntityEntry)
  nameWithType: IStateManager.StartTracking(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: StartTracking
    nameWithType: IStateManager.StartTracking
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: StartTracking
    nameWithType: IStateManager.StartTracking
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StartTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking
  isExternal: false
  name: StopTracking
  nameWithType: StateManager.StopTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StopTracking
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: StopTracking(InternalEntityEntry)
  nameWithType: IStateManager.StopTracking(InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: StopTracking
    nameWithType: IStateManager.StopTracking
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: StopTracking
    nameWithType: IStateManager.StopTracking
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.StopTracking
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe
  isExternal: false
  name: Unsubscribe
  nameWithType: StateManager.Unsubscribe
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Unsubscribe
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: Unsubscribe()
  nameWithType: IStateManager.Unsubscribe()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
    name: Unsubscribe
    nameWithType: IStateManager.Unsubscribe
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
    name: Unsubscribe
    nameWithType: IStateManager.Unsubscribe
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Unsubscribe
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity
  isExternal: false
  name: RecordReferencedUntrackedEntity
  nameWithType: StateManager.RecordReferencedUntrackedEntity
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.RecordReferencedUntrackedEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: RecordReferencedUntrackedEntity(Object, INavigation, InternalEntityEntry)
  nameWithType: IStateManager.RecordReferencedUntrackedEntity(Object, INavigation, InternalEntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object, Microsoft.EntityFrameworkCore.Metadata.INavigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: RecordReferencedUntrackedEntity
    nameWithType: IStateManager.RecordReferencedUntrackedEntity
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity(System.Object,Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
    name: RecordReferencedUntrackedEntity
    nameWithType: IStateManager.RecordReferencedUntrackedEntity
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.RecordReferencedUntrackedEntity
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.INavigation
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: INavigation
  nameWithType: INavigation
  fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers
  isExternal: false
  name: GetRecordedReferers
  nameWithType: StateManager.GetRecordedReferers
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetRecordedReferers
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: GetRecordedReferers(Object, Boolean)
  nameWithType: IStateManager.GetRecordedReferers(Object, Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object, System.Boolean)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)
    name: GetRecordedReferers
    nameWithType: IStateManager.GetRecordedReferers
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers(System.Object,System.Boolean)
    name: GetRecordedReferers
    nameWithType: IStateManager.GetRecordedReferers
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetRecordedReferers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Tuple{Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<INavigation, InternalEntityEntry>>
  nameWithType: IEnumerable<Tuple<INavigation, InternalEntityEntry>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<Microsoft.EntityFrameworkCore.Metadata.INavigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>>
  nameWithType.vb: IEnumerable(Of Tuple(Of INavigation, InternalEntityEntry))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of Microsoft.EntityFrameworkCore.Metadata.INavigation, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry))
  name.vb: IEnumerable(Of Tuple(Of INavigation, InternalEntityEntry))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal
  isExternal: false
  name: GetPrincipal
  nameWithType: StateManager.GetPrincipal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipal
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetPrincipal(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetPrincipal(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipal
    nameWithType: IStateManager.GetPrincipal
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipal
    nameWithType: IStateManager.GetPrincipal
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipal
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IForeignKey
  nameWithType: IForeignKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues
  isExternal: false
  name: GetPrincipalUsingPreStoreGeneratedValues
  nameWithType: StateManager.GetPrincipalUsingPreStoreGeneratedValues
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingPreStoreGeneratedValues
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipalUsingPreStoreGeneratedValues
    nameWithType: IStateManager.GetPrincipalUsingPreStoreGeneratedValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipalUsingPreStoreGeneratedValues
    nameWithType: IStateManager.GetPrincipalUsingPreStoreGeneratedValues
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingPreStoreGeneratedValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot
  isExternal: false
  name: GetPrincipalUsingRelationshipSnapshot
  nameWithType: StateManager.GetPrincipalUsingRelationshipSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetPrincipalUsingRelationshipSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetPrincipalUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetPrincipalUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipalUsingRelationshipSnapshot
    nameWithType: IStateManager.GetPrincipalUsingRelationshipSnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetPrincipalUsingRelationshipSnapshot
    nameWithType: IStateManager.GetPrincipalUsingRelationshipSnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetPrincipalUsingRelationshipSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap
  isExternal: false
  name: UpdateIdentityMap
  nameWithType: StateManager.UpdateIdentityMap
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateIdentityMap
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: UpdateIdentityMap(InternalEntityEntry, IKey)
  nameWithType: IStateManager.UpdateIdentityMap(InternalEntityEntry, IKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
    name: UpdateIdentityMap
    nameWithType: IStateManager.UpdateIdentityMap
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IKey)
    name: UpdateIdentityMap
    nameWithType: IStateManager.UpdateIdentityMap
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateIdentityMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap
  isExternal: false
  name: UpdateDependentMap
  nameWithType: StateManager.UpdateDependentMap
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.UpdateDependentMap
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: UpdateDependentMap(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.UpdateDependentMap(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: UpdateDependentMap
    nameWithType: IStateManager.UpdateDependentMap
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: UpdateDependentMap
    nameWithType: IStateManager.UpdateDependentMap
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.UpdateDependentMap
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents
  isExternal: false
  name: GetDependents
  nameWithType: StateManager.GetDependents
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependents
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetDependents(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetDependents(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependents
    nameWithType: IStateManager.GetDependents
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependents
    nameWithType: IStateManager.GetDependents
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependents
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot
  isExternal: false
  name: GetDependentsUsingRelationshipSnapshot
  nameWithType: StateManager.GetDependentsUsingRelationshipSnapshot
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsUsingRelationshipSnapshot
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetDependentsUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetDependentsUsingRelationshipSnapshot(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependentsUsingRelationshipSnapshot
    nameWithType: IStateManager.GetDependentsUsingRelationshipSnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependentsUsingRelationshipSnapshot
    nameWithType: IStateManager.GetDependentsUsingRelationshipSnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsUsingRelationshipSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation
  isExternal: false
  name: GetDependentsFromNavigation
  nameWithType: StateManager.GetDependentsFromNavigation
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.GetDependentsFromNavigation
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: GetDependentsFromNavigation(InternalEntityEntry, IForeignKey)
  nameWithType: IStateManager.GetDependentsFromNavigation(InternalEntityEntry, IForeignKey)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependentsFromNavigation
    nameWithType: IStateManager.GetDependentsFromNavigation
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
    name: GetDependentsFromNavigation
    nameWithType: IStateManager.GetDependentsFromNavigation
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.GetDependentsFromNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
  isExternal: false
  name: ChangedCount
  nameWithType: StateManager.ChangedCount
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.ChangedCount
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ChangedCount
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ChangedCount
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: ChangedCount
  nameWithType: IStateManager.ChangedCount
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.ChangedCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges
  isExternal: false
  name: SaveChanges
  nameWithType: StateManager.SaveChanges
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: SaveChanges(Boolean)
  nameWithType: IStateManager.SaveChanges(Boolean)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
    name: SaveChanges
    nameWithType: IStateManager.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges(System.Boolean)
    name: SaveChanges
    nameWithType: IStateManager.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync
  isExternal: false
  name: SaveChangesAsync
  nameWithType: StateManager.SaveChangesAsync
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: true
  name: SaveChangesAsync(Boolean, CancellationToken)
  nameWithType: IStateManager.SaveChangesAsync(Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
    name: SaveChangesAsync
    nameWithType: IStateManager.SaveChangesAsync
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)
    name: SaveChangesAsync
    nameWithType: IStateManager.SaveChangesAsync
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<InternalEntityEntry>
  nameWithType: IReadOnlyList<InternalEntityEntry>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>
  nameWithType.vb: IReadOnlyList(Of InternalEntityEntry)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry)
  name.vb: IReadOnlyList(Of InternalEntityEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges
  isExternal: false
  name: AcceptAllChanges
  nameWithType: StateManager.AcceptAllChanges
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.AcceptAllChanges
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
  commentId: M:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: AcceptAllChanges()
  nameWithType: IStateManager.AcceptAllChanges()
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
    name: AcceptAllChanges
    nameWithType: IStateManager.AcceptAllChanges
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
    name: AcceptAllChanges
    nameWithType: IStateManager.AcceptAllChanges
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.AcceptAllChanges
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context*
  commentId: Overload:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
  isExternal: false
  name: Context
  nameWithType: StateManager.Context
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.Context
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Context
  commentId: P:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Context
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  isExternal: false
  name: Context
  nameWithType: IStateManager.Context
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager.Context
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
